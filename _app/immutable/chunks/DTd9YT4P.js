var ka=Object.defineProperty;var ya=(i,a,n)=>a in i?ka(i,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):i[a]=n;var Ms=(i,a,n)=>ya(i,typeof a!="symbol"?a+"":a,n);import{t as C,a as f,b as Cs,n as Vs}from"./Ix_iQA8O.js";import{e as Is,i as Ss,r as Ns,b as bs,B as Bs}from"./Cbg54n8Y.js";import{aq as Ea,y as ua,ab as Js,S as ga,R as Us,h as Zs,ar as fa,c as r,r as o,s,f as ss,n as z,p as js,t as ps,g as t,u as I,b as Os,w as $,x as Hs,q as ba,v as b}from"./Dkazavay.js";import{h as e}from"./D4zUk_qf.js";import{k as Qs,p as q,s as is,i as Fs}from"./FC-Yzx7w.js";import{s as Fa,a as zs}from"./CgpvT9E8.js";function xa(i,a,n=a){var p=Ea();Qs(i,"input",l=>{var d=l?i.defaultValue:i.value;if(d=$s(i)?qs(d):d,n(d),p&&d!==(d=a())){var c=i.selectionStart,k=i.selectionEnd;i.value=d??"",k!==null&&(i.selectionStart=c,i.selectionEnd=Math.min(k,i.value.length))}}),(Zs&&i.defaultValue!==i.value||ua(a)==null&&i.value)&&n($s(i)?qs(i.value):i.value),Js(()=>{var l=a();$s(i)&&l===qs(i.value)||i.type==="date"&&!l&&!i.value||l!==i.value&&(i.value=l??"")})}const Rs=new Set;function Ys(i,a,n,p,l=p){var d=n.getAttribute("type")==="checkbox",c=i;let k=!1;if(a!==null)for(var m of a)c=c[m]??(c[m]=[]);c.push(n),Qs(n,"change",()=>{var h=n.__value;d&&(h=Xs(c,h,n.checked)),l(h)},()=>l(d?[]:null)),Js(()=>{var h=p();if(Zs&&n.defaultChecked!==n.checked){k=!0;return}d?(h=h||[],n.checked=h.includes(n.__value)):n.checked=fa(n.__value,h)}),ga(()=>{var h=c.indexOf(n);h!==-1&&c.splice(h,1)}),Rs.has(c)||(Rs.add(c),Us(()=>{c.sort((h,y)=>h.compareDocumentPosition(y)===4?-1:1),Rs.delete(c)})),Us(()=>{if(k){var h;if(d)h=Xs(c,h,n.checked);else{var y=c.find(E=>E.checked);h=y==null?void 0:y.__value}l(h)}})}function Xs(i,a,n){for(var p=new Set,l=0;l<i.length;l+=1)i[l].checked&&p.add(i[l].__value);return n||p.delete(a),Array.from(p)}function $s(i){var a=i.type;return a==="number"||a==="range"}function qs(i){return i===""?null:+i}function Ps(i){throw new Error(i)}var va=C('<div class="scrollbox svelte-yiz1i3"><!></div>');function rs(i,a){var n=va(),p=r(n);Fa(p,()=>a.children),o(n),f(i,n)}const sa={date:"2018-10-26",tags:["C#"],keywords:["C#",".Net","Enums"],title:"Shift Your C# Enums",preview:"Discover the simple yet powerful technique of using bitwise shift operator in C# Enums, and how it can improve the readability and maintainability of your code.",draft:!1,legacy:!0,hero:"/images/blog/001-binary-shifts-for-flags/hero.jpg",links:["https://www.alanzucconi.com/2015/07/26/enum-flags-and-bitwise-operators/"],readingTime:{text:"2 min read",minutes:1.02,time:61200,words:204}},{date:Ne,tags:Ge,keywords:Ue,title:Ye,preview:Xe,draft:Ke,legacy:Je,hero:Ze,links:Qe,readingTime:st}=sa;var wa=C('<p>If you want easily increment your flags in <code>Enum</code>, you can represent it’s values with bitwise shift operator:</p> <!> <p>Performance is equal, cause in code all enums translated into underlying numbers by compiler itself, so no runtime overhead. Seems a little bit more trivial, than multiplying “by hand”:</p> <!> <p>More info about bitwise operators and Enums you can learn from <a href="https://www.alanzucconi.com/2015/07/26/enum-flags-and-bitwise-operators/" rel="nofollow">this post</a>.</p>',1);function Ca(i){var a=wa(),n=s(ss(a),2);e(n,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">[</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Flags</span><span style="color:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">enum</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ProgrammingLanguages</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    None</span><span style="color:#D73A49;--shiki-dark:#F97583">        =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    C</span><span style="color:#D73A49;--shiki-dark:#F97583">           =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583"> &#x3C;&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    Cpp</span><span style="color:#D73A49;--shiki-dark:#F97583">         =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583"> &#x3C;&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    VisualBasic</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583"> &#x3C;&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    VisualCpp</span><span style="color:#D73A49;--shiki-dark:#F97583">   =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583"> &#x3C;&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 3</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    Rust</span><span style="color:#D73A49;--shiki-dark:#F97583">        =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583"> &#x3C;&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 4</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    CSharp</span><span style="color:#D73A49;--shiki-dark:#F97583">      =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583"> &#x3C;&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 5</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    Java</span><span style="color:#D73A49;--shiki-dark:#F97583">        =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583"> &#x3C;&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 6</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    Php</span><span style="color:#D73A49;--shiki-dark:#F97583">         =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583"> &#x3C;&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 7</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    Go</span><span style="color:#D73A49;--shiki-dark:#F97583">          =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583"> &#x3C;&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 8</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    Rust</span><span style="color:#D73A49;--shiki-dark:#F97583">        =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583"> &#x3C;&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 9</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    Scala</span><span style="color:#D73A49;--shiki-dark:#F97583">       =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583"> &#x3C;&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 10</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    Clojure</span><span style="color:#D73A49;--shiki-dark:#F97583">     =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583"> &#x3C;&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 11</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    FSharp</span><span style="color:#D73A49;--shiki-dark:#F97583">      =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583"> &#x3C;&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 12</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    DotNetFamily</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> VisualBasic </span><span style="color:#D73A49;--shiki-dark:#F97583">|</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> VisualCpp </span><span style="color:#D73A49;--shiki-dark:#F97583">|</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> CSharp,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    JvmFamily</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Java </span><span style="color:#D73A49;--shiki-dark:#F97583">|</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Scala </span><span style="color:#D73A49;--shiki-dark:#F97583">|</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Clojure</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var p=s(n,4);e(p,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">[</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Flags</span><span style="color:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">enum</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ProgrammingLanguages</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    None</span><span style="color:#D73A49;--shiki-dark:#F97583">        =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    C</span><span style="color:#D73A49;--shiki-dark:#F97583">           =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    Cpp</span><span style="color:#D73A49;--shiki-dark:#F97583">         =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    VisualBasic</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 4</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    VisualCpp</span><span style="color:#D73A49;--shiki-dark:#F97583">   =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 8</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    Rust</span><span style="color:#D73A49;--shiki-dark:#F97583">        =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 16</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    CSharp</span><span style="color:#D73A49;--shiki-dark:#F97583">      =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 32</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    Java</span><span style="color:#D73A49;--shiki-dark:#F97583">        =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 64</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    Php</span><span style="color:#D73A49;--shiki-dark:#F97583">         =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 128</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    Go</span><span style="color:#D73A49;--shiki-dark:#F97583">          =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 256</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    Rust</span><span style="color:#D73A49;--shiki-dark:#F97583">        =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 512</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    Scala</span><span style="color:#D73A49;--shiki-dark:#F97583">       =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1024</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    Clojure</span><span style="color:#D73A49;--shiki-dark:#F97583">     =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 2048</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    FSharp</span><span style="color:#D73A49;--shiki-dark:#F97583">      =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 4096</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    DotNetFamily</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> VisualBasic </span><span style="color:#D73A49;--shiki-dark:#F97583">|</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> VisualCpp </span><span style="color:#D73A49;--shiki-dark:#F97583">|</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> CSharp,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    JvmFamily</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Java </span><span style="color:#D73A49;--shiki-dark:#F97583">|</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Scala </span><span style="color:#D73A49;--shiki-dark:#F97583">|</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Clojure</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`),z(2),f(i,a)}const Ba=Object.freeze(Object.defineProperty({__proto__:null,default:Ca,metadata:sa},Symbol.toStringTag,{value:"Module"})),aa={date:"2018-10-27",tags:["C#"],keywords:["C#","CallerMemberName"],title:"Using CallerMemberName for Improved Logging in C#",preview:'Learn how to use "magic" attributes in C#, such as CallerFilePath, CallerLineNumber, and CallerMemberName, to retrieve caller information and improve logging functionality.',draft:!1,legacy:!0,hero:"/images/blog/002-callermembername-attribute-for-logging/hero.jpg",links:["https://docs.microsoft.com/ru-ru/dotnet/csharp/programming-guide/concepts/caller-information"],readingTime:{text:"3 min read",minutes:2.86,time:171600,words:572}},{date:at,tags:et,keywords:tt,title:nt,preview:it,draft:lt,legacy:ot,hero:rt,links:pt,readingTime:ct}=aa;var Aa=C('<p>In software development, especially when working with large codebases, tracking down where and how methods are called can be a challenging task. Debugging and logging become essential tools in a developer’s toolkit to understand the flow of execution and identify issues.</p> <p>Since C# 4.5, the language introduced a set of “magic” attributes that greatly simplify this process. These attributes automatically provide information about the caller, making your code cleaner and more maintainable.</p> <p>This blog post will delve into how these attributes work, provide examples of their use, and demonstrate how they can enhance your debugging and logging efforts.</p> <h2 id="understanding-caller-information-attributes"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#understanding-caller-information-attributes">#</a>Understanding Caller Information Attributes</h2> <p>Caller information attributes are designed to retrieve metadata about the caller of a method. They are <code>CallerFilePath</code>, <code>CallerLineNumber</code> and <code>CallerMemberName</code>.</p> <p>These attributes allow you to change the default values of optional parameters in methods, providing valuable information about the location in the code where the method was called.</p> <h2 id="what-is-a-caller"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#what-is-a-caller">#</a>What is a Caller?</h2> <p>In programming, a <em>caller</em> is the piece of code that invokes (calls) a method or function. Understanding the context of the caller can help in debugging and maintaining code, as it tells you where a particular method was called from within your application.</p> <h2 id="default-behavior-of-optional-parameters"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#default-behavior-of-optional-parameters">#</a>Default Behavior of Optional Parameters</h2> <p>By default, the compiler translates optional parameters into their default values if no other value is provided. For example, consider the following logging method:</p> <!> <p>If you call this method with <code>Log(msg)</code>, the compiler translates this to <code>Log(msg, null)</code>.</p> <h2 id="enhancing-optional-parameters-with-caller-attributes"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#enhancing-optional-parameters-with-caller-attributes">#</a>Enhancing Optional Parameters with Caller Attributes</h2> <p>You can enhance this behavior using caller attributes. By placing these attributes before the optional parameters in your method, the compiler will automatically fill in the predefined values:</p> <ul><li><code>CallerFilePath</code> passes the full path of the source code file where the method was called.</li> <li><code>CallerLineNumber</code> passes the line number (as an integer) where the method was called.</li> <li><code>CallerMemberName</code> passes the name of the member (constructor, method, property, event, etc.) that called the method.</li></ul> <h2 id="example-tracing-or-logging"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#example-tracing-or-logging">#</a>Example: Tracing or Logging</h2> <p>For instance, if you want to write tracing or logging code and need to know where an event occurred, you can use these attributes as shown below:</p> <!> <p>When you invoke this method:</p> <!> <p>You will see output similar to:</p> <!> <h3 id="example-implementing-inotifypropertychanged"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#example-implementing-inotifypropertychanged">#</a>Example: Implementing INotifyPropertyChanged</h3> <p>If you are familiar with <code>INotifyPropertyChanged</code>, you can implement the PropertyChanged event without the hassle of always passing the name of the property that was changed. Here is an example:</p> <!> <p>In this example, the <code>OnPropertyChanged</code> method uses the <code>[CallerMemberName]</code> attribute to automatically provide the name of the property that has changed, eliminating the need to manually specify it each time.</p> <h2 id="final-thoughts"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#final-thoughts">#</a>Final Thoughts</h2> <p>Leveraging caller information attributes in C# can significantly simplify your debugging, logging, and event-handling code, making it more robust and easier to maintain.</p> <p>By automatically providing information about the caller, these attributes save you time and reduce the likelihood of errors in your code. For more details on these attributes, you can refer to the <a href="https://docs.microsoft.com/ru-ru/dotnet/csharp/programming-guide/concepts/caller-information" rel="nofollow">official documentation</a> about these attributes.</p>',1);function Da(i){var a=Aa(),n=s(ss(a),20);e(n,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">void</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> msg</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> method</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // logging somewhere</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var p=s(n,14);e(p,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> static</span><span style="color:#D73A49;--shiki-dark:#F97583"> void</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> TraceEvent</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> message</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    [</span><span style="color:#6F42C1;--shiki-dark:#B392F0">CallerMemberName</span><span style="color:#24292E;--shiki-dark:#E1E4E8">] </span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> memberName</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> ""</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    [</span><span style="color:#6F42C1;--shiki-dark:#B392F0">CallerFilePath</span><span style="color:#24292E;--shiki-dark:#E1E4E8">] </span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> sourceFilePath</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> ""</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    [</span><span style="color:#6F42C1;--shiki-dark:#B392F0">CallerLineNumber</span><span style="color:#24292E;--shiki-dark:#E1E4E8">] </span><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> sourceLineNumber</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    Trace.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">WriteLine</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"event: "</span><span style="color:#D73A49;--shiki-dark:#F97583"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> message);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    Trace.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">WriteLine</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"member name: "</span><span style="color:#D73A49;--shiki-dark:#F97583"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> memberName);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    Trace.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">WriteLine</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"source file path: "</span><span style="color:#D73A49;--shiki-dark:#F97583"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> sourceFilePath);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    Trace.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">WriteLine</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"source line number: "</span><span style="color:#D73A49;--shiki-dark:#F97583"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> sourceLineNumber);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var l=s(p,4);e(l,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">static</span><span style="color:#D73A49;--shiki-dark:#F97583"> void</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Main</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="color:#6F42C1;--shiki-dark:#B392F0">args</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    TraceEvent</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"Started"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var d=s(l,4);e(d,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span>event: Started</span></span>
<span class="line"><span>member name: Main</span></span>
<span class="line"><span>source file path: C:somepath&#92;tosourceCallerInfoTest.CliCallerInfoTest.CliProgram.cs</span></span>
<span class="line"><span>source line number: 11</span></span></code></pre>`);var c=s(d,6);e(c,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ViewModel</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#6F42C1;--shiki-dark:#B392F0">INotifyPropertyChanged</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    private</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> String</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> _message</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> String</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Message</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        get</span><span style="color:#D73A49;--shiki-dark:#F97583"> =></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> _message;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        set</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">            if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (value </span><span style="color:#D73A49;--shiki-dark:#F97583">==</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> _message) </span><span style="color:#D73A49;--shiki-dark:#F97583">return</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            _message </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> value;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">            OnPropertyChanged</span><span style="color:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#D73A49;--shiki-dark:#F97583"> event</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> PropertyChangedEventHandler</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> PropertyChanged</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    protected</span><span style="color:#D73A49;--shiki-dark:#F97583"> virtual</span><span style="color:#D73A49;--shiki-dark:#F97583"> void</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> OnPropertyChanged</span><span style="color:#24292E;--shiki-dark:#E1E4E8">([</span><span style="color:#6F42C1;--shiki-dark:#B392F0">CallerMemberName</span><span style="color:#24292E;--shiki-dark:#E1E4E8">] </span><span style="color:#6F42C1;--shiki-dark:#B392F0">String</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> propertyName</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        PropertyChanged</span><span style="color:#D73A49;--shiki-dark:#F97583">?</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Invoke</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> PropertyChangedEventArgs</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(propertyName));</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`),z(8),f(i,a)}const _a=Object.freeze(Object.defineProperty({__proto__:null,default:Da,metadata:aa},Symbol.toStringTag,{value:"Module"})),ea={date:"2018-11-12",tags:["C#"],keywords:["C#","testing","InternalsVisibleTo"],title:"Testing Private Code in C#: Breaking Encapsulation with InternalsVisibleTo Attribute",preview:"Learn about the different options available for testing private logic in C# and how the InternalsVisibleTo attribute can help you access internal members without compromising the encapsulation of your code.",draft:!1,legacy:!0,hero:"/images/blog/003-internals-visible-for-testing/hero.jpg",links:["https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.internalsvisibletoattribute"],readingTime:{text:"2 min read",minutes:2.005,time:120300,words:401}},{date:ht,tags:dt,keywords:mt,title:kt,preview:yt,draft:Et,legacy:ut,hero:gt,links:ft,readingTime:bt}=ea;var Ta=C(`<h2 id="about-tests-for-private-code"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#about-tests-for-private-code">#</a>About Tests for Private Code</h2> <p>Well, most of the time, if you need to test some private logic, maybe you it’s better to be SPECIFIC and extract it to public members of new classes. Sometimes decomposition “rocks” and you code became clearer and more maintainable, so check it out before.</p> <p>However, this private logic can be really connected to the domain of a single class and isn’t worth of extracting it somewhere else.</p> <p>In that case you have 3 simple options and all of them somehow break the idea of encapsulation:</p> <ul><li>Make those members <code>public</code> and treat them in your test-fixtures as usual. It may be OK, if you are writing simple app and for now you don’t care about clean public interfaces. However, if you provide it as a public library, This approach opens you internal logic for every user, so, if “dirty” usage of these members could break state of your objects or even whole application.</li> <li>Make those members <code>protected</code>, inherit into your testable stub, which will make those members <code>public</code>, or derive your test-fixture from it. This can also work, but you have to write some boilerplate code. However, it is not suitable, if your class is sealed. For example, if you don’t want users to extend it, as it may break the logic of connected classes.</li> <li>Make those members <code>internal</code> and add <code>InternalsVisibleTo</code> attribute on assembly-level. This approach also breaks encapsulation, but only inside you assembly, all your public interfaces for users will stay clean and secure. And you don’t need to use inheritance and write stubs.</li></ul> <h2 id="how-to-use-internalsvisibleto"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#how-to-use-internalsvisibleto">#</a>How to Use <code>InternalsVisibleTo</code></h2> <p>For example, you have got a class <code>Some</code> with public method <code>Increment</code> and internal property <code>Counter</code> as object’s state:</p> <!> <p>You want to assert its state in some CLI or test-fixture:</p> <!> <p>We can’t access property <code>Counter</code> in assembly <code>InternalsVisibleTests</code>, because it’s modifier is <code>internal</code>. To open internal logic for other assemblies, you need to provide attribute for whole testable assembly in file <code>AssemblyInfo.cs</code> or just above the definition of your class, it doesn’t really matter.
Let’s put attribute invocation into <code>AssemblyInfo.cs</code> of project <code>InternalsLib</code>:</p> <!> <p>Now <code>InternalsVisibleTests</code> became a friend assembly and internal members from assembly <code>InternalsLib</code> became visible inside of its scope.</p> <p>You can learn more about <code>InternalsVisibleTo</code> at <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.internalsvisibletoattribute" rel="nofollow">documentation</a>.</p>`,1);function Ia(i){var a=Ta(),n=s(ss(a),14);e(n,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">namespace</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> InternalsLib</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#D73A49;--shiki-dark:#F97583"> class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Some</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        internal</span><span style="color:#D73A49;--shiki-dark:#F97583"> int</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Counter</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> &#123; </span><span style="color:#D73A49;--shiki-dark:#F97583">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; </span><span style="color:#D73A49;--shiki-dark:#F97583">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        public</span><span style="color:#D73A49;--shiki-dark:#F97583"> void</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Increment</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            Counter</span><span style="color:#D73A49;--shiki-dark:#F97583">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var p=s(n,4);e(p,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">using</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> System</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Diagnostics</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">using</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> InternalsLib</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">namespace</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> InternalsVisibleTests</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Program</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        static</span><span style="color:#D73A49;--shiki-dark:#F97583"> void</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Main</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="color:#6F42C1;--shiki-dark:#B392F0">args</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">            var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> someObj</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Some</span><span style="color:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            someObj.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Increment</span><span style="color:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            Trace.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">WriteLine</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">$"Expected count &#123;</span><span style="color:#005CC5;--shiki-dark:#79B8FF">1</span><span style="color:#032F62;--shiki-dark:#9ECBFF">&#125;, real count &#123;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">someObj</span><span style="color:#032F62;--shiki-dark:#9ECBFF">.</span><span style="color:#24292E;--shiki-dark:#E1E4E8">Counter</span><span style="color:#032F62;--shiki-dark:#9ECBFF">&#125;"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var l=s(p,4);e(l,()=>'<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">[</span><span style="color:#D73A49;--shiki-dark:#F97583">assembly</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#6F42C1;--shiki-dark:#B392F0">InternalsVisibleTo</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"InternalsVisibleTests"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)]</span></span></code></pre>'),z(4),f(i,a)}const Sa=Object.freeze(Object.defineProperty({__proto__:null,default:Ia,metadata:ea},Symbol.toStringTag,{value:"Module"})),ta={date:"2018-11-15",tags:["C#"],keywords:["C#","deconstructors","tuples","operation-result"],title:"Benefits of deconstructors for custom types",preview:"How and when to use deconstruction syntax-sugar for your custom types in C#",draft:!1,legacy:!0,hero:"/images/blog/004-deconstructors/hero.jpg",links:["#implementing-deconstruction-for-custom-types","https://docs.microsoft.com/ru-ru/dotnet/csharp/discards","https://docs.microsoft.com/ru-ru/dotnet/csharp/deconstruct","https://blogs.msdn.microsoft.com/seteplia/2017/11/01/dissecting-the-tuples-in-c-7/","https://www.codeproject.com/Articles/1022462/Error-Handling-in-SOLID-Csharp-NET-The-Operation-R"],readingTime:{text:"6 min read",minutes:5.925,time:355500,words:1185}},{date:Ft,tags:xt,keywords:vt,title:wt,preview:Ct,draft:Bt,legacy:At,hero:Dt,links:_t,readingTime:Tt}=ta;var za=C(`<h2 id="about-tuples-in-c-7"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#about-tuples-in-c-7">#</a>About Tuples in C# 7</h2> <p>New tuples and its support in C# 7 are blazing-cool:</p> <ul><li>they are structures, so no heap allocations;</li> <li>they have aliases for names of its fields (<code>tuple.Info</code> vs old <code>tuple.Item1</code>);</li> <li>they bring syntax-sugar of deconstruction;</li></ul> <p>Moreover, the deconstruction can be used not only for build-in tuples, but also for your own classes and structures.</p> <h2 id="deconstruction-for-tuples"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#deconstruction-for-tuples">#</a>Deconstruction for Tuples</h2> <p>Let’s start with the original usage for tuples. If you are already familiar with it, you may jump to <a href="#implementing-deconstruction-for-custom-types">the next block</a>.</p> <p>For example, you have a method, which returns a statistic about most frequent word in a form of a tuple with two fields: word and count. Below is the example of such method:</p> <!> <p>As you see, <code>GetMostFrequentWord</code> returns unnamed tuple, and you can access its fields via <code>Item1</code> and <code>Item2</code>:</p> <!> <p>On the other hand, if you implement named-tuple, those values can be accessed through aliases, you just need to make some changes into declaration of the tuple:</p> <!> <p>However, our original need is just getting those fields <code>word</code> and <code>count</code>, we don’t really care about grouping tuple. So be it: with the help of deconstruction, we can initialize only variables <code>word</code> and <code>count</code>:</p> <!> <p>In addition, you can even use <code>var</code> for completely deconstructed tuple, instead of specifying explicit types for every field:</p> <!> <p>If you don’t need some fields from deconstruction, you can use another feature of C# 7 - <a href="https://docs.microsoft.com/ru-ru/dotnet/csharp/discards" rel="nofollow">discards</a>. For example, if we want to discard the creation of variable <code>count</code> during deconstruction, we can pass <code>_</code> instead:</p> <!> <h2 id="implementing-deconstruction-for-custom-types"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#implementing-deconstruction-for-custom-types">#</a>Implementing Deconstruction for Custom Types</h2> <p>Using deconstruction of tuples is quite straightforward, how about user-defined types? You may want <code>GetMostFrequentWord</code> to return your own struct <code>WordStat</code>:</p> <!> <p>Generic tuples are great, but there are several reasons for using your own models:</p> <ul><li>Better readability, as your code became less “technical”.</li> <li>Easy refactoring, for example, if you want to change field names or add new ones.</li> <li>Your model has domain specifics, but generic tuples - doesn’t.</li></ul> <p>So, we will use <code>WordStat</code> instead of a tuple, but can we use deconstruction for our model?</p> <p>We are lucky because we can add this feature to our type. All is needed is adding new public method <code>Deconstruct</code> with <code>out</code> parameters, that will be extracted during deconstruction:</p> <!> <p>After that, smart compiler will use this method to produce deconstructed values:</p> <!> <p>Deconstructed fields must be of same types and in same order and count, as they appear in <code>Deconstruct</code>. You can have as many configurations of deconstruction, as how many overrides of <code>Deconstruct</code> you have.
One more thing - <code>Deconstruct</code> may be an extension-method!</p> <p>Let’s add a new field <code>WordLength</code> to <code>WordStat</code> and write an extension to get all those three fields:</p> <!> <p>Now we can get word’s length from deconstruction:</p> <!> <h2 id="use-cases-of-deconstruction"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#use-cases-of-deconstruction">#</a>Use-Cases of Deconstruction</h2> <p>Imagine a service, which sends you some data, for example aggregational count of some records in some data-sources. Method takes a long time to aggregate. Let’s say it’s signature will be:</p> <!> <p>What if service failed, while retrieving count; or even more complicated - it failed only for several sources. What will be the result of <code>Count</code>: partial count, <code>default(int)</code>, <code>-1</code>, <code>null</code> (if it will be <code>Nullable&lt;int&gt;</code>)? Or maybe <code>Count</code> will throw an exception?</p> <p>One approach is to use complex type as a result; often it is named as <strong>Operation Result</strong>. It usually consists of requested data and some information about errors, which have been occurred (or not). Below is the example:</p> <!> <!> <!> <p>The main idea is that it is grouping result and errors, so we have full information about result of the operation and may react as we want. In our case we want to show user any result, even if it isn’t full.</p> <p>So, as in the example with frequent word, our model of complex result just group everything together. It’s useful when we construct complex result via our factory-methods, but then in the consumer we need only its fields.</p> <p>There may be different ways of how we consume these results, for example, we just need requested data, even if it may be equals <code>default</code> (empty).</p> <p>So, we can use deconstruction and discards. Firstly, we create <code>Deconstruct</code> with all 4 fields:</p> <!> <p>Then we can deconstruct it as we want:</p> <!> <p>And that’s it, were are ready to go on!</p> <h2 id="further-reading"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#further-reading">#</a>Further Reading</h2> <ul><li><a href="https://docs.microsoft.com/ru-ru/dotnet/csharp/deconstruct" rel="nofollow">Documentation about deconstruction</a></li> <li><a href="https://blogs.msdn.microsoft.com/seteplia/2017/11/01/dissecting-the-tuples-in-c-7/" rel="nofollow">Some investigation about how new tuples work</a></li> <li><a href="https://www.codeproject.com/Articles/1022462/Error-Handling-in-SOLID-Csharp-NET-The-Operation-R" rel="nofollow">Article about different kinds of error handling, like OperationResult</a></li></ul>`,1);function Ma(i){var a=za(),n=s(ss(a),14);e(n,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">static</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#6F42C1;--shiki-dark:#B392F0">GetMostFrequentWord</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> text</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> group</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> text.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Split</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">' '</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="color:#6F42C1;--shiki-dark:#B392F0">GroupBy</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">s</span><span style="color:#D73A49;--shiki-dark:#F97583"> =></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> s)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="color:#6F42C1;--shiki-dark:#B392F0">OrderByDescending</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">grouping</span><span style="color:#D73A49;--shiki-dark:#F97583"> =></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> grouping.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Count</span><span style="color:#24292E;--shiki-dark:#E1E4E8">())</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="color:#6F42C1;--shiki-dark:#B392F0">First</span><span style="color:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (group.Key, group.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Count</span><span style="color:#24292E;--shiki-dark:#E1E4E8">());</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var p=s(n,4);e(p,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">static</span><span style="color:#D73A49;--shiki-dark:#F97583"> void</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Main</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="color:#6F42C1;--shiki-dark:#B392F0">args</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    string</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> text</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "tuple for testing tuple"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> stat</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> GetMostFrequentWord</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(text);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    Trace.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">WriteLine</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">$"word: &#123;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">stat</span><span style="color:#032F62;--shiki-dark:#9ECBFF">.</span><span style="color:#24292E;--shiki-dark:#E1E4E8">Item1</span><span style="color:#032F62;--shiki-dark:#9ECBFF">&#125;, count: &#123;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">stat</span><span style="color:#032F62;--shiki-dark:#9ECBFF">.</span><span style="color:#24292E;--shiki-dark:#E1E4E8">Item2</span><span style="color:#032F62;--shiki-dark:#9ECBFF">&#125;"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var l=s(p,4);e(l,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// we added aliases for the output below</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">static</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> word</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> count</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#6F42C1;--shiki-dark:#B392F0">GetMostFrequentWord</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> text</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // same logic</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">static</span><span style="color:#D73A49;--shiki-dark:#F97583"> void</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Main</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="color:#6F42C1;--shiki-dark:#B392F0">args</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    string</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> text</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "tuple for testing tuple"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> stat</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> GetMostFrequentWord</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(text);</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // but now we use aliases for fields</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    Trace.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">WriteLine</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">$"word: &#123;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">stat</span><span style="color:#032F62;--shiki-dark:#9ECBFF">.</span><span style="color:#24292E;--shiki-dark:#E1E4E8">word</span><span style="color:#032F62;--shiki-dark:#9ECBFF">&#125;, count: &#123;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">stat</span><span style="color:#032F62;--shiki-dark:#9ECBFF">.</span><span style="color:#24292E;--shiki-dark:#E1E4E8">count</span><span style="color:#032F62;--shiki-dark:#9ECBFF">&#125;"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var d=s(l,4);e(d,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">static</span><span style="color:#D73A49;--shiki-dark:#F97583"> void</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Main</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="color:#6F42C1;--shiki-dark:#B392F0">args</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    string</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> text</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "tuple for testing tuple"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // no tuple now, just values from its fields</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    (</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> word</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> count</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> GetMostFrequentWord</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(text);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    Trace.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">WriteLine</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">$"word: &#123;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">word</span><span style="color:#032F62;--shiki-dark:#9ECBFF">&#125;, count: &#123;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">count</span><span style="color:#032F62;--shiki-dark:#9ECBFF">&#125;"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var c=s(d,4);e(c,()=>'<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#6F42C1;--shiki-dark:#B392F0">word</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#6F42C1;--shiki-dark:#B392F0">count</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> GetMostFrequentWord</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(text);</span></span></code></pre>');var k=s(c,4);e(k,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">static</span><span style="color:#D73A49;--shiki-dark:#F97583"> void</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Main</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="color:#6F42C1;--shiki-dark:#B392F0">args</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    string</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> text</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "tuple for testing tuple"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    var</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#6F42C1;--shiki-dark:#B392F0">word</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#6F42C1;--shiki-dark:#B392F0">_</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> GetMostFrequentWord</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(text);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    Trace.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">WriteLine</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">$"Most frequent word: &#123;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">word</span><span style="color:#032F62;--shiki-dark:#9ECBFF">&#125;"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var m=s(k,6);e(m,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> struct</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> WordStat</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#D73A49;--shiki-dark:#F97583"> string</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Word</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> &#123; </span><span style="color:#D73A49;--shiki-dark:#F97583">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; </span><span style="color:#D73A49;--shiki-dark:#F97583">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#D73A49;--shiki-dark:#F97583"> int</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Count</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> &#123; </span><span style="color:#D73A49;--shiki-dark:#F97583">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; </span><span style="color:#D73A49;--shiki-dark:#F97583">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> WordStat</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> word</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> count</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        Word </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> word;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        Count </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> count;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">static</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> WordStat</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> GetMostFrequentWordStats</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> text</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> group</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> text.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Split</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">' '</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="color:#6F42C1;--shiki-dark:#B392F0">GroupBy</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">s</span><span style="color:#D73A49;--shiki-dark:#F97583"> =></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> s)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="color:#6F42C1;--shiki-dark:#B392F0">OrderByDescending</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">grouping</span><span style="color:#D73A49;--shiki-dark:#F97583"> =></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> grouping.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Count</span><span style="color:#24292E;--shiki-dark:#E1E4E8">())</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="color:#6F42C1;--shiki-dark:#B392F0">First</span><span style="color:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> WordStat</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(group.Key, group.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Count</span><span style="color:#24292E;--shiki-dark:#E1E4E8">());</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var h=s(m,10);e(h,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> void</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Deconstruct</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">out</span><span style="color:#D73A49;--shiki-dark:#F97583"> string</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> word</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">out</span><span style="color:#D73A49;--shiki-dark:#F97583"> int</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> count</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    word </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Word;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    count </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Count;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var y=s(h,4);e(y,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">static</span><span style="color:#D73A49;--shiki-dark:#F97583"> void</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Main</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="color:#6F42C1;--shiki-dark:#B392F0">args</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    string</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> text</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "tuple for testing tuple"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // visually nothing has changed</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    var</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#6F42C1;--shiki-dark:#B392F0">word</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#6F42C1;--shiki-dark:#B392F0">count</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> GetMostFrequentWordStats</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(text);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    Trace.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">WriteLine</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">$"word: &#123;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">word</span><span style="color:#032F62;--shiki-dark:#9ECBFF">&#125;, count: &#123;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">count</span><span style="color:#032F62;--shiki-dark:#9ECBFF">&#125;"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var E=s(y,6);e(E,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> static</span><span style="color:#D73A49;--shiki-dark:#F97583"> class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Extensions</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#D73A49;--shiki-dark:#F97583"> static</span><span style="color:#D73A49;--shiki-dark:#F97583"> void</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Deconstruct</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">this</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Program</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">WordStat</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> stat</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">out</span><span style="color:#D73A49;--shiki-dark:#F97583"> string</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> word</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">out</span><span style="color:#D73A49;--shiki-dark:#F97583"> int</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> count</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">out</span><span style="color:#D73A49;--shiki-dark:#F97583"> int</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> length</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        word </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> stat.Word;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        count </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> stat.Count;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        length </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> stat.WordLength;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var g=s(E,4);e(g,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">static</span><span style="color:#D73A49;--shiki-dark:#F97583"> void</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Main</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="color:#6F42C1;--shiki-dark:#B392F0">args</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    string</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> text</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "tuple for testing tuple"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    var</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#6F42C1;--shiki-dark:#B392F0">word</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#6F42C1;--shiki-dark:#B392F0">count</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#6F42C1;--shiki-dark:#B392F0">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> GetMostFrequentWordStats</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(text);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    Trace.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">WriteLine</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">$"word: &#123;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">word</span><span style="color:#032F62;--shiki-dark:#9ECBFF">&#125;, count: &#123;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">count</span><span style="color:#032F62;--shiki-dark:#9ECBFF">&#125;, length: &#123;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">length</span><span style="color:#032F62;--shiki-dark:#9ECBFF">&#125;"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var B=s(g,6);e(B,()=>'<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">Task</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#24292E;--shiki-dark:#E1E4E8">> </span><span style="color:#6F42C1;--shiki-dark:#B392F0">Count</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="color:#6F42C1;--shiki-dark:#B392F0">dataSourcesUrls</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span></code></pre>');var F=s(B,6);e(F,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// Our service</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> AggregationService</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Task</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">OperationResult</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#24292E;--shiki-dark:#E1E4E8">>> </span><span style="color:#6F42C1;--shiki-dark:#B392F0">Count</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="color:#6F42C1;--shiki-dark:#B392F0">dataSourcesUrls</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Task.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">FromResult</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            OperationResult&#x3C;</span><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#24292E;--shiki-dark:#E1E4E8">>.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">CreatePartly</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">100</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">                new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Exception</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">$"Data from url '&#123;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">dataSourcesUrls</span><span style="color:#032F62;--shiki-dark:#9ECBFF">[</span><span style="color:#005CC5;--shiki-dark:#79B8FF">0</span><span style="color:#032F62;--shiki-dark:#9ECBFF">]&#125;' was not loaded, but it's OK, go on"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)));</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var _=s(F,2);e(_,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// Complex result</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> OperationResult</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">TResult</span><span style="color:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    private</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> OperationResult</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#D73A49;--shiki-dark:#F97583"> bool</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Success</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> &#123; </span><span style="color:#D73A49;--shiki-dark:#F97583">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; </span><span style="color:#D73A49;--shiki-dark:#F97583">private</span><span style="color:#D73A49;--shiki-dark:#F97583"> set</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; &#125;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> TResult</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Result</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> &#123; </span><span style="color:#D73A49;--shiki-dark:#F97583">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; </span><span style="color:#D73A49;--shiki-dark:#F97583">private</span><span style="color:#D73A49;--shiki-dark:#F97583"> set</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; &#125;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Exception</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Exception</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> &#123; </span><span style="color:#D73A49;--shiki-dark:#F97583">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; </span><span style="color:#D73A49;--shiki-dark:#F97583">private</span><span style="color:#D73A49;--shiki-dark:#F97583"> set</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; &#125;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#D73A49;--shiki-dark:#F97583"> bool</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> IsTotallySuccessful</span><span style="color:#D73A49;--shiki-dark:#F97583"> =></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Success </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x26;&#x26;</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Exception </span><span style="color:#D73A49;--shiki-dark:#F97583">==</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // Factories</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#D73A49;--shiki-dark:#F97583"> static</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> OperationResult</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">TResult</span><span style="color:#24292E;--shiki-dark:#E1E4E8">> </span><span style="color:#6F42C1;--shiki-dark:#B392F0">CreateSuccessful</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">TResult</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> result</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> OperationResult</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">TResult</span><span style="color:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            Success </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            Result </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> result</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#125;;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#D73A49;--shiki-dark:#F97583"> static</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> OperationResult</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">TResult</span><span style="color:#24292E;--shiki-dark:#E1E4E8">> </span><span style="color:#6F42C1;--shiki-dark:#B392F0">CreatePartly</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">TResult</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> result</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#6F42C1;--shiki-dark:#B392F0">Exception</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> e</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> OperationResult</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">TResult</span><span style="color:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            Success </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            Result </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> result,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            Exception </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> e</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#125;;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#D73A49;--shiki-dark:#F97583"> static</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> OperationResult</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">TResult</span><span style="color:#24292E;--shiki-dark:#E1E4E8">> </span><span style="color:#6F42C1;--shiki-dark:#B392F0">CreateFailed</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">TResult</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> result</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#6F42C1;--shiki-dark:#B392F0">Exception</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> e</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> OperationResult</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">TResult</span><span style="color:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            Success </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> false</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            Exception </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> e</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#125;;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var T=s(_,2);e(T,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// Consumer of our service</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Consumer</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Task</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Run</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> urls</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#24292E;--shiki-dark:#E1E4E8">[]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#123;</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF">            "https://www.maltsev.space/sources/1"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF">            "https://www.maltsev.space/sources/2"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF">            "https://www.maltsev.space/sources/3"</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> service</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> AggregationService</span><span style="color:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> countResult</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> service.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Count</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(urls).</span><span style="color:#6F42C1;--shiki-dark:#B392F0">ConfigureAwait</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">false</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(countResult.IsTotallySuccessful)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            Trace.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">WriteLine</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">$"Total count: &#123;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">countResult</span><span style="color:#032F62;--shiki-dark:#9ECBFF">.</span><span style="color:#24292E;--shiki-dark:#E1E4E8">Result</span><span style="color:#032F62;--shiki-dark:#9ECBFF">&#125;"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        else</span><span style="color:#D73A49;--shiki-dark:#F97583"> if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (countResult.Success)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            Trace.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">WriteLine</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">$"Count is around: &#123;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">countResult</span><span style="color:#032F62;--shiki-dark:#9ECBFF">.</span><span style="color:#24292E;--shiki-dark:#E1E4E8">Result</span><span style="color:#032F62;--shiki-dark:#9ECBFF">&#125;</span><span style="color:#005CC5;--shiki-dark:#79B8FF">&#92;n</span><span style="color:#032F62;--shiki-dark:#9ECBFF">Error: &#123;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">countResult</span><span style="color:#032F62;--shiki-dark:#9ECBFF">.</span><span style="color:#24292E;--shiki-dark:#E1E4E8">Exception</span><span style="color:#032F62;--shiki-dark:#9ECBFF">&#125;"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        else</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            Trace.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">WriteLine</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">$"Error: &#123;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">countResult</span><span style="color:#032F62;--shiki-dark:#9ECBFF">.</span><span style="color:#24292E;--shiki-dark:#E1E4E8">Exception</span><span style="color:#032F62;--shiki-dark:#9ECBFF">&#125;"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var x=s(T,10);e(x,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> void</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Deconstruct</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">out</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> TResult</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> result</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">out</span><span style="color:#D73A49;--shiki-dark:#F97583"> bool</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> success</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">out</span><span style="color:#D73A49;--shiki-dark:#F97583"> bool</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> totalSuccess</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">out</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Exception</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> exception</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    result </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Result;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    success </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Success;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    totalSuccess </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> IsTotallySuccessful;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    exception </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Exception;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var w=s(x,4);e(w,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#6F42C1;--shiki-dark:#B392F0">count</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#6F42C1;--shiki-dark:#B392F0">_</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#6F42C1;--shiki-dark:#B392F0">totalSuccess</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#6F42C1;--shiki-dark:#B392F0">_</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> service.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Count</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(urls).</span><span style="color:#6F42C1;--shiki-dark:#B392F0">ConfigureAwait</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">false</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">if</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(totalSuccess)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    Trace.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">WriteLine</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">$"Total count: &#123;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">count</span><span style="color:#032F62;--shiki-dark:#9ECBFF">&#125;"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span></code></pre>`),z(6),f(i,a)}const Ha=Object.freeze(Object.defineProperty({__proto__:null,default:Ma,metadata:ta},Symbol.toStringTag,{value:"Module"})),na={date:"2020-06-22",tags:["C#"],keywords:["C#","generics"],title:"Unlocking the Power of Generics: Simulating Dictionary Behavior in C#",preview:"Do you want to improve performance of caching? Get rid of Dictionary and use just CLR for that!",draft:!1,legacy:!0,hero:"/images/blog/005-dictionary-on-generics/hero.jpg",links:["#implementing-a-generic-based-cached-producer","https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references","https://github.com/AxelUser/examples/tree/master/DotNet/DictionaryOfTypes","https://github.com/RicoSuter/NSwag","https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests","https://refactoring.guru/design-patterns/factory-method","https://blog.ploeh.dk/2010/02/03/ServiceLocatorisanAnti-Pattern/","https://docs.microsoft.com/en-gb/dotnet/api/system.activator.createinstance?view=netcore-3.1#System_Activator_CreateInstance_System_Type_System_Object___","https://benchmarkdotnet.org/","https://adamsitnik.com/the-new-Memory-Diagnoser/","https://benchmarkdotnet.org/articles/features/parameterization.html","https://benchmarkdotnet.org/articles/features/baselines.html","https://github.com/AxelUser/examples/blob/master/DotNet/DictionaryOfTypes/Clients/StubbedClients.cs","https://github.com/AxelUser/examples/blob/master/DotNet/DictionaryOfTypes/Benchmarking/BenchmarkCallsCreator.cs","https://benchmarkdotnet.org/articles/features/setup-and-cleanup.html","https://docs.microsoft.com/en-us/dotnet/api/system.array.empty?view=netcore-3.1","https://github.com/dotnet/runtime/blob/3705185af806e273ccef98e44699400f0416c452/src/libraries/System.Private.CoreLib/src/System/Array.cs#L694-L704","https://csharpindepth.com/articles/singleton","https://codeblog.jonskeet.uk/2017/04/26/surprise-creating-an-instance-of-an-open-generic-type/","https://alexandrnikitin.github.io/blog/dotnet-generics-under-the-hood/","https://benchmarkdotnet.org/"],readingTime:{text:"19 min read",minutes:18.915,time:1134900,words:3783}},{date:It,tags:St,keywords:zt,title:Mt,preview:Ht,draft:Pt,legacy:Lt,hero:Wt,links:Vt,readingTime:jt}=na;var Pa=C('<h2 id="disclaimer"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#disclaimer">#</a>Disclaimer</h2> <ol><li>This article shows how to simulate dictionary behavior with generic static classes. However, <strong>the way to this solution goes through other examples with lots of design details</strong> to make you familiar with the situation. If you’re interested only in “hacking” part, you may go directly to the section <a href="#implementing-a-generic-based-cached-producer">Implementing a generic-based cached producer</a>.</li> <li>In code examples I’ve used <strong>Nullable Reference Types</strong>, which is a new feature from <strong>C# 8</strong>. They don’t affect the performance and definitely not a main point of the article. If you’re curious, check the <a href="https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references" rel="nofollow">documentation</a>.</li> <li>All code is available on <a href="https://github.com/AxelUser/examples/tree/master/DotNet/DictionaryOfTypes" rel="nofollow">GitHub</a>.</li></ol> <h2 id="task-create-a-factory-for-rest-clients"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#task-create-a-factory-for-rest-clients">#</a>Task: Create a Factory for REST Clients</h2> <p>When you are integrating different services into each other, it’s always a very time-consuming process to write clients for all of them. Luckily, if those RESTful services provide their API schema in <strong>OpenAPI</strong> (or previously named <strong>Swagger</strong>) format, chances are great that there’s a generator of clients for this common type of schema format.</p> <p>.Net has several packages for client generation, for example <a href="https://github.com/RicoSuter/NSwag" rel="nofollow">NSwag</a>. There are different opinions on how generated clients should be look like, but let’s consider that their constructors receive <em>HttpClient</em> instance for sending requests and classes themselves are derived from generated interfaces, containing all public methods for the API.</p> <p>The first requirement helps to manipulate <em>HttpClient</em> creation and lifetime, which means that we can even reuse one from the pool. The second requirement will be handy, when it’s needed to write unit-tests for code, that uses service’s clients - in that case they must be mocked and mocking in .Net’s frameworks “mostly” requires passing an interface.</p> <p>To sum everything up, the generated code will follow the similar pattern:</p> <!> <h2 id="automating-client-creation"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#automating-client-creation">#</a>Automating Client Creation</h2> <p>Although clients are implementing their own interfaces, it’s still hard to test code, that creates clients via constructors. For a testable code it’s required to have all those clients as dependencies or delegate their creation into a new dependency. It’s possible to resolve clients via <strong>Dependency Injection</strong>, because <em>HttpClient</em> can be effectively taken from reusable pool via <a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests" rel="nofollow">IHttpClientFactory</a>, and most of the DI frameworks offer you a zero configuration for that feature.</p> <p>However sometimes it’s necessary to control base url to your service or to dynamically pass some values into request’s headers, like authorization tokens or distributed tracing ids. So it may be preferred to pass a valid <em>HttpClient</em> manually and that’s why for the sake of the article let’s stick to this format.</p> <p>The most appropriate way of extracting object construction into dedicated dependency is implementing a <a href="https://refactoring.guru/design-patterns/factory-method" rel="nofollow">Factory</a> for clients. Unfortunately, all clients implement different interfaces and it isn’t possible to write base interface as returned value for the factory method. However it’s still possible to invoke the creation of specific client by redesigning the factory into generic class.</p> <p>Let’s discuss possible interface:</p> <!> <p>Why it’s preferred to make whole class as generic and not just the method <code>Create</code>? If it will be only a generic method, the factory will be similar to the <a href="https://blog.ploeh.dk/2010/02/03/ServiceLocatorisanAnti-Pattern/" rel="nofollow">Service Locator</a>, which has some maintainability issues and hides the information which clients the outer code depends on.</p> <p>Here is an example:</p> <!> <p>The first variant of <code>concreteClientFactory</code> is much more transparent than <code>commonClientFactory</code>. <strong>That’s why this design will be applied to all further solutions it the article.</strong></p> <p>As factory should create clients of specific types, there are some more questions to discuss:</p> <ol><li>How factory should invoke a constructor of the concrete client?</li> <li>How factory should effectively guess object of which class should be created, if only interface is passed to the generic type parameter?</li></ol> <p>Solution for the first question is quite trivial - invoking constructor via handy static helper <a href="https://docs.microsoft.com/en-gb/dotnet/api/system.activator.createinstance?view=netcore-3.1#System_Activator_CreateInstance_System_Type_System_Object___" rel="nofollow">Activator.CreateInstance</a>. Internally it’s an old friend reflection does all the job, but activator provides a simpler API.</p> <p>For the second problem another reflection-based mechanism should be involved. As I mentioned above, mocking frameworks for .Net work better, if they create mocks that implement base interfaces. Thus the factory method should expose client’s interface in returned value. It can be easily achieved with the help of generic type parameter, but nevertheless factory method should create an object of the concrete class.</p> <p>So, factory should perform mapping between the interface and the implementation. Fortunately, all generated classes and interfaces are stored under dedicated namespace and are available during the start of an application. That’s right - <strong>mapping can be created by traversing though all classes in that namespace</strong>.</p> <p>To execute search only once, it’s better to put mapping code into a <strong>static constructor</strong>. Reflection will traverse through the whole assembly, find all client’s interfaces with their implementations and save that relationships into a simple dictionary. Also it’a a good idea to <strong>encapsulate mapping into another dependency</strong>, which has private static field with that dictionary and produces the factory for required clients. Encapsulation will protect internal mapping from unexpected mutations and make namespace cleaner.</p> <p>The new dependency can be implemented as a factory provider, or in other words factory of factories. The interface is trivial:</p> <!> <p>Type of the client’s implementation can be passed into client factory constructor by factory provider. Thus, after factory provider is invoked, it finds relevant class for an interface passed as generic type argument and creates the valid client factory. Below is the implementation of the provider:</p> <!> <p>Everything is done so far. All mapping is extracted into provider, which had permitted the easier implementation of the actual client factory:</p> <!> <p>Now it’s time to ask, <strong>what can be done to produce factories more efficiently</strong>. If factory creation will be done very often, it’s better to make some kind of caching for it, because it doesn’t depend on a context of invocation.</p> <p>I want to mention, that all modern DI frameworks has an ability to mark those client factories as singletons at configuration and that’s OK to use it when you can.</p> <p>Even so, what about making this mechanism by ourselves? If you’re interested, I’ll welcome you to read the article further.</p> <h2 id="benchmarking"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#benchmarking">#</a>Benchmarking</h2> <p>Before we dig into optimizations, <strong>it’s HIGHLY recommended to track the performance of made solutions</strong>. As we are dealing with isolated modules, micro-benchmarking will suit our needs.</p> <p>The easiest way to create benchmarks of that kind is using a popular nuget package <a href="https://benchmarkdotnet.org/" rel="nofollow">BenchmarkDotNet</a>. I won’t include in the article how to write good benchmarks for every situation, because this theme is quite vast. However, if you’re not familiar with benchmarking or BenchmarkDotNet, you may follow the links to BenchmarkDotNet documentation at the section <strong>References</strong>.</p> <p>Frankly speaking, I shall mention that maintainers of the BenchmarkDotNet did a great job in providing an easy API for creating benchmarks, which gives ability to include lots of useful indicators and will be clear to the most of .Net developers.</p> <p>Firstly we need to know how solutions are fast and how much memory they consume. In BenchmarkDotNet speed indicator come out of the box, and memory consumption can be tracked via <a href="https://adamsitnik.com/the-new-Memory-Diagnoser/" rel="nofollow"><code>MemoryDiagnoser</code></a> attribute for the benchmark class. Here is a code snippet of configuration:</p> <!> <p>Now it’s time for benchmarks themselves. <strong>Caching improves peeking of some value many times</strong>, that’s why benchmark should also perform several attempts of getting factories for each client.</p> <p>To show how many attempts were performed, BenchmarkDotNet has an ability to use custom benchmark parameters via another attribute <a href="https://benchmarkdotnet.org/articles/features/parameterization.html" rel="nofollow"><code>Params</code></a>. It receives values of that parameter for each benchmark run and displays that value at its own column in report. For this benchmark let’s choose numbers <em>100</em>, <em>1000</em> and <em>10000000</em>:</p> <!> <p>Another useful feature is making benchmark for original solution as <a href="https://benchmarkdotnet.org/articles/features/baselines.html" rel="nofollow">baseline</a>. It is used to display the ratio of how speed of other benchmarks differs from the baseline.</p> <p>Alright, now everything is ready to write the code of the first benchmark:</p> <!> <p>Well, that code is strange. It’s because I’ve generated all actual invocations of factory provider using <strong>T4</strong> template file. Obviously that isn’t necessary, but as soon as I generated all code for clients using the same T4 templates, I thought that it is more maintainable to generate invocations as well. I mentioned it before, but all code is available on GitHub, so you may have a look at <a href="https://github.com/AxelUser/examples/blob/master/DotNet/DictionaryOfTypes/Clients/StubbedClients.cs" rel="nofollow">generated clients</a> and generated <a href="https://github.com/AxelUser/examples/blob/master/DotNet/DictionaryOfTypes/Benchmarking/BenchmarkCallsCreator.cs" rel="nofollow">provider invocations</a>.</p> <p>One more thing to know - because I don’t want to include the creation of delegates with provider invocations, it’s vital to move it into set-up, similar to the one that testing frameworks offer. BenchmarkDotNet has the same API for it, which means making set-up method and marking it with <a href="https://benchmarkdotnet.org/articles/features/setup-and-cleanup.html" rel="nofollow"><code>GlobalSetup</code></a> attribute:</p> <!> <p>Now all deletes are accessible from private field and its initialization won’t affect the results.</p> <p>Anyway, let’s run our benchmark and see how things are doing:</p> <!> <p>We may see, that the provider performed quite fast (for now), but had allocated factory objects for each invocation of the factory provider. As I’ve said, for this issue there’s a solution - <strong>caching factories</strong>.</p> <h2 id="store-factories-into-dictionary"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#store-factories-into-dictionary">#</a>Store Factories into Dictionary</h2> <p>The most obvious way to cache concrete factories is to store mapping from interface to factory, not just the mapping between interfaces and their implementation.</p> <p>Seems legit! So let’s rewrite our initial factory method into one, which returns concrete client’s factories for interfaces.</p> <p>Mapping reflection-based mechanism also should be rewritten to store concrete client factories for each interface into static dictionary object. As mentioned above, this mapping can performed once at application start-up, because factories are quite stateless by themselves.</p> <p>Unfortunately, we can’t provide open generic type as the type for a value of our dictionary, but because all these factories are reference types, we can cast them to objects, put these values into the dictionary and when requested, receive from the dictionary and cast to a requested generic type. To make further examples simpler, I’ve extracted mapping construction into static helper <code>ClientTypesProvider.GetAllTypes(Assembly)</code>, because it won’t be changed further in the article.</p> <!> <p>Well, this solution isn’t so elegant, but <strong>casting is mostly used to overcome the type system’s limitation</strong>.</p> <p>Now it’s obvious that we’ve reduced memory consumption using pre-allocated factories, but what about speed?</p> <p>Let’s check the performance of this caching mechanism by writing a benchmark and compare results with the baseline:</p> <!> <p>Hm, seems like it’s <strong>became SLOWER, than the original simple solution</strong>, but we may guess what operation caused such performance penalty. <em>Did we write something wrong or inefficient?</em></p> <p>Earlier I’ve mentioned that “dumb” casting from object to generic factory type. <strong>This simple cast is overkill for current situation</strong> - it involves type checking, but we know exactly what generic type stored under each key in dictionary.</p> <!> <p>Once again check the benchmark results:</p> <!> <p>Much better - the speed of invocation is a little bit less than the baseline and the memory consumption is minimal.</p> <p>We may stay with this implementation, but if that was an option, I’ve never wrote such an obvious post 😅.</p> <p>So, is there a way to improve speed even more? Well, <strong>that’s when generics steal the show!</strong></p> <h2 id="delegate-caching-to-jit"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#delegate-caching-to-jit">#</a>Delegate Caching to JIT</h2> <p>This trick is mostly inspired by the way how <a href="https://docs.microsoft.com/en-us/dotnet/api/system.array.empty?view=netcore-3.1" rel="nofollow">Array.Empty</a> works.</p> <p>Empty arrays are best candidates for caching, because their construction doesn’t require any parameters, but only a generic type parameter.</p> <p>When you invoke <code>Array.Empty&lt;MyClass&gt;</code>, it internally invokes a static read-only field <code>Empty</code> of static generic class <code>EmptyArray&lt;MyClass&gt;</code>, which initializes and returns an empty array of type <code>MyClass</code> (have a look at <a href="https://github.com/dotnet/runtime/blob/3705185af806e273ccef98e44699400f0416c452/src/libraries/System.Private.CoreLib/src/System/Array.cs#L694-L704" rel="nofollow">sources</a>). Static field is initialized during the time of a first access to the field of the class <em>EmptyArray</em>. This is guaranteed from the fact how generics and static classes work in <strong>CLR</strong> (Common Language Runtime). For your information, that’s how you can implement a <a href="https://csharpindepth.com/articles/singleton" rel="nofollow">simple thread-safe singleton</a> in .Net.</p> <h2 id="how-clr-compiles-generic-classes"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#how-clr-compiles-generic-classes">#</a>How CLR Compiles Generic Classes</h2> <p>Generics are types, that contain a type parameter, which isn’t known at compile time (e.g. <code>List&lt;T&gt;</code>). When dotnet compiler sees open generic type, it compiles it into IL with the same generic type parameter.</p> <p>After the type argument is passed into generic constructor (e.g. <code>List&lt;MyClass&gt;</code>), CLR will do the following:</p> <ol><li>Lookup if the closed generic (with concrete generic type argument) was requested before.</li> <li>If not - it will be compiled at run time.</li></ol> <p>Nice point is that JIT compiler will share all code for specific generics, which have only reference types as their type parameters. This optimization makes sense, because objects of reference types are passed into methods by fixed-sized reference to their content in the managed heap. All references to objects have common size, which equals to the machine word: 32 or 64 bits, depending on the architecture of an operating system and processor.</p> <p>It doesn’t mean, that compiler vanishes all information about different closed generics, but instead of compiling the whole code for the class, it will save the information about concrete closed generic into <strong>Method Table</strong>.</p> <p>It worth mentioning, that for value types, like structs and primitives, JIT will compile specialized code to handle each type parameters combination, which were passed during the construction of a closed generic.</p> <p>Using the knowledge about how generics are compiled and how static fields are initialized, we can implement a cache for factory producer.</p> <h2 id="implementing-a-generic-based-cached-producer"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#implementing-a-generic-based-cached-producer">#</a>Implementing a Generic-Based Cached Producer</h2> <p>Let’s create a new static class <code>CachedFactory&lt;T&gt;</code> with static field <code>Instance</code>, which is initialized with a factory for the concrete client implementing interface <em>T</em>. The factory creation is extracted into the method, that gets implementation type from static dictionary and creates a factory.</p> <p>How new static factories can access the mapping information? One way is to make that dictionary public, as well as making this new class as public. However, as I mentioned before in the case of dictionary-based caching solution, that will pollute a namespace with things you should never access manually.</p> <p>Encapsulation of the caching mechanism can be achieved by making the class <code>CachedFactory&lt;T&gt;</code> private and nesting it inside the actual provider class. In that case the public factory provider will have full access the public field of <code>CachedFactory&lt;T&gt;</code>, without opening its API to the outer code</p> <!> <p>However, there is also a caveat - <strong>when a type <em>T</em> isn’t stored in dictionary, the generic nevertheless will be compiled and stored at Method Table until the end of execution</strong>. That’s why the whole generics trick may be a bad idea, if the client interface is passed from user input.</p> <p>To make things a little bit fancier, <strong>code with nested class may be extracted into own file</strong>, if the factory provider will be marked as partial. It’s up to you how to name that file, but I recommend you to write the name of the provider plus the name of cached factory, separated by the dot, like <em>GenericClientFactoryProvider.CachedFactory.cs</em>.</p> <p>Provider will trigger client creation when accessing the field <code>Instance</code> of a closed generic <code>CachedFactory&lt;T&gt;</code> class for the first time:</p> <!> <p>If client creation shouldn’t be lazy, fields for all closed generic classes can be accessed at the same time, when mapping is created.</p> <!> <p>Now let’s add a new benchmark and check the performance:</p> <!> <p>Speed of invocation has been dramatically increased, compared to the previous dictionary-based solution. Now we may use this solution with interface defined earlier, gaining all benefits of generic type lookup, which give us the runtime itself.</p> <h2 id="conclusion"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#conclusion">#</a>Conclusion</h2> <p>All these solutions are powered by the knowledge of runtime internals, which may increase the difficulty of understanding how much benefits we receive. <strong>When messing with such hacks don’t hesitate to check the performance incrementally via benchmarking</strong>. I hope that my examples proves you, that this process isn’t much harder than writing a unit-tests, thanks to BenchmarkDotNet!</p> <p>All provided solutions are quite specialized for the task of caching values, which don’t depend on dynamic parameters. In other words all values can be initialized during the application start-up. If that is your case, you may use provided solutions and I hope you will improve the overall performance of your program.</p> <h2 id="references"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#references">#</a>References</h2> <ol><li><a href="https://codeblog.jonskeet.uk/2017/04/26/surprise-creating-an-instance-of-an-open-generic-type/" rel="nofollow">How to create open generic type at runtime</a></li> <li><a href="https://alexandrnikitin.github.io/blog/dotnet-generics-under-the-hood/" rel="nofollow">Generic types under the hood</a></li> <li><a href="https://benchmarkdotnet.org/" rel="nofollow">BenchmarkDotNet website</a></li></ol>',1);function La(i){var a=Pa(),n=s(ss(a),14);e(n,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> partial</span><span style="color:#D73A49;--shiki-dark:#F97583"> interface</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ISomeResourceClient</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">	Task</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">SwaggerResponse</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">>> </span><span style="color:#6F42C1;--shiki-dark:#B392F0">GetSomeResourceAsync</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">CancellationToken</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> cancellationToken</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> partial</span><span style="color:#D73A49;--shiki-dark:#F97583"> class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> SomeResourceClient</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#6F42C1;--shiki-dark:#B392F0">ISomeResourceClient</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">	private</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> HttpClient</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> _httpClient</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">	public</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> SystemClient</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">HttpClient</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> httpClient</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">	&#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">		_httpClient </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> httpClient;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">	&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">	public</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Task</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">SwaggerResponse</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">>> </span><span style="color:#6F42C1;--shiki-dark:#B392F0">GetUpdaterLinkAsync</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">CancellationToken</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> cancellationToken</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">	&#123;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">		// Generated code for sending request.</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">	&#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var p=s(n,12);e(p,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> interface</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> IClientFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#D73A49;--shiki-dark:#F97583">out</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">> </span><span style="color:#D73A49;--shiki-dark:#F97583">where</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#D73A49;--shiki-dark:#F97583">class</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    T</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Create</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">HttpClient</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> client</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var l=s(p,6);e(l,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Wrapper</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    IClientFactory</span><span style="color:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">ISomeResourceClient</span><span style="color:#D73A49;--shiki-dark:#F97583">></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> concreteClientFactory, </span><span style="color:#6A737D;--shiki-dark:#6A737D">// doesn't hide details</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    IClientFactory commonClientFactory)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // some ctor details</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var d=s(l,18);e(d,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> interface</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> IClientsFactoryProvider</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    IClientFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">> </span><span style="color:#6F42C1;--shiki-dark:#B392F0">GetClientFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">>() </span><span style="color:#D73A49;--shiki-dark:#F97583">where</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#D73A49;--shiki-dark:#F97583">class</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var c=s(d,4);e(c,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> SimpleClientFactoryProvider</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#6F42C1;--shiki-dark:#B392F0">IClientsFactoryProvider</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    private</span><span style="color:#D73A49;--shiki-dark:#F97583"> static</span><span style="color:#D73A49;--shiki-dark:#F97583"> readonly</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Dictionary</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Type</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#6F42C1;--shiki-dark:#B392F0">Type</span><span style="color:#24292E;--shiki-dark:#E1E4E8">> </span><span style="color:#6F42C1;--shiki-dark:#B392F0">DiscoveredAllowedClientTypes</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    static</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> SimpleClientFactoryProvider</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        DiscoveredAllowedClientTypes </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> GetAllTypes</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(Assembly.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">GetExecutingAssembly</span><span style="color:#24292E;--shiki-dark:#E1E4E8">())</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            .</span><span style="color:#6F42C1;--shiki-dark:#B392F0">ToDictionary</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">tuple</span><span style="color:#D73A49;--shiki-dark:#F97583"> =></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> tuple.@interface, </span><span style="color:#6F42C1;--shiki-dark:#B392F0">tuple</span><span style="color:#D73A49;--shiki-dark:#F97583"> =></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> tuple.implementation);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> IClientFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">> </span><span style="color:#6F42C1;--shiki-dark:#B392F0">GetClientFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">>() </span><span style="color:#D73A49;--shiki-dark:#F97583">where</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#D73A49;--shiki-dark:#F97583">class</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8">DiscoveredAllowedClientTypes.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">TryGetValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">typeof</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">), </span><span style="color:#D73A49;--shiki-dark:#F97583">out</span><span style="color:#D73A49;--shiki-dark:#F97583"> var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> implType</span><span style="color:#24292E;--shiki-dark:#E1E4E8">))</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">            throw</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Exception</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">$"Client type '&#123;</span><span style="color:#D73A49;--shiki-dark:#F97583">typeof</span><span style="color:#032F62;--shiki-dark:#9ECBFF">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#032F62;--shiki-dark:#9ECBFF">)&#125;' isn't supported"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ClientFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">>(implType);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    private</span><span style="color:#D73A49;--shiki-dark:#F97583"> static</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> IEnumerable</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Type</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> @interface</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#6F42C1;--shiki-dark:#B392F0">Type</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> implementation</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)> </span><span style="color:#6F42C1;--shiki-dark:#B392F0">GetAllTypes</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Assembly</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> assembly</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> clientsTypes</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> assembly.DefinedTypes</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            .</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Where</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">type</span><span style="color:#D73A49;--shiki-dark:#F97583"> =></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> type.CustomAttributes</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">                .</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Any</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">attr</span><span style="color:#D73A49;--shiki-dark:#F97583"> =></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> attr.AttributeType </span><span style="color:#D73A49;--shiki-dark:#F97583">==</span><span style="color:#D73A49;--shiki-dark:#F97583"> typeof</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">RestClientAttribute</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        foreach</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> clientType</span><span style="color:#D73A49;--shiki-dark:#F97583"> in</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> clientsTypes)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">            var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> @interface</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> clientType.ImplementedInterfaces.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">First</span><span style="color:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">            yield</span><span style="color:#D73A49;--shiki-dark:#F97583"> return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (@interface, clientType);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var k=s(c,4);e(k,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ClientFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">>: </span><span style="color:#6F42C1;--shiki-dark:#B392F0">IClientFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">> </span><span style="color:#D73A49;--shiki-dark:#F97583">where</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#D73A49;--shiki-dark:#F97583">class</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    private</span><span style="color:#D73A49;--shiki-dark:#F97583"> readonly</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Type</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> _clientImplType</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ClientFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Type</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> clientImplType</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        _clientImplType </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> clientImplType;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Create</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">HttpClient</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> client</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) Activator.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">CreateInstance</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(_clientImplType, client)</span><span style="color:#D73A49;--shiki-dark:#F97583">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var m=s(k,18);e(m,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">[</span><span style="color:#6F42C1;--shiki-dark:#B392F0">MemoryDiagnoser</span><span style="color:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ClientFactoryProvidersBenchmark</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">	// Benchmarks</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var h=s(m,6);e(h,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">[</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Params</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">100</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF">1000</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF">10000000</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> int</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Accesses &#123; get; set; &#125;</span></span></code></pre>`);var y=s(h,6);e(y,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">[</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Benchmark</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Baseline</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> void</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> SimpleFactory_SequentialAccess</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    Execute</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(_simpleFactoryRunActions);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">[</span><span style="color:#6F42C1;--shiki-dark:#B392F0">MethodImpl</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(MethodImplOptions.AggressiveInlining)]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">private</span><span style="color:#D73A49;--shiki-dark:#F97583"> void</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Execute</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">IReadOnlyList</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Action</span><span style="color:#24292E;--shiki-dark:#E1E4E8">> </span><span style="color:#6F42C1;--shiki-dark:#B392F0">actions</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> length</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> actions.Count;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> i</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; i </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Accesses; i</span><span style="color:#D73A49;--shiki-dark:#F97583">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        actions[i </span><span style="color:#D73A49;--shiki-dark:#F97583">%</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> length]();</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var E=s(y,6);e(E,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">[</span><span style="color:#6F42C1;--shiki-dark:#B392F0">GlobalSetup</span><span style="color:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> void</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> SetUp</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    _simpleFactoryRunActions </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> BenchmarkCallsCreator.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">CreateInvocations</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> SimpleClientFactoryProvider</span><span style="color:#24292E;--shiki-dark:#E1E4E8">());</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var g=s(E,6);e(g,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span>|                         Method | Accesses |           Mean |         Error |        StdDev | Ratio |      Gen 0 | Gen 1 | Gen 2 | Allocated |</span></span>
<span class="line"><span>|------------------------------- |--------- |---------------:|--------------:|--------------:|------:|-----------:|------:|------:|----------:|</span></span>
<span class="line"><span>| SimpleFactory_SequentialAccess |      100 |       3.636 us |     0.0297 us |     0.0278 us |  1.00 |     0.3815 |     - |     - |   2.34 KB |</span></span>
<span class="line"><span>|                                |          |                |               |               |       |            |       |       |           |</span></span>
<span class="line"><span>| SimpleFactory_SequentialAccess |     1000 |      38.098 us |     0.2838 us |     0.2654 us |  1.00 |     3.7842 |     - |     - |  23.44 KB |</span></span>
<span class="line"><span>|                                |          |                |               |               |       |            |       |       |           |</span></span>
<span class="line"><span>| SimpleFactory_SequentialAccess | 10000000 | 383,617.687 us | 3,106.0346 us | 2,905.3867 us |  1.00 | 38000.0000 |     - |     - | 234375 KB |</span></span></code></pre>`);var B=s(g,14);e(B,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> CachedSimpleFactoryProvider</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#6F42C1;--shiki-dark:#B392F0">IClientsFactoryProvider</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    private</span><span style="color:#D73A49;--shiki-dark:#F97583"> static</span><span style="color:#D73A49;--shiki-dark:#F97583"> readonly</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Type</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> FactoryType</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> typeof</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">ClientFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;>);</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    private</span><span style="color:#D73A49;--shiki-dark:#F97583"> static</span><span style="color:#D73A49;--shiki-dark:#F97583"> readonly</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Dictionary</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Type</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">object</span><span style="color:#24292E;--shiki-dark:#E1E4E8">> </span><span style="color:#6F42C1;--shiki-dark:#B392F0">CachedClientFactories</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    static</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> CachedSimpleFactoryProvider</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        CachedClientFactories </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ClientTypesProvider.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">GetAllTypes</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(Assembly.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">GetExecutingAssembly</span><span style="color:#24292E;--shiki-dark:#E1E4E8">())</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            .</span><span style="color:#6F42C1;--shiki-dark:#B392F0">ToDictionary</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">tuple</span><span style="color:#D73A49;--shiki-dark:#F97583"> =></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> tuple.@interface, </span><span style="color:#6F42C1;--shiki-dark:#B392F0">tuple</span><span style="color:#D73A49;--shiki-dark:#F97583"> =></span><span style="color:#6F42C1;--shiki-dark:#B392F0"> CreateFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(tuple.implementation));</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> IClientFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">> </span><span style="color:#6F42C1;--shiki-dark:#B392F0">GetClientFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">>() </span><span style="color:#D73A49;--shiki-dark:#F97583">where</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#D73A49;--shiki-dark:#F97583">class</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8">CachedClientFactories.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">TryGetValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">typeof</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">), </span><span style="color:#D73A49;--shiki-dark:#F97583">out</span><span style="color:#D73A49;--shiki-dark:#F97583"> var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> factory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">))</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">            throw</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Exception</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">$"Client type '&#123;</span><span style="color:#D73A49;--shiki-dark:#F97583">typeof</span><span style="color:#032F62;--shiki-dark:#9ECBFF">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#032F62;--shiki-dark:#9ECBFF">)&#125;' isn't supported"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#6F42C1;--shiki-dark:#B392F0">IClientFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">>) factory;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    private</span><span style="color:#D73A49;--shiki-dark:#F97583"> static</span><span style="color:#D73A49;--shiki-dark:#F97583"> object</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> CreateFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Type</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> clientType</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> factory</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> FactoryType.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">MakeGenericType</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(clientType);</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Activator.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">CreateInstance</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(factory, clientType)</span><span style="color:#D73A49;--shiki-dark:#F97583">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var F=s(B,8);e(F,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span>|                         Method | Accesses |           Mean |         Error |        StdDev | Ratio | RatioSD |      Gen 0 | Gen 1 | Gen 2 |   Allocated |</span></span>
<span class="line"><span>|------------------------------- |--------- |---------------:|--------------:|--------------:|------:|--------:|-----------:|------:|------:|------------:|</span></span>
<span class="line"><span>| SimpleFactory_SequentialAccess |      100 |       3.636 us |     0.0152 us |     0.0142 us |  1.00 |    0.00 |     0.3815 |     - |     - |      2400 B |</span></span>
<span class="line"><span>| CachedFactory_SequentialAccess |      100 |       7.692 us |     0.0543 us |     0.0481 us |  2.12 |    0.01 |          - |     - |     - |           - |</span></span>
<span class="line"><span>|                                |          |                |               |               |       |         |            |       |       |             |</span></span>
<span class="line"><span>| SimpleFactory_SequentialAccess |     1000 |      35.619 us |     0.0787 us |     0.0697 us |  1.00 |    0.00 |     3.7842 |     - |     - |     24001 B |</span></span>
<span class="line"><span>| CachedFactory_SequentialAccess |     1000 |      74.106 us |     0.9672 us |     0.9047 us |  2.08 |    0.03 |          - |     - |     - |         1 B |</span></span>
<span class="line"><span>|                                |          |                |               |               |       |         |            |       |       |             |</span></span>
<span class="line"><span>| SimpleFactory_SequentialAccess | 10000000 | 365,822.213 us | 2,226.8696 us | 2,083.0152 us |  1.00 |    0.00 | 38000.0000 |     - |     - | 240000000 B |</span></span>
<span class="line"><span>| CachedFactory_SequentialAccess | 10000000 | 746,398.580 us | 3,361.2568 us | 3,144.1217 us |  2.04 |    0.02 |          - |     - |     - |           - |</span></span></code></pre>`);var _=s(F,6);e(_,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> IClientFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">> </span><span style="color:#6F42C1;--shiki-dark:#B392F0">GetClientFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">>() </span><span style="color:#D73A49;--shiki-dark:#F97583">where</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#D73A49;--shiki-dark:#F97583">class</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8">CachedClientFactories.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">TryGetValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">typeof</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">), </span><span style="color:#D73A49;--shiki-dark:#F97583">out</span><span style="color:#D73A49;--shiki-dark:#F97583"> var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> factory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">))</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        throw</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Exception</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">$"Client type '&#123;</span><span style="color:#D73A49;--shiki-dark:#F97583">typeof</span><span style="color:#032F62;--shiki-dark:#9ECBFF">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#032F62;--shiki-dark:#9ECBFF">)&#125;' isn't supported"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Unsafe.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">As</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">IClientFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">>>(factory);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var T=s(_,4);e(T,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span>|                         Method | Accesses |           Mean |         Error |        StdDev | Ratio |      Gen 0 | Gen 1 | Gen 2 |   Allocated |</span></span>
<span class="line"><span>|------------------------------- |--------- |---------------:|--------------:|--------------:|------:|-----------:|------:|------:|------------:|</span></span>
<span class="line"><span>| SimpleFactory_SequentialAccess |      100 |       3.492 us |     0.0143 us |     0.0134 us |  1.00 |     0.3815 |     - |     - |      2400 B |</span></span>
<span class="line"><span>| CachedFactory_SequentialAccess |      100 |       3.138 us |     0.0022 us |     0.0020 us |  0.90 |          - |     - |     - |           - |</span></span>
<span class="line"><span>|                                |          |                |               |               |       |            |       |       |             |</span></span>
<span class="line"><span>| SimpleFactory_SequentialAccess |     1000 |      34.968 us |     0.3702 us |     0.3462 us |  1.00 |     3.7842 |     - |     - |     24000 B |</span></span>
<span class="line"><span>| CachedFactory_SequentialAccess |     1000 |      31.494 us |     0.0589 us |     0.0522 us |  0.90 |          - |     - |     - |           - |</span></span>
<span class="line"><span>|                                |          |                |               |               |       |            |       |       |             |</span></span>
<span class="line"><span>| SimpleFactory_SequentialAccess | 10000000 | 369,860.373 us | 2,062.8473 us | 1,929.5887 us |  1.00 | 38000.0000 |     - |     - | 240000000 B |</span></span>
<span class="line"><span>| CachedFactory_SequentialAccess | 10000000 | 306,086.300 us | 2,633.7588 us | 2,463.6196 us |  0.83 |          - |     - |     - |           - |</span></span></code></pre>`);var x=s(T,40);e(x,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> partial</span><span style="color:#D73A49;--shiki-dark:#F97583"> class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> GenericClientFactoryProvider</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    private</span><span style="color:#D73A49;--shiki-dark:#F97583"> class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> CachedFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">> </span><span style="color:#D73A49;--shiki-dark:#F97583">where</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#D73A49;--shiki-dark:#F97583">class</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        public</span><span style="color:#D73A49;--shiki-dark:#F97583"> static</span><span style="color:#D73A49;--shiki-dark:#F97583"> readonly</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> IClientFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">>? </span><span style="color:#6F42C1;--shiki-dark:#B392F0">Instance</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        static</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> CachedFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            Instance </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> CreateFactoryIfAllowed</span><span style="color:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        private</span><span style="color:#D73A49;--shiki-dark:#F97583"> static</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> IClientFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">>? </span><span style="color:#6F42C1;--shiki-dark:#B392F0">CreateFactoryIfAllowed</span><span style="color:#24292E;--shiki-dark:#E1E4E8">() </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            DiscoveredAllowedClientTypes.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">TryGetValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">typeof</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">), </span><span style="color:#D73A49;--shiki-dark:#F97583">out</span><span style="color:#D73A49;--shiki-dark:#F97583"> var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> implType</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">                ?</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ClientFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">>(implType)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">                :</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var w=s(x,8);e(w,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> partial</span><span style="color:#D73A49;--shiki-dark:#F97583"> class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> GenericClientFactoryProvider</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#6F42C1;--shiki-dark:#B392F0">IClientsFactoryProvider</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    private</span><span style="color:#D73A49;--shiki-dark:#F97583"> static</span><span style="color:#D73A49;--shiki-dark:#F97583"> readonly</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Dictionary</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Type</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#6F42C1;--shiki-dark:#B392F0">Type</span><span style="color:#24292E;--shiki-dark:#E1E4E8">> </span><span style="color:#6F42C1;--shiki-dark:#B392F0">DiscoveredAllowedClientTypes</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> IClientFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">> </span><span style="color:#6F42C1;--shiki-dark:#B392F0">GetClientFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">>() </span><span style="color:#D73A49;--shiki-dark:#F97583">where</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#D73A49;--shiki-dark:#F97583">class</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> CachedFactory&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">>.Instance </span><span style="color:#D73A49;--shiki-dark:#F97583">??</span><span style="color:#D73A49;--shiki-dark:#F97583"> throw</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Exception</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">$"Client type '&#123;</span><span style="color:#D73A49;--shiki-dark:#F97583">typeof</span><span style="color:#032F62;--shiki-dark:#9ECBFF">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#032F62;--shiki-dark:#9ECBFF">)&#125;' isn't supported"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    static</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> GenericClientFactoryProvider</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        DiscoveredAllowedClientTypes </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ClientTypesProvider.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">GetAllTypes</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(Assembly.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">GetExecutingAssembly</span><span style="color:#24292E;--shiki-dark:#E1E4E8">())</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            .</span><span style="color:#6F42C1;--shiki-dark:#B392F0">ToDictionary</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">tuple</span><span style="color:#D73A49;--shiki-dark:#F97583"> =></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> tuple.@interface, </span><span style="color:#6F42C1;--shiki-dark:#B392F0">tuple</span><span style="color:#D73A49;--shiki-dark:#F97583"> =></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> tuple.implementation);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var H=s(w,4);e(H,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">static</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> GenericClientFactoryProvider</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    DiscoveredAllowedClientTypes </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ClientTypesProvider.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">GetAllTypes</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(Assembly.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">GetExecutingAssembly</span><span style="color:#24292E;--shiki-dark:#E1E4E8">())</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        .</span><span style="color:#6F42C1;--shiki-dark:#B392F0">ToDictionary</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">tuple</span><span style="color:#D73A49;--shiki-dark:#F97583"> =></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> tuple.@interface, </span><span style="color:#6F42C1;--shiki-dark:#B392F0">tuple</span><span style="color:#D73A49;--shiki-dark:#F97583"> =></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> tuple.implementation);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    InitializeFactories</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(); </span><span style="color:#6A737D;--shiki-dark:#6A737D">// Eager initialization</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">private</span><span style="color:#D73A49;--shiki-dark:#F97583"> static</span><span style="color:#D73A49;--shiki-dark:#F97583"> void</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> InitializeFactories</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> factory</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> typeof</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">CachedFactory</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;>);</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    foreach</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> @interface</span><span style="color:#D73A49;--shiki-dark:#F97583"> in</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> DiscoveredAllowedClientTypes.Keys)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> genericFactory</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> factory.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">MakeGenericType</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(@interface);</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> instanceProperty</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> genericFactory.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">GetField</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"Instance"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        instanceProperty</span><span style="color:#D73A49;--shiki-dark:#F97583">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">GetValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">null</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var W=s(H,4);e(W,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span>|                                  Method | Accesses |           Mean |         Error |        StdDev | Ratio |      Gen 0 | Gen 1 | Gen 2 |   Allocated |</span></span>
<span class="line"><span>|---------------------------------------- |--------- |---------------:|--------------:|--------------:|------:|-----------:|------:|------:|------------:|</span></span>
<span class="line"><span>|          SimpleFactory_SequentialAccess |      100 |       3.538 us |     0.0454 us |     0.0402 us |  1.00 |     0.3815 |     - |     - |      2400 B |</span></span>
<span class="line"><span>|          CachedFactory_SequentialAccess |      100 |       3.213 us |     0.0233 us |     0.0218 us |  0.91 |          - |     - |     - |           - |</span></span>
<span class="line"><span>| CompiledGenericFactory_SequentialAccess |      100 |       1.390 us |     0.0128 us |     0.0107 us |  0.39 |          - |     - |     - |           - |</span></span>
<span class="line"><span>|                                         |          |                |               |               |       |            |       |       |             |</span></span>
<span class="line"><span>|          SimpleFactory_SequentialAccess |     1000 |      36.258 us |     0.1383 us |     0.1294 us |  1.00 |     3.7842 |     - |     - |     24000 B |</span></span>
<span class="line"><span>|          CachedFactory_SequentialAccess |     1000 |      31.292 us |     0.1065 us |     0.0890 us |  0.86 |          - |     - |     - |           - |</span></span>
<span class="line"><span>| CompiledGenericFactory_SequentialAccess |     1000 |      14.505 us |     0.0144 us |     0.0120 us |  0.40 |          - |     - |     - |           - |</span></span>
<span class="line"><span>|                                         |          |                |               |               |       |            |       |       |             |</span></span>
<span class="line"><span>|          SimpleFactory_SequentialAccess | 10000000 | 374,137.631 us | 1,675.7705 us | 1,399.3442 us |  1.00 | 38000.0000 |     - |     - | 240000000 B |</span></span>
<span class="line"><span>|          CachedFactory_SequentialAccess | 10000000 | 307,281.414 us | 1,939.4985 us | 1,719.3149 us |  0.82 |          - |     - |     - |           - |</span></span>
<span class="line"><span>| CompiledGenericFactory_SequentialAccess | 10000000 | 144,997.830 us |   715.7528 us |   634.4962 us |  0.39 |          - |     - |     - |       334 B |</span></span></code></pre>`),z(12),f(i,a)}const Wa=Object.freeze(Object.defineProperty({__proto__:null,default:La,metadata:na},Symbol.toStringTag,{value:"Module"})),ia={date:"2022-04-20",tags:["MongoDB"],title:"Checking MongoDB Operation Status: A Simple Guide",preview:"Learn how to easily check the status of your MongoDB operations with this step-by-step guide.",draft:!1,hero:"/images/blog/006-how-to-get-status-of-mongodb-operation/hero.jpg",links:["https://www.mongodb.com/docs/manual/reference/method/db.currentOp/","https://www.mongodb.com/docs/manual/reference/operator/aggregation/currentOp/","https://www.mongodb.com/docs/manual/reference/command/currentOp/#mongodb-data-currentOp.command","https://www.mongodb.com/docs/manual/reference/operator/query/comment/","https://www.mongodb.com/docs/manual/reference/command/#database-commands"],readingTime:{text:"6 min read",minutes:5.895,time:353700,words:1179}},{date:Ot,tags:Rt,title:$t,preview:qt,draft:Nt,hero:Gt,links:Ut,readingTime:Yt}=ia;var Va=C('<p>When working with databases, it’s not uncommon to inspect the status of a running query, whether it’s for profiling purposes or as part of a polling mechanism for asynchronous operations. In this blog post, we’ll explore how to use MongoDB’s <code>$currentOp</code> stage to retrieve information about running queries and how to use this functionality to store the status of running operations.</p> <h2 id="background"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#background">#</a>Background</h2> <p>My use case involves building a background service that handles data retention. The service should be able to handle multiple requests and be tolerant to failures during deletion handling. To achieve this, I need to store the states of running operations so that they can be checked during failure recovery or regular reboot/deployment.</p> <p>To receive requests, I’ll use a message broker like Kafka. The service will receive messages with a <code>JobId</code> and a condition specifying which data to delete. After the deletion is completed, the service will commit the message. If the service is restarted or fails, it will receive the uncommitted message again.</p> <h2 id="solution"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#solution">#</a>Solution</h2> <p>A straightforward solution is to store the state in another MongoDB collection. However, storing the state may be redundant since the only need for that state is to tell if the operation was completed, and if not, whether it is running or failed.</p> <p>Most of the databases I’ve worked with have special tables or views with information about all running queries, and MongoDB is no exception. It has a special query called <a href="https://www.mongodb.com/docs/manual/reference/method/db.currentOp/" rel="nofollow">db.currentOp()</a> that returns a document with information about all running queries.</p> <p>However, this API has limitations caused by MongoDB specifics. So, there’s a more modern way of retrieving running queries: the <a href="https://www.mongodb.com/docs/manual/reference/operator/aggregation/currentOp/" rel="nofollow">$currentOp</a> stage for the aggregation pipeline. It works like a regular stage and can be combined with other aggregation features like projection and grouping. I’ll use this approach for my solution.</p> <p>There are several things to keep in mind:</p> <ol><li><p>The aggregation pipeline with this stage should be run on the <code>admin</code> collection, and you need a special user to access it via your application.</p></li> <li><p>This command returns operations that are started on a specific MongoDB node. If you’re using a sharded cluster like we are, you need to run <code>$currentOp</code> on the router that started the specific delete operation. It’s not a big deal, though; you can run this query against all routers in parallel and check if any have it.</p></li> <li><p>You need to distinguish delete operations started by your service from normal operations. In our case, all data retention tasks have a <code>JobId</code>, which is a unique key for the operation. All we need is a way to mark MongoDB queries with this key.</p></li></ol> <p>If we look through the output format for <code>$currentOp</code>, we’ll notice that it has a <a href="https://www.mongodb.com/docs/manual/reference/command/currentOp/#mongodb-data-currentOp.command" rel="nofollow">comment</a> field that can be attached when a command is started. Some queries (e.g., <code>find</code>) support the <a href="https://www.mongodb.com/docs/manual/reference/operator/query/comment/" rel="nofollow">$comment</a> operator, but the most universal way to pass a comment is to run a query via a <a href="https://www.mongodb.com/docs/manual/reference/command/#database-commands" rel="nofollow">database command</a>. With this API, we can run the delete command and pass the <code>JobId</code> into the comment field.</p> <h2 id="example"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#example">#</a>Example</h2> <p>Now, let’s look at some MongoDB shell examples.</p> <h3 id="starting-delete-operation-with-jobid"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#starting-delete-operation-with-jobid">#</a>Starting Delete Operation with “JobId”</h3> <p>To pass <code>JobId</code> into the comment when we start the delete operation, we can use the following command:</p> <!> <p>This MongoDB query is designed to delete all documents from the <code>"Events"</code> collection where the <code>"clientId"</code> field equals <code>0</code>. The query is executed using the <code>runCommand</code> method, which takes a single argument that is a document representing the command to be executed.</p> <p>The command document contains several fields:</p> <ul><li><p><code>"delete"</code>: This field specifies the name of the collection to delete documents from, which is <code>"Events"</code> in this case.</p></li> <li><p><code>"ordered"</code>: This field specifies whether the deletion operation should be executed in order, with each deletion waiting for the previous one to complete before starting. In this case, it is set to false, indicating that the deletion operations can be executed in parallel.</p></li> <li><p><code>"comment"</code>: This field is an optional comment that can be included in the command. It has no effect on the operation itself, but will be highly useful in further command below.</p></li> <li><p><code>"deletes"</code>: This field contains an array of objects, each representing a deletion operation to be executed. In this case, there is only one object, which contains two fields:</p> <ul><li><p><code>"q"</code>: This field specifies the query that will be used to match documents to be deleted. In this case, the query is searching for documents where the <code>"clientId"</code> field equals 0.</p></li> <li><p><code>"limit"</code>: This field specifies the maximum number of documents to delete. In this case, it is set to 0, indicating that all documents matching the query should be deleted.</p></li></ul></li></ul> <p>When executed, this query will delete all documents from the <code>"Events"</code> collection where the <code>"clientId"</code> field equals <code>0</code>. The deletion will be executed in parallel and there is no limit to the number of documents that can be deleted. The optional comment included in the command document is “job:blog-test”, which is our <code>JobId</code>.</p> <h3 id="finding-running-operation-by-jobid"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#finding-running-operation-by-jobid">#</a>Finding Running Operation by “JobId”</h3> <p>MongoDB query below uses the aggregate method to find a specific operation that has a JobId in its command.comment field:</p> <!> <p>The first stage of the pipeline is <code>$currentOp</code>, which returns information about the current operations running on the server. The <code>localOps</code> option is set to <code>true</code>, which limits the output to only show operations running on the same node as the query.</p> <p>The second stage is <code>$match</code>, which filters the running operations based on a specific condition. In this case, it matches operations that have a comment field in their command object that matches the value “job:blog-test”.</p> <p>The third stage is <code>$limit</code>, which limits the output to the first document that matches the filter. Since we are looking for a single operation, we must set the limit to <code>1</code>.</p> <p>In summary, this query finds the first operation running on the current node that has a <code>JobId</code> in its command.comment field equal to <code>"job:blog-test"</code>.</p> <p>If an operation with such a comment is running on the current node (or router), we’ll receive a single document, containing all the info about operation with specified <code>JobId</code>:</p> <!>',1);function ja(i){var a=Va(),n=s(ss(a),30);e(n,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">db.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">runCommand</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(&#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  delete: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"Events"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  ordered: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">false</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  comment: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"job:blog-test"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  deletes: [</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">      q: &#123; clientId: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> &#125;,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">      limit: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  ],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;)</span></span></code></pre>`);var p=s(n,14);e(p,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">db.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">aggregate</span><span style="color:#24292E;--shiki-dark:#E1E4E8">([</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  &#123; $currentOp: &#123; localOps: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">true</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> &#125; &#125;,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  &#123; $match: &#123; </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"command.comment"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"job:blog-test"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> &#125; &#125;,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  &#123; $limit: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> &#125;,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">])</span></span></code></pre>`);var l=s(p,12);e(l,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">    "type"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"op"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">    "host"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"f0fde895fb50:27017"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">    "desc"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"conn65"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">    "connectionId"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#005CC5;--shiki-dark:#79B8FF">65</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">    "client"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"172.18.0.1:57176"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">    "appName"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"MongoDB Shell"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">    "clientMetadata"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : &#123;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">        "application"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : &#123;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">            "name"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"MongoDB Shell"</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#125;,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">        "driver"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : &#123;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">            "name"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"MongoDB Internal Client"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">            "version"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"4.2.6-18-g6cdb6ab"</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#125;,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">        "os"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : &#123;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">            "type"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"Windows"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">            "name"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"Microsoft Windows 8"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">            "architecture"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"x86_64"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">            "version"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"6.2 (build 9200)"</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#125;,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">        "mongos"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : &#123;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">            "host"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"f0fde895fb50:27017"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">            "client"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"172.18.0.1:57176"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">            "version"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"4.4.11"</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">    "active"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#005CC5;--shiki-dark:#79B8FF">true</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">    "currentOpTime"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"2022-04-19T22:01:50.629+00:00"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">    "opid"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#005CC5;--shiki-dark:#79B8FF">996</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">    "lsid"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : &#123;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">        "id"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic">UUID(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"e42b457e-bc01-4ffa-83dc-343f1f6ea351"</span><span style="color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic">)</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">        "uid"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : &#123; </span><span style="color:#005CC5;--shiki-dark:#79B8FF">"$binary"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU="</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF">"$type"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"00"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">    "secs_running"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic">NumberLong(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">3</span><span style="color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic">)</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">    "microsecs_running"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic">NumberLong(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">3406911</span><span style="color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic">)</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">    "op"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"remove"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">    "ns"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"testdb.Events"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">    "command"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : &#123;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">        "delete"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"Events"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">        "ordered"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#005CC5;--shiki-dark:#79B8FF">false</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">        "comment"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"job:blog-test"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">        "lsid"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : &#123;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">            "id"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic">UUID(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"e42b457e-bc01-4ffa-83dc-343f1f6ea351"</span><span style="color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#125;,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">        "$clusterTime"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : &#123;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">            "clusterTime"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic">Timestamp(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">1650405661</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic">34),</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">            "signature"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : &#123;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">                "hash"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : &#123; </span><span style="color:#005CC5;--shiki-dark:#79B8FF">"$binary"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"AAAAAAAAAAAAAAAAAAAAAAAAAAA="</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF">"$type"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"00"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> &#125;,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">                "keyId"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic">NumberLong(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">0</span><span style="color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#125;,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">        "$readPreference"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : &#123;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">            "mode"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"secondaryPreferred"</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#125;,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">        "$db"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"testdb"</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">    "numYields"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#005CC5;--shiki-dark:#79B8FF">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">    "waitingForLatch"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : &#123;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">        "timestamp"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic">ISODate(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"2022-04-19T22:01:47.323Z"</span><span style="color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic">)</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">        "captureName"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"ProducerConsumerQueue::_mutex"</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`),f(i,a)}const Oa=Object.freeze(Object.defineProperty({__proto__:null,default:ja,metadata:ia},Symbol.toStringTag,{value:"Module"})),la={date:"2024-02-18",tags:["C#"],keywords:["C#","Visitors Pattern","Type pattern matching","switch keyword"],title:"Fixing C# type pattern-matching",preview:"Craving Kotlin's secure pattern matching on sealed classes for your C# code? Discover how the Visitor Pattern can satisfy your longing!",draft:!1,hero:"/images/blog/007-fixing-csharp-type-pattern-matching/hero.jpg",links:["https://refactoring.guru/design-patterns/visitor","https://github.com/AxelUser/TypePatternMatchingOnVisitors"],readingTime:{text:"6 min read",minutes:5.38,time:322800,words:1076}},{date:Xt,tags:Kt,keywords:Jt,title:Zt,preview:Qt,draft:sn,hero:an,links:en,readingTime:tn}=la;var Ra=C('<p>Hello there! Are you looking for ways to make your code more robust, maintainable, and less prone to runtime errors? Well, buckle up because today we’re going to explore how to substitute type pattern matching in C# with the Visitors pattern. Yes, I know it sounds a bit strange, but stick with me, and you’ll see how this can help you write better code.</p> <h2 id="task-example-validation-of-property-values"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#task-example-validation-of-property-values">#</a>Task Example: Validation of Property Values</h2> <p>So let’s start with an example. Imagine we have a marker interface for some property value - <code>IValue</code>. It has two implementations - <code>StringValue</code> and <code>NumericValue</code>, holding <code>string</code> and <code>long</code> values respectively.</p> <!> <p>As an example, let’s implement validation of those values. We write a static helper function <code>IsValid</code>, which accepts <code>IValue</code> and returns a boolean value: <code>true</code> if the value is valid, <code>false</code> otherwise. We do it in a straightforward way - just make a <code>switch</code> expression with branches for <code>StringValue</code> and <code>NumericValue</code> types. But for our <code>switch</code> to be exhaustive, we’re forced to make a default branch with throwing <code>UnreachableException</code>.</p> <!> <p>So a simple console application that spins the gears of our code will look like that:</p> <!> <p>Let’s test it:</p> <!> <h2 id="the-issue"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#the-issue">#</a>The Issue</h2> <p>At first glance everything looks fine! But what if we have dozens of such type pattern matching across the project, and some other developer introduces a new type for a value, for example, <code>DateTimeValue</code>?</p> <p>In that case, he or she needs to find all usages of pattern matching for <code>IValue</code> and add a branch for the new type. And also write tests to check that we won’t have an <code>UnreachableException</code> thrown at runtime:</p> <!> <p>As our case is very simple, still, let’s imaging that our imaginary developer implemented only parsing of the new type, but forgot to handle it in our helper function.</p> <!> <p>So, you may already guess what will happen if we pass <code>2024-02-18T19:38:37Z</code> to our CLI input.</p> <!> <p>We found a bug! (how surprisingly, ha-ha)</p> <p>Imaging that this will happen in production during the midnight while you’re on-call. <strong>Not so funny now, huh?</strong></p> <h2 id="solution-visitor-pattern"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#solution-visitor-pattern">#</a>Solution: Visitor Pattern</h2> <p>I’m sure that this bug can be found with tests or during code-review. But can we have a compilation error, indicating what places to fix? Like in Kotlin or Java with sealed interfaces and classes that allow creating an exhaustive <code>when</code> expression without a default branch and receiving compilation errors when a new type is not handled.</p> <p>Unfortunately, in C# we don’t have language support for that yet. But surprisingly, an old-fashioned OOP pattern called <a href="https://refactoring.guru/design-patterns/visitor" rel="nofollow">Visitor</a> can help us achieve that. We can add a generic <code>Accept&lt;T&gt;</code> method for <code>IValue</code>, which accepts <code>IValueVisitor&lt;T&gt;</code> and returns a value of type <code>T</code>.</p> <!> <p>Interface <code>IValueVisitor&lt;T&gt;</code> has methods <code>Accept</code>, with overloads, each accepting an implementation of <code>IValue</code> interface as a parameter and returning a value of generic type <code>T</code>.</p> <!> <p>In all <code>IValue</code> implementations, we just call <code>visitor.Visit(this)</code> and return the value from this invocation:</p> <!> <p>We can rewrite a helper validation function to a class <code>ValueValidationVisitor</code>, that for each <code>Visit</code> overload performs the same check as it was done for the static function described above, generic type parameter in that case will be <code>bool</code>. Here’s how it looks like:</p> <!> <p>When a developer adds a new class implementing <code>IValue</code>, for example, <code>DateTimeValue</code>, we need to implement an <code>Accept</code> method, which should invoke the visitor’s <code>Visit</code> method:</p> <!> <p>But there’s no such overload at <code>IValueVisitor&lt;T&gt;</code> that accepts <code>DateTimeValue</code> value, so we’ve got to add it into <code>IValueVisitor&lt;T&gt;</code> and implement it all over visitor’s implementations:</p> <!> <p>So after all tons of code we’ve written, we can now change the console app and use <code>ValueValidationVisitor</code> instead of <code>ValidationHelper</code>. There’s also a singleton instance of <code>ValueValidationVisitor</code> that we can use in client code, so let’s do it.</p> <!> <p>Voilà, now not only the bug is fixed, but also the chance of missed type handling is reduced, so in overall we strengthen our type-safety guarantees.</p> <h2 id="final-thoughts"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#final-thoughts">#</a>Final Thoughts</h2> <p>However Visitor pattern is a lot more verbose than simple switch statement or expression, we are now almost absolutely sure that the developer doesn’t miss to handle its new type. And as a reviewer, one will see all places that were changed in git diff without the need to double-check in the code of the project.</p> <p>So there you have it! By using Visitor pattern, you can make your C# code more maintainable and less prone to runtime errors, especially when adding new types or modifying existing ones. It may not be as elegant or concise, but it can save you a lot of headaches in the long run. If you want to see code - check it in <a href="https://github.com/AxelUser/TypePatternMatchingOnVisitors" rel="nofollow">this</a> repository.</p> <p>And remember, a little bit of extra verbosity is worth the peace of mind!</p>',1);function $a(i){var a=Ra(),n=s(ss(a),6);e(n,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> interface</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> IValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> &#123; &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> record</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> StringValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">? </span><span style="color:#6F42C1;--shiki-dark:#B392F0">Value</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) : </span><span style="color:#6F42C1;--shiki-dark:#B392F0">IValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> record</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> NumericValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">long</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Value</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) : </span><span style="color:#6F42C1;--shiki-dark:#B392F0">IValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></code></pre>`);var p=s(n,4);e(p,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> static</span><span style="color:#D73A49;--shiki-dark:#F97583"> class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ValidationHelper</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#D73A49;--shiki-dark:#F97583"> static</span><span style="color:#D73A49;--shiki-dark:#F97583"> bool</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> IsValid</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">IValue</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> value</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> value </span><span style="color:#D73A49;--shiki-dark:#F97583">switch</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#123;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">            StringValue</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> stringValue</span><span style="color:#D73A49;--shiki-dark:#F97583"> =></span><span style="color:#D73A49;--shiki-dark:#F97583"> !</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">IsNullOrWhiteSpace</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(stringValue.Value),</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">            NumericValue</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> numericValue</span><span style="color:#D73A49;--shiki-dark:#F97583"> =></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> numericValue.Value </span><span style="color:#D73A49;--shiki-dark:#F97583">>=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">            _</span><span style="color:#D73A49;--shiki-dark:#F97583"> =></span><span style="color:#D73A49;--shiki-dark:#F97583"> throw</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> UnreachableException</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        &#125;;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var l=s(p,4);e(l,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">while</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#005CC5;--shiki-dark:#79B8FF">true</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    Console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Write</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"Write a property value: "</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> input</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">ReadLine</span><span style="color:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> value</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Parse</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(input);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    Console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">WriteLine</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">$"Value '&#123;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">input</span><span style="color:#032F62;--shiki-dark:#9ECBFF">&#125;' is valid: "</span><span style="color:#D73A49;--shiki-dark:#F97583"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ValidationHelper.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">IsValid</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(value));    </span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">static</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> IValue</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Parse</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">? </span><span style="color:#6F42C1;--shiki-dark:#B392F0">value</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#D73A49;--shiki-dark:#F97583">long</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">TryParse</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(value, </span><span style="color:#D73A49;--shiki-dark:#F97583">out</span><span style="color:#D73A49;--shiki-dark:#F97583"> var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> num</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)) </span><span style="color:#D73A49;--shiki-dark:#F97583">return</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> NumericValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(num);</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> StringValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(value);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var d=s(l,4);e(d,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span>Write a property value: foo</span></span>
<span class="line"><span>Value 'foo' is valid: True</span></span>
<span class="line"><span>Write a property value: 1 </span></span>
<span class="line"><span>Value '1' is valid: True</span></span>
<span class="line"><span>Write a property value: -42</span></span>
<span class="line"><span>Value '-42' is valid: False</span></span></code></pre>`);var c=s(d,8);e(c,()=>'<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> record</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> DateTimeValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">DateTimeOffset</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Value</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) : </span><span style="color:#6F42C1;--shiki-dark:#B392F0">IValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></code></pre>');var k=s(c,4);e(k,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">static</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> IValue</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Parse</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">? </span><span style="color:#6F42C1;--shiki-dark:#B392F0">value</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#D73A49;--shiki-dark:#F97583">long</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">TryParse</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(value, </span><span style="color:#D73A49;--shiki-dark:#F97583">out</span><span style="color:#D73A49;--shiki-dark:#F97583"> var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> num</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)) </span><span style="color:#D73A49;--shiki-dark:#F97583">return</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> NumericValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(num);</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // Parsing date, no other changes!</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (DateTimeOffset.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">TryParse</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(value, </span><span style="color:#D73A49;--shiki-dark:#F97583">out</span><span style="color:#D73A49;--shiki-dark:#F97583"> var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> dateTime</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)) </span><span style="color:#D73A49;--shiki-dark:#F97583">return</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> DateTimeValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(dateTime);</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> StringValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(value);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var m=s(k,4);e(m,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span>Write a property value: 2024-02-18T19:38:37Z</span></span>
<span class="line"><span>Unhandled exception. System.Diagnostics.UnreachableException: The program executed an instruction that was thought to be unreachable.                                </span></span>
<span class="line"><span>   at TypePatternMatchingOnVisitors.ValidationHelper.IsValid(IValue value) in C:UsersAxelUprojectslearnTypePatternMatchingOnVisitorsValidationHelper.cs:line 13</span></span>
<span class="line"><span>   at Program.&#x3C;Main>$(String[] args) in C:UsersAxelUprojectslearnTypePatternMatchingOnVisitorsProgram.cs:line 8                                                </span></span>
<span class="line"><span></span></span>
<span class="line"><span>Process finished with exit code -532,462,766.</span></span></code></pre>`);var h=s(m,12);e(h,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> interface</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> IValue</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    T</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Accept</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">>(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">IValueVisitor</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">> </span><span style="color:#6F42C1;--shiki-dark:#B392F0">visitor</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var y=s(h,4);e(y,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> interface</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> IValueVisitor</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#D73A49;--shiki-dark:#F97583">out</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    T</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Visit</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">StringValue</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> stringValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    T</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Visit</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">NumericValue</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> numericValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var E=s(y,4);e(E,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> record</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> StringValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">? </span><span style="color:#6F42C1;--shiki-dark:#B392F0">Value</span><span style="color:#24292E;--shiki-dark:#E1E4E8">): </span><span style="color:#6F42C1;--shiki-dark:#B392F0">IValue</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Accept</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">>(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">IValueVisitor</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">> </span><span style="color:#6F42C1;--shiki-dark:#B392F0">visitor</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> visitor.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Visit</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// ... same for other IValue implementations</span></span></code></pre>`);var g=s(E,4);e(g,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ValueValidationVisitor</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#6F42C1;--shiki-dark:#B392F0">IValueVisitor</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#D73A49;--shiki-dark:#F97583">bool</span><span style="color:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#D73A49;--shiki-dark:#F97583"> bool</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Visit</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">StringValue</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> stringValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#D73A49;--shiki-dark:#F97583"> !</span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">IsNullOrWhiteSpace</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(stringValue.Value);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#D73A49;--shiki-dark:#F97583"> bool</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Visit</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">NumericValue</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> numericValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> numericValue.Value </span><span style="color:#D73A49;--shiki-dark:#F97583">>=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var B=s(g,4);e(B,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> record</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> DateTimeValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">DateTimeOffset</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Value</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) : </span><span style="color:#6F42C1;--shiki-dark:#B392F0">IValue</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // Compilation error - we don't implement Visit for this value type yet!</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Accept</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">>(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">IValueVisitor</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">> </span><span style="color:#6F42C1;--shiki-dark:#B392F0">visitor</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> visitor.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Visit</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var F=s(B,4);e(F,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> interface</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> IValueVisitor</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#D73A49;--shiki-dark:#F97583">out</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> T</span><span style="color:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // ... other Visit overloads</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    T</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Visit</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">DateTimeValue</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> dateTimeValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ValueValidationVisitor</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#6F42C1;--shiki-dark:#B392F0">IValueVisitor</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#D73A49;--shiki-dark:#F97583">bool</span><span style="color:#24292E;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // singleton for visitor cause it's stateless and safe to share between IValue instances</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#D73A49;--shiki-dark:#F97583"> static</span><span style="color:#D73A49;--shiki-dark:#F97583"> readonly</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ValueValidationVisitor</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Instance</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // ... other Visit overloads</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#D73A49;--shiki-dark:#F97583"> bool</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Visit</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">DateTimeValue</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> dateTimeValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> dateTimeValue.Value </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x3C;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> DateTimeOffset.UtcNow;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span>
<span class="line"></span></code></pre>`);var _=s(F,4);e(_,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">while</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#005CC5;--shiki-dark:#79B8FF">true</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    Console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Write</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"Write a property value: "</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> input</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">ReadLine</span><span style="color:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> value</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Parse</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(input);</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    //Console.WriteLine($"Value '&#123;input&#125;' is valid: " + ValidationHelper.IsValid(value));    </span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    Console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">WriteLine</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">$"Value '&#123;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">input</span><span style="color:#032F62;--shiki-dark:#9ECBFF">&#125;' is valid: "</span><span style="color:#D73A49;--shiki-dark:#F97583"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> value.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Accept</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(ValueValidationVisitor.Instance));    </span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`),z(10),f(i,a)}const qa=Object.freeze(Object.defineProperty({__proto__:null,default:$a,metadata:la},Symbol.toStringTag,{value:"Module"})),Na=16,Ga=4;function Ls(i,a){let n=5381;for(let p=0;p<i.length;p++)n=(n<<5)+n+i.charCodeAt(p)>>>0;return n%a}function Ws(i,a){let n=0;for(let l=0;l<i.length;l++)n=i.charCodeAt(l)+(n<<6)+(n<<16)-n>>>0;let p=n%a;return p===0&&(p=1),a%2===0&&p%2===0&&(p=p===a-1?1:p+1),p}function Ua(i,a){return(i%a+a)%a}function _s(i,a,n){if(!i||a<=0||n<=0)return[];const p=Ls(i,a),l=Ws(i,a),d=[];for(let c=0;c<n;c++){const k=Ua(p+c*l,a);d.push(k)}return d.sort((c,k)=>c-k)}class Ya{constructor(a,n){Ms(this,"bitArray");Ms(this,"size");Ms(this,"numHashFunctions");this.size=a,this.numHashFunctions=n,this.bitArray=new Array(a).fill(!1)}generateInsertSteps(a){const n=[],p=Ls(a,this.size),l=Ws(a,this.size);n.push({type:"hash1",value:p}),n.push({type:"hash2",value:l});const d=_s(a,this.size,this.numHashFunctions),c=new Array(this.size).fill("0");return d.forEach(k=>c[k]="1"),n.push({type:"binary",value:c.join("")}),d.forEach(k=>{const m=this.bitArray[k];n.push({type:"setBit",index:k,wasSet:m})}),n}generateCheckSteps(a){const n=[],p=Ls(a,this.size),l=Ws(a,this.size);n.push({type:"hash1",value:p}),n.push({type:"hash2",value:l});const d=_s(a,this.size,this.numHashFunctions),c=new Array(this.size).fill("0");return d.forEach(k=>c[k]="1"),n.push({type:"binary",value:c.join("")}),d.forEach(k=>{n.push({type:"setBit",index:k,wasSet:this.bitArray[k]})}),n}insert(a){_s(a,this.size,this.numHashFunctions).forEach(p=>{this.bitArray[p]=!0})}check(a){return _s(a,this.size,this.numHashFunctions).every(p=>this.bitArray[p])}getBitArray(){return[...this.bitArray]}reset(){this.bitArray.fill(!1)}getHashValues(a){return{h1:Ls(a,this.size),h2:Ws(a,this.size)}}getBinaryRepresentation(a){const n=_s(a,this.size,this.numHashFunctions),p=new Array(this.size).fill("0");return n.forEach(l=>p[l]="1"),p.join("")}getSize(){return this.size}}var Xa=C("<div> </div>"),Ka=C('<span class="index svelte-rx78hf"> </span>'),Ja=C('<div class="bit-segment svelte-rx78hf"><div class="segment-bits svelte-rx78hf"></div> <div class="segment-indices svelte-rx78hf"></div></div>');function Ks(i,a){js(a,!0);const n=q(a,"type",3,"bitarray"),p=q(a,"highlightedBits",19,()=>new Set),l=q(a,"bitColors",19,()=>new Map);var d=Ja(),c=r(d);Is(c,21,()=>a.bits,Ss,(m,h,y)=>{var E=Xa();const g=I(()=>a.startIndex+y);let B;var F=r(E,!0);o(E),ps(_=>{B=zs(E,1,"bit svelte-rx78hf",null,B,_),is(F,n()==="binary"?t(h):t(h)?"1":"0")},[()=>({active:n()==="binary"&&t(h)==="1",set:n()==="bitarray"&&t(h)===!0,highlighted:p().has(t(g)),blue:l().get(t(g))==="blue",red:l().get(t(g))==="red"})]),f(m,E)}),o(c);var k=s(c,2);Is(k,21,()=>a.bits,Ss,(m,h,y)=>{var E=Ka();const g=I(()=>a.startIndex+y);var B=r(E,!0);o(E),ps(()=>is(B,t(g))),f(m,E)}),o(k),o(d),f(i,d),Os()}var Za=C('<div class="unit svelte-ooecwa"> </div>'),Qa=C('<div class="description svelte-ooecwa"> </div>'),se=C('<div><div class="label svelte-ooecwa"> </div> <div> </div> <!> <!></div>');function os(i,a){const n=q(a,"variant",3,"default"),p=q(a,"showEmpty",3,!0),l=I(()=>a.value===null||a.value===void 0||a.value===""),d=I(()=>t(l)&&!p()?"—":a.value);var c=se();let k;var m=r(c),h=r(m,!0);o(m);var y=s(m,2);let E;var g=r(y,!0);o(y);var B=s(y,2);{var F=x=>{var w=Za(),H=r(w,!0);o(w),ps(()=>is(H,a.unit)),f(x,w)};Fs(B,x=>{a.unit&&x(F)})}var _=s(B,2);{var T=x=>{var w=Qa(),H=r(w,!0);o(w),ps(()=>is(H,a.description)),f(x,w)};Fs(_,x=>{a.description&&x(T)})}o(c),ps((x,w)=>{k=zs(c,1,"display-card svelte-ooecwa",null,k,x),is(h,a.label),E=zs(y,1,"value svelte-ooecwa",null,E,w),is(g,t(d))},[()=>({compact:n()==="compact",elevated:n()==="elevated",centered:n()==="centered",empty:t(l)&&!p()}),()=>({fade:t(l)&&!p()})]),f(i,c)}var ae=C('<label class="svelte-qse8j9"> </label>'),ee=C('<div class="input-group svelte-qse8j9"><!> <input class="svelte-qse8j9"></div>');function Ts(i,a){js(a,!0);let n=q(a,"value",15),p=q(a,"type",3,"text"),l=q(a,"disabled",3,!1),d=q(a,"required",3,!1);const c=I(()=>a.id||`input-${Math.random().toString(36).substr(2,9)}`);var k=ee(),m=r(k);{var h=E=>{var g=ae(),B=r(g);o(g),ps(()=>{bs(g,"for",t(c)),is(B,`${a.label??""}${d()?"*":""}`)}),f(E,g)};Fs(m,E=>{a.label&&E(h)})}var y=s(m,2);Ns(y),o(k),ps(()=>{bs(y,"id",t(c)),bs(y,"type",p()),bs(y,"placeholder",a.placeholder),y.disabled=l(),bs(y,"min",a.min),bs(y,"max",a.max),bs(y,"step",a.step),y.required=d()}),xa(y,n),f(i,k),Os()}var te=C('<div><h3 class="svelte-5o5yhn"> </h3> <!></div>');function oa(i,a){const n=q(a,"variant",3,"default"),p=q(a,"cardVariant",3,"compact");var l=te();let d;var c=r(l),k=r(c,!0);o(c);var m=s(c,2);Is(m,17,()=>a.parameters,Ss,(h,y)=>{os(h,{get label(){return t(y).label},get value(){return t(y).value},get unit(){return t(y).unit},get description(){return t(y).description},get variant(){return p()}})}),o(l),ps(h=>{d=zs(l,1,"parameters-section svelte-5o5yhn",null,d,h),is(k,a.title)},[()=>({sticky:n()==="sticky"})]),f(i,l)}var ne=C('<div class="binary-grid svelte-1hmxjsx"></div>'),ie=C('<div class="binary-placeholder svelte-1hmxjsx"><span class="placeholder svelte-1hmxjsx">— Nothing yet —</span></div>'),le=C('<div class="input-section svelte-1hmxjsx"><!> <div class="button-group svelte-1hmxjsx"><!> <!> <!></div></div>'),oe=C('<div class="result-display svelte-1hmxjsx"><span class="operation svelte-1hmxjsx"> </span> <span> </span></div>'),re=C('<div class="bloom-filter-container svelte-1hmxjsx"><div class="layout svelte-1hmxjsx"><div class="main-content svelte-1hmxjsx"><div class="hash-display svelte-1hmxjsx"><!> <!></div> <div class="binary-display svelte-1hmxjsx"><label class="svelte-1hmxjsx">Mapped Bits:</label> <!></div> <!> <!> <div class="binary-display svelte-1hmxjsx"><label class="svelte-1hmxjsx">Bit Array:</label> <div class="binary-grid svelte-1hmxjsx"></div></div></div> <div class="parameters-column svelte-1hmxjsx"><!></div></div></div>');function pe(i,a){js(a,!0);const n=q(a,"size",3,Na),p=q(a,"numHashFunctions",3,Ga),l=q(a,"stepDuration",3,1500),d=q(a,"userInputEnabled",3,!0),c=q(a,"autoAnimate",3,!0);let k=$(""),m=$(!1),h=$(Hs([])),y=$(null),E=$(null),g=$(null),B=$(null),F=$(""),_=$(Hs(new Set)),T=$(Hs(new Map)),x=I(()=>new Ya(n(),p())),w=$(Hs([]));ba(()=>{b(w,t(x).getBitArray(),!0)});const H=I(p),W=I(n);function X(){b(g,null),b(B,null),b(F,""),t(_).clear(),t(T).clear(),b(E,null)}async function N(v,D){if(!(t(m)||!D.trim())){b(m,!0),b(y,v,!0),X(),v==="insert"?b(h,t(x).generateInsertSteps(D),!0):b(h,t(x).generateCheckSteps(D),!0);for(let S=0;S<t(h).length;S++){const A=t(h)[S];switch(A.type){case"hash1":b(g,A.value,!0);break;case"hash2":b(B,A.value,!0);break;case"binary":b(F,A.value,!0);break;case"setBit":t(_).add(A.index),v==="insert"?(t(T).set(A.index,A.wasSet?"red":"blue"),A.wasSet||(t(w)[A.index]=!0)):t(T).set(A.index,A.wasSet?"blue":"red"),b(_,new Set(t(_)),!0),b(T,new Map(t(T)),!0),b(w,[...t(w)],!0);break}c()&&S<t(h).length-1&&await new Promise(O=>setTimeout(O,l()))}v==="insert"?(t(x).insert(D),b(E,!0)):b(E,t(x).check(D),!0),b(w,t(x).getBitArray(),!0),c()&&setTimeout(()=>{t(_).clear(),t(T).clear(),b(_,new Set,!0),b(T,new Map,!0)},l()),b(m,!1)}}async function Y(){d()&&(await N("insert",t(k)),b(k,""))}async function G(){d()&&(await N("check",t(k)),b(k,""))}function K(){t(m)||(t(x).reset(),b(w,t(x).getBitArray(),!0),X())}const j=I(()=>t(w).reduce((v,D,S)=>{const A=Math.floor(S/4);return v[A]||(v[A]=[]),v[A].push(D),v},[])),Z=I(()=>t(F).split("").reduce((v,D,S)=>{const A=Math.floor(S/4);return v[A]||(v[A]=[]),v[A].push(D),v},[]));var V=re(),Q=r(V),P=r(Q),U=r(P),M=r(U);os(M,{label:"Hash 1:",get value(){return t(g)},variant:"centered",showEmpty:!1});var es=s(M,2);os(es,{label:"Hash 2:",get value(){return t(B)},variant:"centered",showEmpty:!1}),o(U);var as=s(U,2),ls=s(r(as),2);{var ts=v=>{var D=ne();Is(D,21,()=>t(Z),Ss,(S,A,O)=>{Ks(S,{get bits(){return t(A)},startIndex:O*4,type:"binary"})}),o(D),f(v,D)},cs=v=>{var D=ie();f(v,D)};Fs(ls,v=>{t(F)!==""?v(ts):v(cs,!1)})}o(as);var hs=s(as,2);{var xs=v=>{var D=le(),S=r(D);Ts(S,{get disabled(){return t(m)},placeholder:"Enter any text...",onkeydown:J=>J.key==="Enter"&&Y(),get value(){return t(k)},set value(J){b(k,J,!0)}});var A=s(S,2),O=r(A);const ks=I(()=>t(m)||!t(k).trim());Bs(O,{intent:"primary",onclick:Y,get disabled(){return t(ks)},children:(J,fs)=>{z();var ns=Cs("Insert");f(J,ns)},$$slots:{default:!0}});var u=s(O,2);const L=I(()=>t(m)||!t(k).trim());Bs(u,{intent:"primary",onclick:G,get disabled(){return t(L)},children:(J,fs)=>{z();var ns=Cs("Check");f(J,ns)},$$slots:{default:!0}});var R=s(u,2);Bs(R,{intent:"secondary",onclick:K,get disabled(){return t(m)},children:(J,fs)=>{z();var ns=Cs("Reset");f(J,ns)},$$slots:{default:!0}}),o(A),o(D),f(v,D)};Fs(hs,v=>{d()&&v(xs)})}var ds=s(hs,2);{var vs=v=>{var D=oe(),S=r(D),A=r(S);o(S);var O=s(S,2);let ks;var u=r(O,!0);o(O),o(D),ps(L=>{is(A,`${t(y)==="insert"?"Inserted":"Check"}:`),ks=zs(O,1,"result svelte-1hmxjsx",null,ks,L),is(u,t(y)==="insert"?"Element added":t(E)?"Possibly present":"Definitely not present")},[()=>({positive:t(E),negative:!t(E)})]),f(v,D)};Fs(ds,v=>{t(E)!==null&&t(y)&&v(vs)})}var ys=s(ds,2),ms=s(r(ys),2);Is(ms,21,()=>t(j),Ss,(v,D,S)=>{Ks(v,{get bits(){return t(D)},startIndex:S*4,type:"bitarray",get highlightedBits(){return t(_)},get bitColors(){return t(T)}})}),o(ms),o(ys),o(P);var Es=s(P,2),us=r(Es);const gs=I(()=>[{label:"k (Hash Functions):",value:t(H)},{label:"m (Bit Array Size):",value:t(W)}]);oa(us,{title:"Parameters",get parameters(){return t(gs)},variant:"sticky"}),o(Es),o(Q),o(V),f(i,V),Os()}var ce=C('<div class="custom-params svelte-9b9zo"><!> <!></div>'),he=C('<div class="calculator-container svelte-9b9zo"><h2 class="svelte-9b9zo">Bloom Filter Parameter Calculator</h2> <div class="layout svelte-9b9zo"><div class="main-content svelte-9b9zo"><div class="input-section svelte-9b9zo"><h3 class="svelte-9b9zo">Input Parameters</h3> <!> <!> <div class="mode-section svelte-9b9zo"><h4 class="svelte-9b9zo">Calculation Mode</h4> <div class="radio-group svelte-9b9zo"><label class="radio-label svelte-9b9zo"><input type="radio"> Calculate optimal parameters</label> <label class="radio-label svelte-9b9zo"><input type="radio"> Use custom parameters</label></div></div> <!></div> <div class="results-section svelte-9b9zo"><h3 class="svelte-9b9zo">Calculated Results</h3> <div class="results-grid svelte-9b9zo"><!> <!> <!> <!> <!> <!></div></div></div> <div class="parameters-column svelte-9b9zo"><!> <div class="parameters-section svelte-9b9zo"><h3 class="svelte-9b9zo">Quick Presets</h3> <div class="preset-buttons svelte-9b9zo"><!> <!> <!></div></div></div></div></div>');function de(i,a){js(a,!0);const n=[],p=32;let l=$(1e5),d=$(.01),c=$(null),k=$(null),m=$("optimal");const h=I(()=>t(l)<=0||t(d)<=0||t(d)>=1?0:Math.ceil(-(t(l)*Math.log(t(d)))/Math.pow(Math.log(2),2))),y=I(()=>t(l)<=0||t(h)<=0?0:Math.max(1,Math.round(t(h)/t(l)*Math.log(2)))),E=I(()=>{const u=t(m)==="optimal"?t(h):t(c)||t(h),L=t(m)==="optimal"?t(y):t(k)||t(y),R=t(l);return R<=0||u<=0||L<=0?0:Math.pow(1-Math.exp(-L*R/u),L)}),g=I(()=>{const u=t(m)==="optimal"?t(h):t(c)||t(h);return Math.ceil(u/8)}),B=I(()=>{const u=t(m)==="optimal"?t(h):t(c)||t(h);return t(l)<=0?0:u/t(l)});function F(u,L=2){return u===0?"0":u<.01&&u>0?u.toExponential(2):u.toLocaleString(void 0,{maximumFractionDigits:L})}function _(u){return(u*100).toFixed(4)+"%"}function T(u){return u<1024?`${u} B`:u<1024*1024?`${(u/1024).toFixed(2)} KiB`:`${(u/(1024*1024)).toFixed(2)} MiB`}var x=he(),w=s(r(x),2),H=r(w),W=r(H),X=s(r(W),2);Ts(X,{label:"Expected Elements (n):",type:"number",min:1,step:"1",placeholder:"100000",id:"expected-elements",get value(){return t(l)},set value(u){b(l,u,!0)}});var N=s(X,2);Ts(N,{label:"Target False Positive Rate (p):",type:"number",min:1e-6,max:.999999,step:"0.001",placeholder:"0.01",id:"false-positive-rate",get value(){return t(d)},set value(u){b(d,u,!0)}});var Y=s(N,2),G=s(r(Y),2),K=r(G),j=r(K);Ns(j),j.value=j.__value="optimal",z(),o(K);var Z=s(K,2),V=r(Z);Ns(V),V.value=V.__value="custom",z(),o(Z),o(G),o(Y);var Q=s(Y,2);{var P=u=>{var L=ce(),R=r(L);const J=I(()=>t(h).toString());Ts(R,{label:"Bit Array Size (m):",type:"number",min:1,step:"1",get placeholder(){return t(J)},id:"custom-m",get value(){return t(c)},set value(ws){b(c,ws,!0)}});var fs=s(R,2);const ns=I(()=>t(y).toString());Ts(fs,{label:"Hash Functions (k):",type:"number",min:1,step:"1",get placeholder(){return t(ns)},id:"custom-k",get value(){return t(k)},set value(ws){b(k,ws,!0)}}),o(L),f(u,L)};Fs(Q,u=>{t(m)==="custom"&&u(P)})}o(W);var U=s(W,2),M=s(r(U),2),es=r(M);const as=I(()=>F(t(m)==="optimal"?t(h):t(c)||t(h),0));os(es,{label:"Bit Array Size (m)",get value(){return t(as)},unit:"bits",variant:"elevated"});var ls=s(es,2);const ts=I(()=>t(m)==="optimal"?t(y):t(k)||t(y));os(ls,{label:"Hash Functions (k)",get value(){return t(ts)},unit:"functions",variant:"elevated"});var cs=s(ls,2);const hs=I(()=>_(t(E)));os(cs,{label:"Actual False Positive Rate",get value(){return t(hs)},unit:"probability",variant:"elevated"});var xs=s(cs,2);const ds=I(()=>T(t(g)));os(xs,{label:"Memory Usage",get value(){return t(ds)},unit:"total",variant:"elevated"});var vs=s(xs,2);const ys=I(()=>F(t(B)));os(vs,{label:"Bits per Element",get value(){return t(ys)},unit:"bits/element",variant:"elevated"});var ms=s(vs,2);const Es=I(()=>`${F(100*(1-t(g)/(t(l)*p)))}%`);os(ms,{label:"Space Efficiency",get value(){return t(Es)},description:`vs naive storage (${p} bits/element)`,variant:"elevated"}),o(M),o(U),o(H);var us=s(H,2),gs=r(us);const v=I(()=>[{label:"Expected Elements (n):",value:F(t(l),0)},{label:"Target FPR (p):",value:_(t(d))},{label:"Bit Array Size (m):",value:F(t(m)==="optimal"?t(h):t(c)||t(h),0)},{label:"Hash Functions (k):",value:t(m)==="optimal"?t(y):t(k)||t(y)}]);oa(gs,{title:"Current Parameters",get parameters(){return t(v)},variant:"sticky",cardVariant:"compact"});var D=s(gs,2),S=s(r(D),2),A=r(S);Bs(A,{onclick:()=>{b(l,1e3),b(d,.01),b(m,"optimal")},children:(u,L)=>{z();var R=Cs("Small (1K, 1%)");f(u,R)},$$slots:{default:!0}});var O=s(A,2);Bs(O,{onclick:()=>{b(l,1e5),b(d,.01),b(m,"optimal")},children:(u,L)=>{z();var R=Cs("Medium (100K, 1%)");f(u,R)},$$slots:{default:!0}});var ks=s(O,2);Bs(ks,{onclick:()=>{b(l,1e6),b(d,.001),b(m,"optimal")},children:(u,L)=>{z();var R=Cs("Large (1M, 0.1%)");f(u,R)},$$slots:{default:!0}}),o(S),o(D),o(us),o(w),o(x),Ys(n,[],j,()=>t(m),u=>b(m,u)),Ys(n,[],V,()=>t(m),u=>b(m,u)),f(i,x),Os()}const ra={date:"2025-06-09",tags:["Algorithms"],keywords:["Bloom filters","Probabilistic data structures","Hash functions","Bit arrays"],title:"Grokking Bloom Filters: The Classic Bloom Filter Demystified",preview:"How a tiny data structure cuts memory usage by 90% — while helping systems instantly check if data exists.",series:"Grokking Bloom Filters",draft:!1,hero:"/images/blog/008-bloom-filters-pt1/hero.jpg",links:["#live-demo","#play-with-the-numbers","#what-is-a-bloom-filter","#how-bloom-filters-work","#live-demo","#why-cant-we-delete","#can-it-scale","#optimizing-hash-functions","#double-hashing-approach","#wide-hash-split","#recap","#how-to-calculate-parameters","#the-false-positive-rate","#how-parameters-affect-performance","#calculating-optimal-parameters","#examples-with-calculations","#play-with-the-numbers","#wrapping-up","https://www.math.umd.edu/~immortal/CMSC420/notes/bloomfilters.pdf","https://maltsev.space/blog/009-counting-bloom-filters","https://maltsev.space/blog/010-cuckoo-filters","https://gsd.di.uminho.pt/members/cbm/ps/dbloom.pdf","https://www.eecs.harvard.edu/~michaelm/postscripts/rsa2008.pdf","https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/utils/BloomFilter.java","https://github.com/google/guava/blob/master/guava/src/com/google/common/hash/BloomFilterStrategies.java","https://cglab.ca/~morin/publications/ds/bloom-submitted.pdf","https://valkey.io/blog/introducing-bloom-filters/"],readingTime:{text:"21 min read",minutes:20.53,time:1231800,words:4106}},{date:nn,tags:ln,keywords:on,title:rn,preview:pn,series:cn,draft:hn,hero:dn,links:mn,readingTime:kn}=ra;var me=C(`<p>There’s a special category of data structures known as probabilistic data structures — and I have a soft spot for some of them. One of my absolute favorites is the Bloom filter. It’s a beautifully simple concept that tackles a surprisingly common challenge: how can we quickly check whether something belongs to a set — without eating up loads of memory?</p> <p>Even though Bloom filters aren’t something most of us use directly in everyday business code, they quietly work behind the scenes in the infrastructure of modern distributed systems, databases, and web services.</p> <p>Instead of storing the actual data, Bloom filters use a clever combo of hash functions and bit arrays to give us lightning-fast answers to a very simple question: is this thing definitely not in the set — or is it maybe there?</p> <p>This post is a deep dive — it’s long, and we’ll take our time walking through how Bloom filters work, how they’re built, and how they behave. But if you’re just here to see it in action, feel free to jump straight to the <a href="#live-demo">interactive playground</a> and try it out yourself. Or, if you’re ready to tune your own Bloom filter, head over to the <a href="#play-with-the-numbers">calculator</a> to configure parameters for your use case.</p> <h2 id="contents"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#contents">#</a>Contents</h2> <ul><li><a href="#what-is-a-bloom-filter">What is a Bloom Filter?</a></li> <li><a href="#how-bloom-filters-work">How Bloom Filters Work</a> <ul><li><a href="#live-demo">Live Demo</a></li> <li><a href="#why-cant-we-delete">Why Can’t We Delete?</a></li> <li><a href="#can-it-scale">Can It Scale?</a></li></ul></li> <li><a href="#optimizing-hash-functions">Optimizing Hash Functions</a> <ul><li><a href="#double-hashing-approach">Double Hashing Approach</a></li> <li><a href="#wide-hash-split">Wide Hash Split</a></li> <li><a href="#recap">Recap</a></li></ul></li> <li><a href="#how-to-calculate-parameters">How to Calculate Parameters</a> <ul><li><a href="#the-false-positive-rate">The False Positive Rate</a></li> <li><a href="#how-parameters-affect-performance">How Parameters Affect Performance</a></li> <li><a href="#calculating-optimal-parameters">Calculating Optimal Parameters</a></li> <li><a href="#examples-with-calculations">Examples With Calculations</a></li> <li><a href="#play-with-the-numbers">Play With The Numbers</a></li></ul></li> <li><a href="#wrapping-up">Wrapping Up</a></li></ul> <h2 id="what-is-a-bloom-filter"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#what-is-a-bloom-filter">#</a>What is a Bloom Filter?</h2> <p>A Bloom filter is a space-efficient probabilistic data structure designed to test whether an element belongs to a set. The key insight behind Bloom filters is their fundamental trade-off: they can guarantee with absolute certainty that an element is <em>not</em> in the set, but when they report that an element <em>is</em> present, there’s a small chance this may be a false positive. This asymmetry makes them especially useful as a first-line filter in systems where false positives are acceptable, but false negatives are not.</p> <div class="callout" data-callout="info" data-collapsible="false"><div class="callout-title"><div class="callout-title-icon" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg></div><div class="callout-title-text">Info</div></div><div class="callout-content"><p>If you’re not familiar with the terms <em>false positive</em> and <em>false negative</em>, here’s a quick translation:</p><ul><li>A <strong>false positive</strong> means the system says “yes, it’s here” when actually it’s not.</li> <li>A <strong>false negative</strong> means the system says “no, it’s not here” when actually it is.</li></ul></div></div> <p>The core idea is simple yet powerful. Rather than storing the actual elements, a Bloom filter keeps only hashed representations of the elements inside a compact bit array. This sacrifices some precision but delivers outstanding space efficiency and fast query times. For example, a typical Bloom filter with a 1% error rate requires just about 9.6 bits per element—regardless of the size of the elements themselves. That’s a significant improvement over traditional data structures like hash tables or hash sets, which must store the full data items.</p> <p>Bloom filters may report false positives — claiming an element is present when it isn’t — but they never report false negatives. This makes them extremely reliable for exclusion queries. This property has made Bloom filters invaluable in a wide range of applications, from web caching to database query optimization, where the cost of a false positive is far lower than the cost of missing a true member.</p> <h2 id="how-bloom-filters-work"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#how-bloom-filters-work">#</a>How Bloom Filters Work</h2> <p>The algorithm behind Bloom filters is elegantly built on three main components: a fixed-size bit array, multiple independent hash functions, and straightforward insertion and lookup operations. An empty Bloom filter starts as a bit array of <code>m</code> bits, all initialized to 0, and comes equipped with <code>k</code> different hash functions that map each element to exact <code>k</code> positions within the array. For optimal performance, these hash functions should ideally be independent and uniformly distributed.</p> <div class="callout" data-callout="info" data-collapsible="false"><div class="callout-title"><div class="callout-title-icon" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg></div><div class="callout-title-text">Hash functions?</div></div><div class="callout-content"><p>A hash function is a function that takes an input (like a string or number) and deterministically maps it to a number within a fixed range — in this case, some positions in the bit array.
When we say that hash functions should be <strong>independent</strong>, we mean that knowing the output of one hash function doesn’t help you guess or calculate the output of another — each one works on its own, like rolling different dice.
And when we say they are <strong>uniformly distributed</strong>, we mean that they spread their results evenly across all possible positions, so no part of the resulting bit array gets overloaded with too many bits set.</p><p>Examples of commonly used hash functions include MurmurHash, xxHash, CityHash, or cryptographic ones like SHA-256 (though cryptographic hashes are usually overkill for Bloom filters).</p></div></div> <!> <p>Inserting an element is fast and deterministic: the element is fed into each of the <code>k</code> hash functions, producing <code>k</code> unique array positions. The bits at all these positions are then set to 1. No matter how many elements have already been inserted, this operation always requires exactly <code>k</code> hash calculations and <code>k</code> bit updates. The beauty of this approach is its simplicity—there’s no need for collision resolution or complex data structures.</p> <p>Lookup works similarly. To check whether an element might be in the set, the algorithm runs the element through the same <code>k</code> hash functions to obtain <code>k</code> positions. If any of these bits is 0, the element is definitely not in the set — this is guaranteed, since insertion would have set all these bits to 1.</p> <!> <p>However, if all the bits are 1, the element <em>might</em> be in the set, but there’s also a chance that these bits were set by previous insertions of other elements. This creates the possibility of a false positive.</p> <!> <p>The math behind this comes from the probabilistic nature of hash collisions. As more elements are added, more bits get flipped to 1, which increases the chance that any random combination of <code>k</code> positions is already occupied, even for elements that were never inserted. That’s why the false positive rate grows with the number of elements, while the false negative rate stays at zero — if an element was inserted, it will always test as present.</p> <h3 id="live-demo"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#live-demo">#</a>Live Demo</h3> <p>Let’s get our hands dirty.</p> <p>In the interactive playground below, you can <strong>insert any string values into the Bloom filter</strong> and watch how it modifies the internal bit array. You can also <strong>check if a value is present</strong>, and see how Bloom filters may return <code>possibly present</code> even for things you never inserted — that’s our famous false positives in action.</p> <p>A few technical notes about this demo:</p> <ul><li>It uses a <strong>double hashing technique</strong> (which we’ll cover in more detail later). In short: instead of generating many completely separate hashes, it combines just two distinct hash functions to simulate any number of <code>k</code> hash functions. This approach is both efficient and widely used in real-world Bloom filters.</li> <li>For simplicity and to keep things visual, the filter here uses a very compact bit array — only <strong>16 bits</strong> (<code>m = 16</code>) and sets <code>k = 4</code> bit positions for each element.</li></ul> <p>Here’s what happens under the hood:</p> <ul><li>When you add a value: the filter applies the double hash to calculate <code>k</code> positions and flips the corresponding bits to <code>1</code>.</li> <li>When you check a value: it verifies if all these bits are still set to <code>1</code>. If yes — it says “maybe”; if any of them is <code>0</code> — it’s a definite “no”.</li></ul> <!> <h3 id="why-cant-we-delete"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#why-cant-we-delete">#</a>Why Can’t We Delete?</h3> <p>As you may have already noticed, we have <strong>INSERT</strong> and <strong>CHECK</strong> operations in Bloom filters, but I never mentioned a <strong>DELETE</strong> operation. That’s because — in the original design — we simply can’t. At least, not without breaking some of the guarantees that make Bloom filters useful in the first place. (Though, as we’ll see later in the series, there <em>are</em> variations of Bloom filters that support deletion.)</p> <p>The root of the problem is that multiple elements may hash to the same bit positions. When you attempt to delete an element by resetting its bits back to <code>0</code>, you risk clearing bits that may still be in use by other elements. Since Bloom filters are designed to avoid <strong>false negatives</strong>, any operation that might accidentally remove evidence of another element’s presence would break this guarantee.</p> <p>As one researcher <a href="https://www.math.umd.edu/~immortal/CMSC420/notes/bloomfilters.pdf" rel="nofollow">puts it nicely:</a></p> <div class="callout" data-callout="quote" data-collapsible="false"><div class="callout-title"><div class="callout-title-icon" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z"></path><path d="M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z"></path></svg></div><div class="callout-title-text">Quote</div></div><div class="callout-content"><p>“There is no deletion basically because the only reasonable way to delete would be to hash the key and then set those corresponding bits to 0, but this could cause false negatives for other keys.”</p></div></div> <p>Let’s visualize this. Imagine a Bloom filter as a shared apartment building where multiple tenants (elements) occupy overlapping rooms (bit positions).</p> <ul><li>When Alice moves in, she gets keys to rooms <code>3</code>, <code>7</code>, and <code>12</code>.</li> <li>When Bob moves in, he gets keys to rooms <code>7</code>, <code>15</code>, and <code>23</code>.</li></ul> <p>Notice: both Alice and Bob share room <code>7</code>.</p> <p>Now, if Alice moves out and we naively “delete” her by switching off the lights (setting bits to <code>0</code>) in rooms <code>3</code>, <code>7</code>, and <code>12</code>, we inadvertently turn off room <code>7</code>, which Bob still needs.<br> The next time someone asks, “Is Bob still living here?” the system might falsely answer “No” — even though Bob never left. That’s a <strong>false negative</strong>, and Bloom filters are designed specifically to prevent that.</p> <!> <p>Of course, for a quick and dirty workaround, an engineer might introduce a second “blacklist” Bloom filter to track deletions. When checking membership, an element would only be considered present if it’s in the main filter <strong>and</strong> not in the deletion filter. But sometimes this comes with its own trade-offs — and I’ll cover better solutions later, like <a href="https://maltsev.space/blog/009-counting-bloom-filters" rel="nofollow">Counting Bloom Filters</a> and <a href="https://maltsev.space/blog/010-cuckoo-filters" rel="nofollow">Cuckoo Filters</a>.</p> <h3 id="can-it-scale"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#can-it-scale">#</a>Can It Scale?</h3> <p>The second major limitation of standard Bloom filters is their <strong>fixed size</strong>. Once you create a Bloom filter, you can’t resize it on the fly without breaking its mathematical guarantees.</p> <p>Traditional Bloom filters require you to <strong>declare their size upfront</strong> — it’s a bit like booking an apartment based on how many guests you <em>think</em> might show up. This creates the classic “Goldilocks problem”:</p> <ul><li><strong>Underestimated capacity</strong>: You planned for 1M elements but end up with 1.2M? The false positive rate can shoot up to 20% or even higher.</li> <li><strong>Overestimated capacity</strong>: You reserved space for 10M elements but only store 1M? You’re wasting 90% of your allocated memory.</li></ul> <p>The <a href="https://gsd.di.uminho.pt/members/cbm/ps/dbloom.pdf" rel="nofollow">solution</a> — or rather, the workaround — is fairly straightforward: monitor the Bloom filter’s saturation. Once the false positive rate crosses an unacceptable threshold, you simply add another (larger) Bloom filter. To check membership, you query all filters in sequence until you get a match or exhaust them.</p> <h2 id="optimizing-hash-functions"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#optimizing-hash-functions">#</a>Optimizing Hash Functions</h2> <p>As we discussed earlier, the key to an efficient Bloom filter lies in having k independent and uniformly distributed hash functions. The more evenly they spread their outputs across the bit array, the lower the risk of false positives.</p> <p>While this idea is elegant in theory, it’s more complicated in practice — creating and computing many truly independent hash functions can be both conceptually challenging and computationally expensive.</p> <p>Designing good hash functions isn’t something most engineers do every day. Creating a brand new hash function that minimizes collisions and evenly spreads values across the bit array is far from trivial. And Bloom filters typically require at least two hash functions — sometimes even four or more depending on your workload and the nature of the data you’re adding.</p> <p>As you probably noticed in your day-to-day work, we rarely write our own math-heavy algorithms from scratch. Instead, we lean on solid, battle-tested abstractions: hashing libraries, built-in data structures, utility modules, etc. Even if you’re adventurous enough to roll out your own Bloom filter implementation, you probably don’t want to spend weeks designing hash functions from scratch — but you still want decent performance.</p> <p>On top of that, hash computation itself can get expensive, especially if you’re using cryptographic hashes like SHA-256. These functions are overkill for Bloom filters and introduce unnecessary overhead. Faster non-cryptographic hash functions like <strong>MurmurHash</strong> or <strong>xxHash</strong> are much better suited for this use case — but even then, if you naively calculate <em>k</em> separate hashes per element, the cost adds up.</p> <p>Let’s take a look at a simple, naive approach just to set the baseline:</p> <!> <p>At first glance, problem solved: you’re generating multiple hash values by salting your input with different constants. It works, and it’s easy to implement. But this method has an important drawback — you need to compute <em>k</em> separate hashes for every element, which becomes costly for larger <em>k</em> values (say 10 or more) — especially if the hash function itself isn’t cheap.</p> <p>While this approach might be acceptable for use-cases where performance isn’t important, let’s be honest: for such cases, you probably don’t even need a Bloom filter — a plain old <code>Set</code> would do the job just fine.</p> <h3 id="double-hashing-approach"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#double-hashing-approach">#</a>Double Hashing Approach</h3> <p>Luckily, there’s a well-known trick to avoid computing <em>k</em> independent hash functions while still achieving almost the same statistical behavior. This method is often called <strong>double hashing</strong> or <strong>Kirsch-Mitzenmacher optimization</strong>, after the authors who <a href="https://www.eecs.harvard.edu/~michaelm/postscripts/rsa2008.pdf" rel="nofollow">formally analyzed it</a>.</p> <p>The idea is surprisingly simple: instead of calculating <em>k</em> totally independent hashes, you calculate just two independent hash functions, and then combine them to generate the rest.</p> <p>The formula goes like this:</p> <div class="math math-display"><!></div> <p>Where:</p> <ul><li><code>h1(x)</code> and <code>h2(x)</code> are two independent hash functions (or at least two reasonably uncorrelated ones).</li> <li><code>i</code> is the index of the hash function you want (ranging from 0 to k-1).</li> <li>Each resulting value is then typically reduced by modulo <code>m</code> (the bit array size) to map it into the bit array in case it’s larger than the bit array size.</li></ul> <p>In code, it may look something like this:</p> <!> <p>This approach has several nice properties:</p> <ul><li>You only calculate <strong>two</strong> hash functions per inserted element, no matter how many hash functions <em>k</em> you want.</li> <li>You get a whole sequence of hash values that are nicely spread across your bit array.</li> <li>The results are nearly as good as having fully independent hashes, at least for practical Bloom filter usage.</li></ul> <!> <h4 id="why-does-double-hashing-work"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#why-does-double-hashing-work">#</a>Why does Double-Hashing Work?</h4> <p>Without diving too deep into math: Kirsch and Mitzenmacher showed that this sequence of hashes behaves <em>almost</em> like having <em>k</em> independent hashes for the purposes of a Bloom filter. The false-positive rate remains essentially the same, while computational cost is dramatically reduced.</p> <p>This optimization is commonly used in real-world Bloom filter implementations — for example, it’s part of <a href="https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/utils/BloomFilter.java" rel="nofollow">Cassandra’s BloomFilter implementation</a>.</p> <h4 id="but-what-if-h2-is-zero"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#but-what-if-h2-is-zero">#</a>But what if <code>h2</code> is zero?</h4> <p>Yeah… You may have already noticed a potential issue in our formula:</p> <div class="math math-display"><!></div> <p>If <code>h2(x)</code> happens to be zero, all your hashes collapse into the same value:</p> <div class="math math-display"><!></div> <p>How likely is that? Well, it depends, but not impossible.</p> <p>To protect yourself, many implementations include a tiny fix like:</p> <!> <p>This guarantees forward progress: even in the worst case you still generate <code>k</code> distinct bit positions.</p> <h4 id="h2x-and-m-should-be-coprime"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#h2x-and-m-should-be-coprime">#</a><code>h2(x)</code> and <code>m</code> Should Be Coprime</h4> <p>There’s one more sneaky issue that’s often overlooked when using the double hashing formula:</p> <div class="math math-display"><!></div> <p>Everything seems fine… until one day your Bloom filter quietly becomes <em>less random than you expect</em>. This happens when <code>h2(x)</code> and <code>m</code> (the Bloom filter size) are not <strong>coprime</strong>.</p> <div class="callout" data-callout="info" data-collapsible="false"><div class="callout-title"><div class="callout-title-icon" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg></div><div class="callout-title-text">What does “coprime” mean?</div></div><div class="callout-content"><p>Two numbers are coprime if they don’t share any common divisors except 1.
For example:</p><ul><li><code>9</code> and <code>16</code> are coprime.</li> <li><code>6</code> and <code>18</code> are <strong>not</strong> coprime (since they share divisor <code>6</code>).</li></ul></div></div> <p>If <code>h2(x)</code> and <code>m</code> share a common divisor, the sequence of hashes generated</p> <!> <p>will only cover part of the bit array. In other words: <strong>you won’t reach all possible bit positions</strong>.</p> <p>This leads to: fewer unique bits set → more collisions → higher false-positive rates → sad stakeholders.</p> <p>Let’s say you have:</p> <ul><li><code>m = 10</code></li> <li><code>h1(x) = 2</code></li> <li><code>h2(x) = 4</code> (notice that both <code>4</code> and <code>10</code> share divisor <code>2</code>)</li></ul> <p>Now calculate the hashes:</p> <!> <p>You never touch bit positions <code>1, 3, 5, 7, 9</code> — half of your bit array is completely unused!</p> <p>Ideally, choose <code>m</code> to be a <strong>prime number</strong> — then any <code>h2(x)</code> is automatically coprime with <code>m</code> (except if <code>h2(x) = 0</code> which we already handled earlier).</p> <p>Or, when <code>m</code> is not prime, ensure that your hash function produces <code>h2(x)</code> values that are statistically unlikely to share factors with <code>m</code>. A simple safety net is to force <code>h2(x)</code> to always be odd:</p> <!> <p>This avoids most practical problems if <code>m</code> is a power of two (which is very common for bit arrays).</p> <p>Let’s walk through a small example where things work exactly as intended:</p> <ul><li><code>m = 10</code></li> <li><code>h1(x) = 2</code></li> <li><code>h2(x) = 7</code> (notice that <code>7</code> and <code>10</code> are coprime (they share no divisors except <code>1</code>)</li></ul> <p>Hash values be like that:</p> <!> <p>Full cycle, no repeats — the bit array is fully covered.</p> <h3 id="wide-hash-split"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#wide-hash-split">#</a>Wide Hash Split</h3> <p>There’s another technique that sometimes gets used, especially in high-performance Bloom filters - wide hash split. A good example is <a href="https://github.com/google/guava/blob/master/guava/src/com/google/common/hash/BloomFilterStrategies.java" rel="nofollow">Google Guava</a>, where it works nicely alongside the double hashing approach.</p> <p>The core idea is also simple - instead of generating multiple completely separate hash values, you generate <strong>one wide hash output</strong> (e.g. 128 or 256 bits), and then split it into multiple pieces to simulate multiple hash functions.</p> <!> <h4 id="why-does-hash-split-work"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#why-does-hash-split-work">#</a>Why does hash split work?</h4> <p>Good hash functions like <strong>MurmurHash3 128-bit</strong>, <strong>CityHash128</strong>, or <strong>xxHash3 128-bit</strong> are designed to spread randomness across all bits, i.e. have avalanche effect, when small input changes drastically alter all output bits. So, the upper bits are just as random as the lower bits.</p> <p>Of course, like everything in Bloom filters — no free lunch:</p> <ul><li>The resulting hashes are <strong>not truly independent</strong>, just decorrelated, i.e. different enough. This may theoretically increase false positives slightly if your input data is highly correlated and the hash function doesn’t have good avalanche effect.</li> <li>You’re limited by how many slices you can get — e.g., 128-bit hash gives you at most 4×32-bit slices (or more if you slice into smaller chunks).</li></ul> <h3 id="recap"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#recap">#</a>Recap</h3> <table><thead><tr><th>Method</th><th># of Hash Calls</th><th>Speed</th><th>Independence</th></tr></thead><tbody><tr><td>k hashes</td><td>k</td><td>Slow</td><td>True</td></tr><tr><td>Double hashing</td><td>2</td><td>Fast</td><td>Almost</td></tr><tr><td>Wide hash split</td><td>1</td><td>Even faster</td><td>Almost</td></tr></tbody></table> <h2 id="how-to-calculate-parameters"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#how-to-calculate-parameters">#</a>How to Calculate Parameters</h2> <p>Strictly speaking, this section should be at the very beginning — but I didn’t want to scare you away with formulas too early. Since you’re still here, let’s finally dive into how to properly configure your Bloom filter.</p> <p>Some of the parameters you’ve already met, but let’s quickly recap:</p> <ol><li><strong>m</strong> — the size of the bit array (in bits)</li> <li><strong>n</strong> — the expected number of inserted elements</li> <li><strong>k</strong> — the number of hash functions and bit positions to set</li> <li><strong>p</strong> — the false positive probability (also called <strong>FPP</strong>)</li></ol> <p>These parameters are tightly interconnected — changing one affects the others, leading to trade-offs between memory usage, query speed, and accuracy.</p> <h3 id="the-false-positive-rate"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#the-false-positive-rate">#</a>The False Positive Rate</h3> <p>The false positive rate is arguably the most important characteristic of a Bloom filter. It represents the probability that the filter incorrectly reports an element as present when it actually isn’t. The theoretical false positive probability can be approximated by:</p> <div class="math math-display"><!></div> <p>Where once again:</p> <ul><li><code>p</code> is the false positive probability</li> <li><code>k</code> is the number of hash functions and bit positions to set</li> <li><code>n</code> is the number of inserted elements</li> <li><code>m</code> is the size of the bit array</li></ul> <div class="callout" data-callout="warning" data-collapsible="false"><div class="callout-title"><div class="callout-title-icon" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path><line x1="12" y1="9" x2="12" y2="13"></line><line x1="12" y1="17" x2="12.01" y2="17"></line></svg></div><div class="callout-title-text">Warning</div></div><div class="callout-content"><p>It’s worth noting that this formula is an approximation. According to <a href="https://cglab.ca/~morin/publications/ds/bloom-submitted.pdf" rel="nofollow">detailed mathematical analysis</a>, the actual false positive rate is strictly larger than this approximation for any k ≥ 2.</p></div></div> <h3 id="how-parameters-affect-performance"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#how-parameters-affect-performance">#</a>How Parameters Affect Performance</h3> <h4 id="memory-usage"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#memory-usage">#</a>Memory Usage</h4> <p>The memory usage of a Bloom filter is directly proportional to <code>m</code>. This is one of its key strengths — excellent space efficiency compared to hash tables or sets.</p> <p>For <a href="https://valkey.io/blog/introducing-bloom-filters/" rel="nofollow">example</a>, let’s say you want to maintain 500 Bloom filters, each capable of holding 5 million elements. The total memory depends heavily on your target false positive rate:</p> <table><thead><tr><th>False Positive Rate</th><th>Total Memory</th><th>Memory Savings vs SET</th></tr></thead><tbody><tr><td>0.01 (1 in 100)</td><td>2.9 GB</td><td>98.08% saved</td></tr><tr><td>0.001 (1 in 1,000)</td><td>4.9 GB</td><td>96.80% saved</td></tr><tr><td>0.00001 (1 in 100,000)</td><td>7.8 GB</td><td>94.88% saved</td></tr></tbody></table> <h4 id="query-performance"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#query-performance">#</a>Query Performance</h4> <p>Both insertions and lookups require computing <code>k</code> hash functions and updating or reading <code>k</code> bits. Therefore, both operations have time complexity <code>O(k)</code>, assuming that hash function is some constant time operation. Since <code>k</code> is typically small (usually between 5 and 12), Bloom filters are extremely fast for membership checks, regardless of how many elements they contain.</p> <h3 id="calculating-optimal-parameters"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#calculating-optimal-parameters">#</a>Calculating Optimal Parameters</h3> <h4 id="optimal-size-m"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#optimal-size-m">#</a>Optimal Size (m)</h4> <p>If you know the expected number of elements (<code>n</code>) and your target false positive probability (<code>p</code>), you can compute the optimal size of the bit array as:</p> <div class="math math-display"><!></div> <p>Or approximately:</p> <div class="math math-display"><!></div> <h4 id="optimal-number-of-hash-functions-k"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#optimal-number-of-hash-functions-k">#</a>Optimal Number of Hash Functions (k)</h4> <p>Once you have <code>m</code>, you can compute the optimal number of hash functions:</p> <div class="math math-display"><!></div> <p>Or approximately:</p> <div class="math math-display"><!></div> <p>Choosing this optimal <code>k</code> minimizes the false positive rate for your selected <code>m</code> and <code>n</code>.</p> <h3 id="examples-with-calculations"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#examples-with-calculations">#</a>Examples With Calculations</h3> <h4 id="example-1-calculating-size-and-hash-functions"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#example-1-calculating-size-and-hash-functions">#</a>Example 1: Calculating Size and Hash Functions</h4> <p>Given:</p> <ul><li><code>n = 100,000</code> (expected elements)</li> <li><code>p = 0.01</code> (1% false positive rate)</li></ul> <p>Calculate <code>m</code>:</p> <!> <p>Calculate <code>k</code>:</p> <!> <h4 id="example-2-calculating-false-positive-rate"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#example-2-calculating-false-positive-rate">#</a>Example 2: Calculating False Positive Rate</h4> <p>Given:</p> <ul><li><code>n = 100</code> (elements)</li> <li><code>m = 1,000</code> (bits)</li> <li><code>k = 4</code> (hash functions)</li></ul> <p>Calculate <code>p</code>:</p> <!> <p>So the false positive rate is approximately <strong>1.18%</strong>.</p> <h3 id="play-with-the-numbers"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#play-with-the-numbers">#</a>Play With The Numbers</h3> <p>If you’re getting bored (or dizzy) with all these formulas — don’t worry. Instead of torturing your brain, let’s just throw your numbers into the calculator below and let it crunch everything for you.</p> <p>After all, you’re sitting right next to one of the most advanced calculators humanity ever built — <strong>for Christ’s sake, let it do the math.</strong></p> <!> <h2 id="wrapping-up"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#wrapping-up">#</a>Wrapping Up</h2> <p>Every time I revisit Bloom filters, I’m reminded why computer science so often feels like magic. A simple structure — just a bit array and a handful of hash functions — yet it dances gracefully with probability to solve problems that could easily swallow gigabytes of memory if approached naively.</p> <p>And yet — this is only the beginning.</p> <p>As we move forward, we’ll see how this beautifully simple idea can be stretched, twisted, and extended to take on even bigger challenges.</p> <p>See you in the next parts — things are about to get even more interesting.</p>`,1);function ke(i){var a=me(),n=s(ss(a),28);e(n,()=>`<pre class="mermaid">graph TD
    A["Element: 'apple'"] --> B["Hash Function 1<br/>h1('apple') = 3"]
    A --> C["Hash Function 2<br/>h2('apple') = 8"]  
    A --> D["Hash Function 3<br/>h3('apple') = 14"]
    
    B --> E["Bit Array Position 3"]
    C --> F["Bit Array Position 8"]
    D --> G["Bit Array Position 14"]
    
    E --> H["Set bit[3] = 1"]
    F --> I["Set bit[8] = 1"] 
    G --> J["Set bit[14] = 1"]
    
    H --> K["Bit Array:<br/>[0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0]"]
    I --> K
    J --> K
    
    style A fill:#5d5fef,color:#f8f9fa
    style K fill:#22d3ee,color:#212529</pre>`);var p=s(n,6);e(p,()=>`<pre class="mermaid">graph TD
    A["Query: 'banana'"] --> B["Hash Function 1<br/>h1('banana') = 3"]
    A --> C["Hash Function 2<br/>h2('banana') = 7"]  
    A --> D["Hash Function 3<br/>h3('banana') = 14"]
    
    B --> E["Check bit[3]<br/>Result: 1 ✓"]
    C --> F["Check bit[7]<br/>Result: 0 ✗"]
    D --> G["Check bit[14]<br/>Result: 1 ✓"]
    
    E --> H["Current Bit Array:<br/>[0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0]"]
    F --> H
    G --> H
    
    H --> I{"All bits = 1?"}
    I -->|"No, bit[7] = 0"| J["DEFINITELY NOT in set<br/>(No false negative)"]
    
    style A fill:#5d5fef,color:#f8f9fa
    style J fill:#dc2626,color:#f8f9fa
    style I fill:#f59e0b,color:#212529</pre>`);var l=s(p,4);e(l,()=>`<pre class="mermaid">graph TD
    A["Query: 'cherry'"] --> B["Hash Function 1<br/>h1('cherry') = 3"]
    A --> C["Hash Function 2<br/>h2('cherry') = 8"]  
    A --> D["Hash Function 3<br/>h3('cherry') = 14"]
    
    B --> E["Check bit[3]<br/>Result: 1 ✓"]
    C --> F["Check bit[8]<br/>Result: 1 ✓"]
    D --> G["Check bit[14]<br/>Result: 1 ✓"]
    
    E --> H["Current Bit Array:<br/>[0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0]"]
    F --> H
    G --> H
    
    H --> I{"All bits = 1?"}
    I -->|"Yes, all = 1"| J["POSSIBLY in set<br/>(Could be false positive)"]
    
    K["Note: 'cherry' was never inserted!<br/>But its hash positions match<br/>bits set by previous elements"]
    K -.-> J
    
    style A fill:#5d5fef,color:#f8f9fa
    style J fill:#fde047,color:#212529
    style I fill:#f59e0b,color:#212529
    style K fill:#d97706,color:#f8f9fa</pre>`);var d=s(l,18);pe(d,{});var c=s(d,20);e(c,()=>`<pre class="mermaid">graph TD
    A["Alice moves in"] --> A1["Gets keys to rooms:<br/>3, 7, 12"]
    B["Bob moves in"] --> B1["Gets keys to rooms:<br/>7, 15, 23"]
    
    A1 --> R["Room occupancy:<br/>Room 3: Alice<br/>Room 7: Alice + Bob<br/>Room 12: Alice<br/>Room 15: Bob<br/>Room 23: Bob"]
    B1 --> R
    
    R --> D["Alice moves out<br/>(Naive deletion)"]
    D --> D1["Turn off lights in<br/>rooms 3, 7, 12"]
    
    D1 --> P["Problem: Room 7 light<br/>is turned off but<br/>Bob still needs it!"]
    
    P --> Q["Next query: 'Is Bob here?'<br/>Checks rooms 7, 15, 23<br/>Room 7 is dark (0)<br/>Answer: NO"]
    
    Q --> F["FALSE NEGATIVE<br/>Bob never left!"]
    
    style A fill:#22d3ee,color:#212529
    style B fill:#22d3ee,color:#212529
    style D fill:#dc2626,color:#f8f9fa
    style F fill:#dc2626,color:#f8f9fa
    style P fill:#f59e0b,color:#212529</pre>`);var k=s(c,28);e(k,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">val</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> h1 </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> hash_function_1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">data</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">val</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> h2 </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> hash_function_2</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">data</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">..</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">val</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> hk </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> hash_function_k</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">data</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>`);var m=s(k,14),h=r(m);e(h,()=>'<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mtext>position</mtext><mi>i</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msub><mi>h</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>i</mi><mo>⋅</mo><msub><mi>h</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">\\text{position}_i(x) = (h_1(x) + i \\cdot h_2(x)) \\bmod m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord text"><span class="mord">position</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2175em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span></span>'),o(m);var y=s(m,8);e(y,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">val</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> h1 </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> hash1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">data</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">val</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> h2 </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> hash2</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">data</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">for</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583">in</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> until k) &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    val</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> position </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (h1 </span><span style="color:#D73A49;--shiki-dark:#F97583">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="color:#D73A49;--shiki-dark:#F97583">*</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> h2) </span><span style="color:#D73A49;--shiki-dark:#F97583">%</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> m</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    setBit</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(position)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span>
<span class="line"></span></code></pre>`);var E=s(y,6);e(E,()=>`<pre class="mermaid">graph LR
    A["Element: 'data'"] --> B["h1('data') = 5"]
    A --> C["h2('data') = 3"]
    
    B --> D["position_0 = (5 + 0×3) % 16 = 5"]
    B --> E["position_1 = (5 + 1×3) % 16 = 8"]  
    B --> F["position_2 = (5 + 2×3) % 16 = 11"]
    B --> G["position_3 = (5 + 3×3) % 16 = 14"]
    
    C --> D
    C --> E
    C --> F
    C --> G
    
    D --> H["Set bits: 5, 8, 11, 14"]
    E --> H
    F --> H
    G --> H
    
    style A fill:#5d5fef,color:#f8f9fa
    style B fill:#495057,color:#f8f9fa
    style C fill:#495057,color:#f8f9fa
    style H fill:#22d3ee,color:#212529</pre>`);var g=s(E,12),B=r(g);e(B,()=>'<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mtext>position</mtext><mi>i</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msub><mi>h</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>i</mi><mo>⋅</mo><msub><mi>h</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">\\text{position}_i(x) = (h_1(x) + i \\cdot h_2(x)) \\bmod m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord text"><span class="mord">position</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2175em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span></span>'),o(g);var F=s(g,4),_=r(F);e(_,()=>'<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mtext>position</mtext><mi>i</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msub><mi>h</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>i</mi><mo>⋅</mo><mn>0</mn><mo stretchy="false">)</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>m</mi><mo>=</mo><msub><mi>h</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">\\text{position}_i(x) = (h_1(x) + i \\cdot 0) \\bmod m = h_1(x) \\bmod m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord text"><span class="mord">position</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2175em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span></span>'),o(F);var T=s(F,6);e(T,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (h2 </span><span style="color:#D73A49;--shiki-dark:#F97583">==</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    h2 </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var x=s(T,8),w=r(x);e(w,()=>'<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mtext>position</mtext><mi>i</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msub><mi>h</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>i</mi><mo>⋅</mo><msub><mi>h</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">\\text{position}_i(x) = (h_1(x) + i \\cdot h_2(x)) \\bmod m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord text"><span class="mord">position</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2175em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span></span>'),o(x);var H=s(x,8);e(H,()=>'<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span>h1(x), h1(x) + h2(x), h1(x) + 2*h2(x), ...</span></span></code></pre>');var W=s(H,12);e(W,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span>(2 + 0*4) % 10 → 2  </span></span>
<span class="line"><span>(2 + 1*4) % 10 → 6  </span></span>
<span class="line"><span>(2 + 2*4) % 10 → 0  </span></span>
<span class="line"><span>(2 + 3*4) % 10 → 4  </span></span>
<span class="line"><span>(2 + 4*4) % 10 → 8  </span></span>
<span class="line"><span>(2 + 5*4) % 10 → 2  (cycle repeats)</span></span></code></pre>`);var X=s(W,8);e(X,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (h2 </span><span style="color:#D73A49;--shiki-dark:#F97583">%</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="color:#D73A49;--shiki-dark:#F97583"> ==</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    h2 </span><span style="color:#D73A49;--shiki-dark:#F97583">+=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var N=s(X,10);e(N,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span>(2 + 0*7) % 10 → 2  </span></span>
<span class="line"><span>(2 + 1*7) % 10 → 9  </span></span>
<span class="line"><span>(2 + 2*7) % 10 → 6  </span></span>
<span class="line"><span>(2 + 3*7) % 10 → 3  </span></span>
<span class="line"><span>(2 + 4*7) % 10 → 0  </span></span>
<span class="line"><span>(2 + 5*7) % 10 → 7  </span></span>
<span class="line"><span>(2 + 6*7) % 10 → 4  </span></span>
<span class="line"><span>(2 + 7*7) % 10 → 1  </span></span>
<span class="line"><span>(2 + 8*7) % 10 → 8  </span></span>
<span class="line"><span>(2 + 9*7) % 10 → 5</span></span></code></pre>`);var Y=s(N,10);e(Y,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">val</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> wideHash </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> hash128</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">data</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">val</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> h1 </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (wideHash shr </span><span style="color:#005CC5;--shiki-dark:#79B8FF">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)  </span><span style="color:#D73A49;--shiki-dark:#F97583">%</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> m </span><span style="color:#6A737D;--shiki-dark:#6A737D">// or apply mask, if m is a power of two</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">val</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> h2 </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (wideHash shr </span><span style="color:#005CC5;--shiki-dark:#79B8FF">16</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">%</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> m</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">val</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> h3 </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (wideHash shr </span><span style="color:#005CC5;--shiki-dark:#79B8FF">32</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">%</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> m</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">val</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> h4 </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (wideHash shr </span><span style="color:#005CC5;--shiki-dark:#79B8FF">48</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">%</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> m</span></span></code></pre>`);var G=s(Y,28),K=r(G);e(K,()=>'<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>p</mi><mo>=</mo><msup><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>k</mi><mi>n</mi><mi mathvariant="normal">/</mi><mi>m</mi></mrow></msup><mo fence="true">)</mo></mrow><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">p = \\left(1 - e^{-kn/m}\\right)^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.039em;vertical-align:-0.65em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">kn</span><span class="mord mtight">/</span><span class="mord mathnormal mtight">m</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.389em;"><span style="top:-3.6029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span></span>'),o(G);var j=s(G,28),Z=r(j);e(Z,()=>'<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>m</mi><mo>=</mo><mo>−</mo><mfrac><mrow><mi>n</mi><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><mrow><mo stretchy="false">(</mo><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">m = -\\frac{n \\ln(p)}{(\\ln(2))^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mop">ln</span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">ln</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>'),o(j);var V=s(j,4),Q=r(V);e(Q,()=>'<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>m</mi><mo>≈</mo><mo>−</mo><mi>n</mi><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>⋅</mo><mn>2.08</mn></mrow><annotation encoding="application/x-tex">m \\approx -n \\ln(p) \\cdot 2.08</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4831em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">ln</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2.08</span></span></span></span></span>'),o(V);var P=s(V,6),U=r(P);e(U,()=>'<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>k</mi><mo>=</mo><mfrac><mi>m</mi><mi>n</mi></mfrac><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k = \\frac{m}{n} \\ln(2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">ln</span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span>'),o(P);var M=s(P,4),es=r(M);e(es,()=>'<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>k</mi><mo>≈</mo><mfrac><mi>m</mi><mi>n</mi></mfrac><mo>⋅</mo><mn>0.693</mn></mrow><annotation encoding="application/x-tex">k \\approx \\frac{m}{n} \\cdot 0.693</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.693</span></span></span></span></span>'),o(M);var as=s(M,14);e(as,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span>m = -(n * ln(p)) / (ln(2))^2</span></span>
<span class="line"><span>  = -(100,000 * ln(0.01)) / (ln(2))^2</span></span>
<span class="line"><span>  = -(100,000 * (-4.6052)) / (0.4809)</span></span>
<span class="line"><span>  ≈ 958,506 bits (≈ 117 KiB)</span></span></code></pre>`);var ls=s(as,4);e(ls,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span>k = (m / n) * ln(2)</span></span>
<span class="line"><span>  = (958,506 / 100,000) * 0.693</span></span>
<span class="line"><span>  ≈ 6.64 (≈ 7 hash functions)</span></span></code></pre>`);var ts=s(ls,10);e(ts,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span>p = (1 - e^(-k * n / m))^k</span></span>
<span class="line"><span>  = (1 - e^(-4 * 100 / 1000))^4</span></span>
<span class="line"><span>  = (1 - e^(-0.4))^4</span></span>
<span class="line"><span>  = (1 - 0.6703)^4</span></span>
<span class="line"><span>  = (0.3297)^4</span></span>
<span class="line"><span>  ≈ 0.0118</span></span></code></pre>`);var cs=s(ts,10);de(cs,{}),z(10),f(i,a)}const ye=Object.freeze(Object.defineProperty({__proto__:null,default:ke,metadata:ra},Symbol.toStringTag,{value:"Module"})),pa={date:"2025-06-24",tags:["Algorithms"],keywords:["Bloom filters","Probabilistic data structures","Counting Bloom filters"],title:"Grokking Bloom Filters: Counting Bloom Filter",preview:"Bloom filters can't remove elements — unless you let them count.",series:"Grokking Bloom Filters",draft:!1,hero:"/images/blog/009-counting-bloom-filters/hero.jpg",links:["https://maltsev.space/blog/008-bloom-filters-pt1","#why-deletion-is-hard","#easy-workarounds-that-actually-dont-work","#rebuilding-the-filter","#using-a-tombstone-filter","#counting-bloom-filters","#how-counting-bloom-filters-work","#handling-counter-overflow-and-underflow","#removing-a-non-existent-element","#is-it-worth-it","#d-left-counting-bloom-filter","#core-idea","#why-d-left","#insertion","#deletion","#membership-check","#about-permutations-two-phase-hashing","#moving-forward","https://www.cs.princeton.edu/courses/archive/spr05/cos598E/bib/p254-fan.pdf","https://people.eecs.berkeley.edu/~sylvia/cs268-2014/papers/countingbloom.pdf","https://maltsev.space/blog/010-cuckoo-filters"],readingTime:{text:"13 min read",minutes:12.265,time:735900,words:2453}},{date:yn,tags:En,keywords:un,title:gn,preview:fn,series:bn,draft:Fn,hero:xn,links:vn,readingTime:wn}=pa;var Ee=Vs(`<svg xmlns="http://www.w3.org/2000/svg" width="672" height="208" class="svgbob"><style>.svgbob line, .svgbob path, .svgbob circle, .svgbob rect, .svgbob polygon {
  stroke: black;
  stroke-width: 2;
  stroke-opacity: 1;
  fill-opacity: 1;
  stroke-linecap: round;
  stroke-linejoin: miter;
}

.svgbob text {
  white-space: pre;
  fill: black;
  font-family: Iosevka Fixed, monospace;
  font-size: 14px;
}

.svgbob rect.backdrop {
  stroke: none;
  fill: transparent;
}

.svgbob .broken {
  stroke-dasharray: 8;
}

.svgbob .filled {
  fill: black;
}

.svgbob .bg_filled {
  fill: transparent;
  stroke-width: 1;
}

.svgbob .nofill {
  fill: transparent;
}

.svgbob .end_marked_arrow {
  marker-end: url(#arrow);
}

.svgbob .start_marked_arrow {
  marker-start: url(#arrow);
}

.svgbob .end_marked_diamond {
  marker-end: url(#diamond);
}

.svgbob .start_marked_diamond {
  marker-start: url(#diamond);
}

.svgbob .end_marked_circle {
  marker-end: url(#circle);
}

.svgbob .start_marked_circle {
  marker-start: url(#circle);
}

.svgbob .end_marked_open_circle {
  marker-end: url(#open_circle);
}

.svgbob .start_marked_open_circle {
  marker-start: url(#open_circle);
}

.svgbob .end_marked_big_open_circle {
  marker-end: url(#big_open_circle);
}

.svgbob .start_marked_big_open_circle {
  marker-start: url(#big_open_circle);
}</style><defs><marker id="arrow" viewBox="-2 -2 8 8" refX="4" refY="2" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><polygon points="0,0 0,4 4,2 0,0"></polygon></marker><marker id="diamond" viewBox="-2 -2 8 8" refX="4" refY="2" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><polygon points="0,2 2,0 4,2 2,4 0,2"></polygon></marker><marker id="circle" viewBox="0 0 8 8" refX="4" refY="4" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><circle cx="4" cy="4" r="2" class="filled"></circle></marker><marker id="open_circle" viewBox="0 0 8 8" refX="4" refY="4" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><circle cx="4" cy="4" r="2" class="bg_filled"></circle></marker><marker id="big_open_circle" viewBox="0 0 8 8" refX="4" refY="4" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><circle cx="4" cy="4" r="3" class="bg_filled"></circle></marker></defs><rect class="backdrop" x="0" y="0" width="672" height="208"></rect><text x="2" y="12">Classic</text><text x="66" y="12">Bloom</text><text x="114" y="12">Filter</text><path d="M 176,0 A 16,16 0,0,0 176,16" class="nofill"></path><text x="178" y="12">1</text><line x1="184" y1="8" x2="192" y2="8" class="solid"></line><text x="194" y="12">bit</text><text x="10" y="44">0</text><text x="26" y="44">0</text><text x="42" y="44">1</text><text x="58" y="44">0</text><text x="74" y="44">0</text><text x="90" y="44">1</text><text x="106" y="44">0</text><text x="122" y="44">1</text><text x="138" y="44">1</text><text x="154" y="44">0</text><text x="10" y="76">0</text><text x="26" y="76">1</text><text x="42" y="76">2</text><text x="58" y="76">3</text><text x="74" y="76">4</text><text x="90" y="76">5</text><text x="106" y="76">6</text><text x="122" y="76">7</text><text x="138" y="76">8</text><text x="154" y="76">9</text><text x="226" y="12">array</text><path d="M 264,0 A 16,16 0,0,1 264,16" class="nofill"></path><text x="274" y="12">:</text><text x="186" y="44">←</text><text x="202" y="44">each</text><text x="242" y="44">cell</text><line x1="280" y1="38" x2="288" y2="38" class="solid"></line><line x1="280" y1="42" x2="288" y2="42" class="solid"></line><text x="298" y="44">1</text><text x="314" y="44">bit</text><text x="2" y="108">Counting</text><text x="74" y="108">Bloom</text><text x="122" y="108">Filter</text><path d="M 184,96 A 16,16 0,0,0 184,112" class="nofill"></path><text x="186" y="108">4</text><line x1="192" y1="104" x2="200" y2="104" class="solid"></line><text x="202" y="108">bit</text><text x="234" y="108">counters</text><path d="M 296,96 A 16,16 0,0,1 296,112" class="nofill"></path><text x="306" y="108">:</text><text x="26" y="140">0</text><text x="74" y="140">1</text><text x="122" y="140">0</text><text x="170" y="140">0</text><text x="218" y="140">2</text><text x="266" y="140">0</text><text x="314" y="140">1</text><text x="362" y="140">1</text><text x="410" y="140">0</text><text x="458" y="140">1</text><text x="10" y="156">0000</text><text x="58" y="156">0001</text><text x="106" y="156">0000</text><text x="154" y="156">0000</text><text x="202" y="156">0010</text><text x="250" y="156">0000</text><text x="298" y="156">0001</text><text x="346" y="156">0001</text><text x="394" y="156">0000</text><text x="442" y="156">0001</text><text x="26" y="188">0</text><text x="74" y="188">1</text><text x="122" y="188">2</text><text x="170" y="188">3</text><text x="218" y="188">4</text><text x="266" y="188">5</text><text x="314" y="188">6</text><text x="362" y="188">7</text><text x="410" y="188">8</text><text x="458" y="188">9</text><text x="506" y="156">←</text><text x="522" y="156">each</text><text x="562" y="156">cell</text><line x1="600" y1="150" x2="608" y2="150" class="solid"></line><line x1="600" y1="154" x2="608" y2="154" class="solid"></line><text x="618" y="156">4</text><text x="634" y="156">bits</text><g><line x1="4" y1="24" x2="164" y2="24" class="solid"></line><line x1="4" y1="24" x2="4" y2="56" class="solid"></line><line x1="20" y1="24" x2="20" y2="56" class="solid"></line><line x1="36" y1="24" x2="36" y2="56" class="solid"></line><line x1="52" y1="24" x2="52" y2="56" class="solid"></line><line x1="68" y1="24" x2="68" y2="56" class="solid"></line><line x1="84" y1="24" x2="84" y2="56" class="solid"></line><line x1="100" y1="24" x2="100" y2="56" class="solid"></line><line x1="116" y1="24" x2="116" y2="56" class="solid"></line><line x1="132" y1="24" x2="132" y2="56" class="solid"></line><line x1="148" y1="24" x2="148" y2="56" class="solid"></line><line x1="164" y1="24" x2="164" y2="56" class="solid"></line><line x1="4" y1="56" x2="164" y2="56" class="solid"></line></g><g><line x1="4" y1="120" x2="484" y2="120" class="solid"></line><line x1="4" y1="120" x2="4" y2="168" class="solid"></line><line x1="52" y1="120" x2="52" y2="168" class="solid"></line><line x1="100" y1="120" x2="100" y2="168" class="solid"></line><line x1="148" y1="120" x2="148" y2="168" class="solid"></line><line x1="196" y1="120" x2="196" y2="168" class="solid"></line><line x1="244" y1="120" x2="244" y2="168" class="solid"></line><line x1="292" y1="120" x2="292" y2="168" class="solid"></line><line x1="340" y1="120" x2="340" y2="168" class="solid"></line><line x1="388" y1="120" x2="388" y2="168" class="solid"></line><line x1="436" y1="120" x2="436" y2="168" class="solid"></line><line x1="484" y1="120" x2="484" y2="168" class="solid"></line><line x1="4" y1="168" x2="484" y2="168" class="solid"></line></g></svg>`),ue=Vs(`<svg xmlns="http://www.w3.org/2000/svg" width="552" height="480" class="svgbob"><style>.svgbob line, .svgbob path, .svgbob circle, .svgbob rect, .svgbob polygon {
  stroke: black;
  stroke-width: 2;
  stroke-opacity: 1;
  fill-opacity: 1;
  stroke-linecap: round;
  stroke-linejoin: miter;
}

.svgbob text {
  white-space: pre;
  fill: black;
  font-family: Iosevka Fixed, monospace;
  font-size: 14px;
}

.svgbob rect.backdrop {
  stroke: none;
  fill: transparent;
}

.svgbob .broken {
  stroke-dasharray: 8;
}

.svgbob .filled {
  fill: black;
}

.svgbob .bg_filled {
  fill: transparent;
  stroke-width: 1;
}

.svgbob .nofill {
  fill: transparent;
}

.svgbob .end_marked_arrow {
  marker-end: url(#arrow);
}

.svgbob .start_marked_arrow {
  marker-start: url(#arrow);
}

.svgbob .end_marked_diamond {
  marker-end: url(#diamond);
}

.svgbob .start_marked_diamond {
  marker-start: url(#diamond);
}

.svgbob .end_marked_circle {
  marker-end: url(#circle);
}

.svgbob .start_marked_circle {
  marker-start: url(#circle);
}

.svgbob .end_marked_open_circle {
  marker-end: url(#open_circle);
}

.svgbob .start_marked_open_circle {
  marker-start: url(#open_circle);
}

.svgbob .end_marked_big_open_circle {
  marker-end: url(#big_open_circle);
}

.svgbob .start_marked_big_open_circle {
  marker-start: url(#big_open_circle);
}</style><defs><marker id="arrow" viewBox="-2 -2 8 8" refX="4" refY="2" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><polygon points="0,0 0,4 4,2 0,0"></polygon></marker><marker id="diamond" viewBox="-2 -2 8 8" refX="4" refY="2" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><polygon points="0,2 2,0 4,2 2,4 0,2"></polygon></marker><marker id="circle" viewBox="0 0 8 8" refX="4" refY="4" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><circle cx="4" cy="4" r="2" class="filled"></circle></marker><marker id="open_circle" viewBox="0 0 8 8" refX="4" refY="4" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><circle cx="4" cy="4" r="2" class="bg_filled"></circle></marker><marker id="big_open_circle" viewBox="0 0 8 8" refX="4" refY="4" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><circle cx="4" cy="4" r="3" class="bg_filled"></circle></marker></defs><rect class="backdrop" x="0" y="0" width="552" height="480"></rect><text x="98" y="12">d</text><line x1="104" y1="8" x2="112" y2="8" class="solid"></line><text x="114" y="12">left</text><text x="154" y="12">Counting</text><text x="226" y="12">Bloom</text><text x="274" y="12">Filter</text><text x="330" y="12">Memory</text><text x="386" y="12">Layout</text><path d="M 136,16 A 16,16 0,0,0 136,32" class="nofill"></path><text x="138" y="28">d</text><line x1="144" y1="22" x2="152" y2="22" class="solid"></line><line x1="144" y1="26" x2="152" y2="26" class="solid"></line><text x="154" y="28">2</text><text x="170" y="28">subtables,</text><text x="258" y="28">B</text><line x1="264" y1="22" x2="272" y2="22" class="solid"></line><line x1="264" y1="26" x2="272" y2="26" class="solid"></line><text x="274" y="28">4</text><text x="290" y="28">buckets</text><text x="354" y="28">each</text><path d="M 384,16 A 16,16 0,0,1 384,32" class="nofill"></path><text x="18" y="60">Subtable</text><text x="90" y="60">0:</text><text x="34" y="92">Bucket</text><text x="90" y="92">0</text><text x="42" y="124">fp:0xA2C</text><text x="122" y="124">fp:0x7F1</text><text x="210" y="124">...</text><text x="42" y="140">cnt:</text><text x="82" y="140">1</text><text x="122" y="140">cnt:</text><text x="162" y="140">2</text><text x="34" y="188">Bucket</text><text x="90" y="188">1</text><text x="42" y="220">fp:0x5B8</text><text x="138" y="220">empty</text><text x="210" y="220">...</text><text x="42" y="236">cnt:</text><text x="82" y="236">1</text><text x="34" y="284">Bucket</text><text x="90" y="284">2</text><text x="58" y="316">empty</text><text x="138" y="316">empty</text><text x="210" y="316">...</text><text x="34" y="380">Bucket</text><text x="90" y="380">3</text><text x="42" y="412">fp:0x8E6</text><text x="138" y="412">empty</text><text x="210" y="412">...</text><text x="42" y="428">cnt:</text><text x="82" y="428">2</text><text x="314" y="60">Subtable</text><text x="386" y="60">1:</text><text x="314" y="92">Bucket</text><text x="370" y="92">0</text><text x="322" y="124">fp:0x3E9</text><text x="418" y="124">empty</text><text x="490" y="124">...</text><text x="322" y="140">cnt:</text><text x="362" y="140">1</text><text x="314" y="188">Bucket</text><text x="370" y="188">1</text><text x="322" y="220">fp:0x9D4</text><text x="402" y="220">fp:0x1C7</text><text x="490" y="220">...</text><text x="322" y="236">cnt:</text><text x="362" y="236">3</text><text x="402" y="236">cnt:</text><text x="442" y="236">1</text><text x="314" y="284">Bucket</text><text x="370" y="284">2</text><text x="322" y="316">fp:0x6A1</text><text x="418" y="316">empty</text><text x="490" y="316">...</text><text x="322" y="332">cnt:</text><text x="362" y="332">1</text><text x="314" y="380">Bucket</text><text x="370" y="380">3</text><text x="338" y="412">empty</text><text x="418" y="412">empty</text><text x="490" y="412">...</text><g><line x1="20" y1="72" x2="260" y2="72" class="solid"></line><line x1="20" y1="72" x2="20" y2="456" class="solid"></line><line x1="260" y1="72" x2="260" y2="456" class="solid"></line><line x1="20" y1="168" x2="260" y2="168" class="solid"></line><line x1="20" y1="264" x2="260" y2="264" class="solid"></line><line x1="20" y1="360" x2="260" y2="360" class="solid"></line><line x1="20" y1="456" x2="260" y2="456" class="solid"></line></g><g><line x1="36" y1="104" x2="244" y2="104" class="solid"></line><line x1="36" y1="104" x2="36" y2="152" class="solid"></line><line x1="116" y1="104" x2="116" y2="152" class="solid"></line><line x1="196" y1="104" x2="196" y2="152" class="solid"></line><line x1="244" y1="104" x2="244" y2="152" class="solid"></line><line x1="36" y1="152" x2="244" y2="152" class="solid"></line></g><g><line x1="36" y1="200" x2="244" y2="200" class="solid"></line><line x1="36" y1="200" x2="36" y2="248" class="solid"></line><line x1="116" y1="200" x2="116" y2="248" class="solid"></line><line x1="196" y1="200" x2="196" y2="248" class="solid"></line><line x1="244" y1="200" x2="244" y2="248" class="solid"></line><line x1="36" y1="248" x2="244" y2="248" class="solid"></line></g><g><line x1="36" y1="296" x2="244" y2="296" class="solid"></line><line x1="36" y1="296" x2="36" y2="344" class="solid"></line><line x1="116" y1="296" x2="116" y2="344" class="solid"></line><line x1="196" y1="296" x2="196" y2="344" class="solid"></line><line x1="244" y1="296" x2="244" y2="344" class="solid"></line><line x1="36" y1="344" x2="244" y2="344" class="solid"></line></g><g><line x1="36" y1="392" x2="244" y2="392" class="solid"></line><line x1="36" y1="392" x2="36" y2="440" class="solid"></line><line x1="116" y1="392" x2="116" y2="440" class="solid"></line><line x1="196" y1="392" x2="196" y2="440" class="solid"></line><line x1="244" y1="392" x2="244" y2="440" class="solid"></line><line x1="36" y1="440" x2="244" y2="440" class="solid"></line></g><g><line x1="300" y1="72" x2="540" y2="72" class="solid"></line><line x1="300" y1="72" x2="300" y2="456" class="solid"></line><line x1="540" y1="72" x2="540" y2="456" class="solid"></line><line x1="300" y1="168" x2="540" y2="168" class="solid"></line><line x1="300" y1="264" x2="540" y2="264" class="solid"></line><line x1="300" y1="360" x2="540" y2="360" class="solid"></line><line x1="300" y1="456" x2="540" y2="456" class="solid"></line></g><g><line x1="316" y1="104" x2="524" y2="104" class="solid"></line><line x1="316" y1="104" x2="316" y2="152" class="solid"></line><line x1="396" y1="104" x2="396" y2="152" class="solid"></line><line x1="476" y1="104" x2="476" y2="152" class="solid"></line><line x1="524" y1="104" x2="524" y2="152" class="solid"></line><line x1="316" y1="152" x2="524" y2="152" class="solid"></line></g><g><line x1="316" y1="200" x2="524" y2="200" class="solid"></line><line x1="316" y1="200" x2="316" y2="248" class="solid"></line><line x1="396" y1="200" x2="396" y2="248" class="solid"></line><line x1="476" y1="200" x2="476" y2="248" class="solid"></line><line x1="524" y1="200" x2="524" y2="248" class="solid"></line><line x1="316" y1="248" x2="524" y2="248" class="solid"></line></g><g><line x1="316" y1="296" x2="524" y2="296" class="solid"></line><line x1="316" y1="296" x2="316" y2="344" class="solid"></line><line x1="396" y1="296" x2="396" y2="344" class="solid"></line><line x1="476" y1="296" x2="476" y2="344" class="solid"></line><line x1="524" y1="296" x2="524" y2="344" class="solid"></line><line x1="316" y1="344" x2="524" y2="344" class="solid"></line></g><g><line x1="316" y1="392" x2="524" y2="392" class="solid"></line><line x1="316" y1="392" x2="316" y2="440" class="solid"></line><line x1="396" y1="392" x2="396" y2="440" class="solid"></line><line x1="476" y1="392" x2="476" y2="440" class="solid"></line><line x1="524" y1="392" x2="524" y2="440" class="solid"></line><line x1="316" y1="440" x2="524" y2="440" class="solid"></line></g></svg>`),ge=C(`<p>Bloom filters are incredibly space-efficient probabilistic data structures, perfect for answering a simple question: “Is this element in the set — no or maybe?”</p> <p>But as we discussed in <a href="https://maltsev.space/blog/008-bloom-filters-pt1" rel="nofollow">deep dive into Bloom filters</a>, there’s a big limitation: <strong>they don’t support deletion</strong>.</p> <p>In this part of the series, we’ll tackle that problem. We’ll explore how we can extend Bloom filters to allow element removal — and what trade-offs come with that.</p> <h2 id="contents"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#contents">#</a>Contents</h2> <ul><li><a href="#why-deletion-is-hard">Why Deletion Is Hard</a></li> <li><a href="#easy-workarounds-that-actually-dont-work">Easy Workarounds (That Actually Don’t Work)</a> <ul><li><a href="#rebuilding-the-filter">Rebuilding the Filter</a></li> <li><a href="#using-a-tombstone-filter">Using a Tombstone Filter</a></li></ul></li> <li><a href="#counting-bloom-filters">Counting Bloom Filters</a> <ul><li><a href="#how-counting-bloom-filters-work">How Counting Bloom Filters Work</a></li> <li><a href="#handling-counter-overflow-and-underflow">Handling Counter Overflow and Underflow</a></li> <li><a href="#removing-a-non-existent-element">Removing a Non-Existent Element</a></li> <li><a href="#is-it-worth-it">Is It Worth It?</a></li></ul></li> <li><a href="#d-left-counting-bloom-filter">d-left Counting Bloom Filter</a> <ul><li><a href="#core-idea">Core Idea</a></li> <li><a href="#why-d-left">Why d-left?</a></li> <li><a href="#insertion">Insertion</a></li> <li><a href="#deletion">Deletion</a></li> <li><a href="#membership-check">Membership Check</a></li> <li><a href="#about-permutations-two-phase-hashing">About Permutations (Two-Phase Hashing)</a></li></ul></li> <li><a href="#moving-forward">Moving Forward</a></li></ul> <h2 id="why-deletion-is-hard"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#why-deletion-is-hard">#</a>Why Deletion Is Hard</h2> <p>To understand why deletion doesn’t work in a classic Bloom filter, let’s quickly revisit how it operates.</p> <p>A Bloom filter consists of two core components:</p> <ul><li>A fixed-size <strong>bit array</strong></li> <li>A set of <strong>hash functions</strong></li></ul> <p>Each time you insert an element, it is hashed at most <code>k</code> times to determine <code>k</code> bit positions in the array, and those bits are set to <code>1</code>. Since the bit array is shared across all elements, multiple elements may overlap and set the same bits — this is expected and what makes Bloom filters space-efficient.</p> <p>But this sharing creates a fundamental problem: <strong>you can’t tell which element set a given bit</strong>. If you try to delete an element by resetting its <code>k</code> bits to <code>0</code>, you may accidentally unset bits that are still needed by other elements, breaking one of the Bloom filter’s key guarantees: <strong>no false negatives</strong>.</p> <p>Let’s see this in action. Suppose we have a Bloom filter with 10 bits and we want to insert two elements:</p> <ul><li><strong>Element A</strong> hashes to positions 0, 5, and 8</li> <li><strong>Element B</strong> hashes to positions 5, 7, and 9</li></ul> <p>Notice that both elements share position 5 — this is where the trouble begins.</p> <p>First, we insert both elements. Element A sets bits at positions 0, 5, and 8. Then Element B tries to set bits at positions 5, 7, and 9. Position 5 is already set from Element A, so it remains <code>1</code>, while positions 7 and 9 are newly set.</p> <!> <p>Our final bit array looks like:</p> <svg xmlns="http://www.w3.org/2000/svg" width="176" height="160" class="svgbob"><style>.svgbob line, .svgbob path, .svgbob circle, .svgbob rect, .svgbob polygon {
  stroke: black;
  stroke-width: 2;
  stroke-opacity: 1;
  fill-opacity: 1;
  stroke-linecap: round;
  stroke-linejoin: miter;
}

.svgbob text {
  white-space: pre;
  fill: black;
  font-family: Iosevka Fixed, monospace;
  font-size: 14px;
}

.svgbob rect.backdrop {
  stroke: none;
  fill: transparent;
}

.svgbob .broken {
  stroke-dasharray: 8;
}

.svgbob .filled {
  fill: black;
}

.svgbob .bg_filled {
  fill: transparent;
  stroke-width: 1;
}

.svgbob .nofill {
  fill: transparent;
}

.svgbob .end_marked_arrow {
  marker-end: url(#arrow);
}

.svgbob .start_marked_arrow {
  marker-start: url(#arrow);
}

.svgbob .end_marked_diamond {
  marker-end: url(#diamond);
}

.svgbob .start_marked_diamond {
  marker-start: url(#diamond);
}

.svgbob .end_marked_circle {
  marker-end: url(#circle);
}

.svgbob .start_marked_circle {
  marker-start: url(#circle);
}

.svgbob .end_marked_open_circle {
  marker-end: url(#open_circle);
}

.svgbob .start_marked_open_circle {
  marker-start: url(#open_circle);
}

.svgbob .end_marked_big_open_circle {
  marker-end: url(#big_open_circle);
}

.svgbob .start_marked_big_open_circle {
  marker-start: url(#big_open_circle);
}</style><defs><marker id="arrow" viewBox="-2 -2 8 8" refX="4" refY="2" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><polygon points="0,0 0,4 4,2 0,0"></polygon></marker><marker id="diamond" viewBox="-2 -2 8 8" refX="4" refY="2" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><polygon points="0,2 2,0 4,2 2,4 0,2"></polygon></marker><marker id="circle" viewBox="0 0 8 8" refX="4" refY="4" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><circle cx="4" cy="4" r="2" class="filled"></circle></marker><marker id="open_circle" viewBox="0 0 8 8" refX="4" refY="4" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><circle cx="4" cy="4" r="2" class="bg_filled"></circle></marker><marker id="big_open_circle" viewBox="0 0 8 8" refX="4" refY="4" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><circle cx="4" cy="4" r="3" class="bg_filled"></circle></marker></defs><rect class="backdrop" x="0" y="0" width="176" height="160"></rect><text x="50" y="12">shared</text><line x1="92" y1="16" x2="92" y2="68" class="solid"></line><text x="10" y="44">A</text><text x="122" y="44">B</text><text x="138" y="44">A</text><text x="154" y="44">B</text><line x1="12" y1="48" x2="12" y2="68" class="solid"></line><line x1="124" y1="48" x2="124" y2="68" class="solid"></line><line x1="140" y1="48" x2="140" y2="68" class="solid"></line><line x1="156" y1="48" x2="156" y2="68" class="solid"></line><polygon points="8,68 16,68 12,80" class="filled"></polygon><polygon points="88,68 96,68 92,80" class="filled"></polygon><polygon points="120,68 128,68 124,80" class="filled"></polygon><polygon points="136,68 144,68 140,80" class="filled"></polygon><polygon points="152,68 160,68 156,80" class="filled"></polygon><text x="10" y="108">1</text><text x="26" y="108">0</text><text x="42" y="108">0</text><text x="58" y="108">0</text><text x="74" y="108">0</text><text x="90" y="108">1</text><text x="106" y="108">0</text><text x="122" y="108">1</text><text x="138" y="108">1</text><text x="154" y="108">1</text><text x="10" y="140">0</text><text x="26" y="140">1</text><text x="42" y="140">2</text><text x="58" y="140">3</text><text x="74" y="140">4</text><text x="90" y="140">5</text><text x="106" y="140">6</text><text x="122" y="140">7</text><text x="138" y="140">8</text><text x="154" y="140">9</text><text x="106" y="12">bit</text><g><line x1="4" y1="88" x2="164" y2="88" class="solid"></line><line x1="4" y1="88" x2="4" y2="120" class="solid"></line><line x1="20" y1="88" x2="20" y2="120" class="solid"></line><line x1="36" y1="88" x2="36" y2="120" class="solid"></line><line x1="52" y1="88" x2="52" y2="120" class="solid"></line><line x1="68" y1="88" x2="68" y2="120" class="solid"></line><line x1="84" y1="88" x2="84" y2="120" class="solid"></line><line x1="100" y1="88" x2="100" y2="120" class="solid"></line><line x1="116" y1="88" x2="116" y2="120" class="solid"></line><line x1="132" y1="88" x2="132" y2="120" class="solid"></line><line x1="148" y1="88" x2="148" y2="120" class="solid"></line><line x1="164" y1="88" x2="164" y2="120" class="solid"></line><line x1="4" y1="120" x2="164" y2="120" class="solid"></line></g></svg> <p>Now, let’s attempt to delete Element A. The naive approach would be to reset its bits at positions 0, 5, and 8 back to <code>0</code>. This seems straightforward, but here’s the problem: when we reset position 5, we’re also removing Element B’s contribution to that position. After this “deletion,” our bit array becomes: <code>[0,0,0,0,0,0,0,1,0,1]</code>.</p> <!> <p>The corruption becomes evident when we later check for Element B. We hash it to positions 5, 7, and 9, but now position 5 is <code>0</code>. Since not all of Element B’s positions are set, the Bloom filter incorrectly reports that Element B is not present — a <strong>false negative</strong>. This is catastrophic because Element B was never deleted; it’s still supposed to be in the set.</p> <!> <div class="callout" data-callout="tip" data-collapsible="false"><div class="callout-title"><div class="callout-title-icon" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z"></path></svg></div><div class="callout-title-text">Tip</div></div><div class="callout-content"><p>It’s similar to erasing your tag from a public graffiti wall — you might end up scrubbing off someone else’s mark too, and now no one can tell they were ever there.</p></div></div> <p>This is why deletion is fundamentally unsafe in standard Bloom filters — any attempt to remove an element risks corrupting the filter’s state and creating false negatives for other elements.</p> <h2 id="easy-workarounds-that-actually-dont-work"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#easy-workarounds-that-actually-dont-work">#</a>Easy Workarounds (That Actually Don’t Work)</h2> <p>Before diving into data structure modifications, let’s look at a few simple workarounds for deletion.</p> <h3 id="rebuilding-the-filter"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#rebuilding-the-filter">#</a>Rebuilding the Filter</h3> <p>In many use cases, full deletion support isn’t necessary. Instead, you can periodically <strong>rebuild</strong> the Bloom filter from scratch — daily, weekly, or based on certain metrics like false positive rate. This works especially well if:</p> <ul><li>You can tolerate brief downtime or rebuild in the background.</li> <li>The data set is relatively stable or changes in batches.</li></ul> <p>This is often the simplest and safest approach.</p> <h3 id="using-a-tombstone-filter"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#using-a-tombstone-filter">#</a>Using a Tombstone Filter</h3> <p>Another workaround is to maintain a second Bloom filter — a <strong>tombstone filter</strong> — to track deletions. When you remove an element, you insert it into the tombstone filter.</p> <p>To check for membership:</p> <ol><li>Check the main Bloom filter.</li> <li>If it’s a <strong>possible match</strong>, check the tombstone filter.</li> <li>If it also matches there, treat it as deleted.</li></ol> <p>The problem? If the tombstone filter gives a <strong>false positive</strong>, you’ll wrongly conclude that an element was deleted — effectively creating a <strong>false negative</strong>. This defeats the main strength of Bloom filters.</p> <p>So while this method technically adds delete support, it weakens the guarantees and is rarely worth the risk.</p> <h2 id="counting-bloom-filters"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#counting-bloom-filters">#</a>Counting Bloom Filters</h2> <p>The core strength of Bloom filters lies in their simplicity: a bit array and some hash functions. This makes them fast and compact — but also limited. In particular, the bit array can’t tell <strong>which elements</strong> contributed to setting each bit.</p> <p>That’s where <strong>Counting Bloom Filters (CBFs)</strong> come in.</p> <p>Originally proposed by <a href="https://www.cs.princeton.edu/courses/archive/spr05/cos598E/bib/p254-fan.pdf" rel="nofollow">Fan et al.</a> as a solution for scalable web cache, CBFs replace the bit array with an array of <strong>small integer counters</strong> — typically 4-bit values. These allow us to track how many elements have set each position.</p> <!> <h3 id="how-counting-bloom-filters-work"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#how-counting-bloom-filters-work">#</a>How Counting Bloom Filters Work</h3> <p>CBFs operate using three fundamental operations, same as the classic Bloom filter, but each building on the counter-based structure.</p> <h4 id="insertion-of-an-element"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#insertion-of-an-element">#</a>Insertion of an Element</h4> <p>When inserting an element into a CBF:</p> <ol><li><strong>Hash the element</strong> to determine <code>k</code> positions in the counter array</li> <li><strong>Increment each counter</strong> at those <code>k</code> positions by 1</li></ol> <p>The key insight is that <strong>multiple elements may share the same positions</strong> — but now we track exactly how many elements contributed to each position through the counter values.</p> <!> <h4 id="membership-query-operation"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#membership-query-operation">#</a>Membership Query Operation</h4> <p>To check if an element exists in the CBF:</p> <ol><li><strong>Hash the element</strong> using the same <code>k</code> hash functions to get <code>k</code> positions</li> <li><strong>Check all counters</strong> at those positions</li> <li><strong>Return the result</strong>: <ul><li>If <strong>all counters > 0</strong>: Element is <strong>possibly present</strong></li> <li>If <strong>any counter = 0</strong>: Element is <strong>definitely not present</strong></li></ul></li></ol> <p>The query operation is identical to a standard Bloom filter, just checking counters instead of bits.</p> <h4 id="deletion-of-an-element"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#deletion-of-an-element">#</a>Deletion of an Element</h4> <p>The deletion operation is just the opposite of the insertion operation:</p> <ol><li><strong>Hash the element</strong> to get the same <code>k</code> positions used during insertion</li> <li><strong>Decrement each counter</strong> at those positions by 1</li></ol> <p>The result is that other elements sharing those positions remain unaffected because their contributions are still counted.</p> <!> <p>This counter-based approach enables <strong>insert</strong>, <strong>query</strong>, and <strong>delete</strong> operations while preserving the probabilistic guarantees of the original Bloom filter structure. However, it’s not without its own challenges.</p> <h3 id="handling-counter-overflow-and-underflow"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#handling-counter-overflow-and-underflow">#</a>Handling Counter Overflow and Underflow</h3> <p>When implementing a CBF, you need to be mindful of counter limits. Most implementations use 4-bit counters, which means each counter can represent values from 0 to 15.</p> <h4 id="overflow-during-insertion"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#overflow-during-insertion">#</a>Overflow During Insertion</h4> <p>If a counter is already at its maximum value (e.g., 15) and you try to increment it, the result will either:</p> <ul><li>Wrap around to 0 (in case of overflow), or</li> <li>Overwrite memory incorrectly (if not handled properly)</li></ul> <p>To prevent this, insertions should <strong>skip incrementing</strong> counters that are already at their maximum value.</p> <h4 id="underflow-during-deletion"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#underflow-during-deletion">#</a>Underflow During Deletion</h4> <p>Similarly, if a counter is at <code>0</code> and you try to decrement it, you risk corrupting the filter — especially if that position was never associated with the element being removed. Deletion code should <strong>never decrement</strong> a zero counter.</p> <p>This raises a deeper issue: if the counter is <code>0</code>, the element likely wasn’t inserted — and deleting it can silently damage the filter. That brings us to a more subtle and dangerous scenario…</p> <h3 id="removing-a-non-existent-element"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#removing-a-non-existent-element">#</a>Removing a Non-Existent Element</h3> <p>Counting Bloom Filters only work reliably if deletions are performed on elements that were actually inserted. If you delete an element that was never added, you can unintentionally corrupt the state of the filter.</p> <p>Let’s walk through a simple example:</p> <ul><li>Element <strong>A</strong> hashes to positions <code>1, 5, 7, 9</code></li> <li>Element <strong>B</strong> hashes to positions <code>1, 3, 7, 8</code></li></ul> <p>Now suppose you insert <strong>A</strong> — this increments the counters at positions <code>1, 5, 7, 9</code>.</p> <p>Then, without inserting <strong>B</strong>, you try to delete it. This decrements counters at <code>1, 3, 7, 8</code>.</p> <p>Here’s what goes wrong:</p> <ul><li>Counters at positions <code>1</code> and <code>7</code> (shared with A) are decremented — possibly to zero.</li> <li>When you later check for <strong>A</strong>, it may appear absent, even though it was never deleted.</li> <li>Counters at positions <code>5</code> and <code>9</code> remain set — creating an inconsistent state.</li></ul> <p>This creates a <strong>false negative</strong>, something Bloom filters are explicitly designed to avoid. And the worst part? There’s no way to detect this corruption after the fact.</p> <h3 id="is-it-worth-it"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#is-it-worth-it">#</a>Is It Worth It?</h3> <p>Counting Bloom Filters provide a straightforward way to support deletions: just replace bits with small counters. The core algorithm remains nearly identical to the classic Bloom filter — simple and efficient.</p> <p>But this simplicity comes at a cost:</p> <ul><li>Requires more memory — typically 4× larger due to 4-bit counters.</li> <li>Vulnerable to accidental false negatives if deletions aren’t handled carefully.</li> <li>Doesn’t track which elements contributed to a counter — so overlapping deletions are still a risk.</li></ul> <p>CBFs were proposed back in 2000 as a practical workaround, and they still hold up in simple scenarios. But if memory is tight or deletion accuracy is critical, modern alternatives like <strong>Cuckoo Filters</strong> offer better guarantees.</p> <p>Before we get there, let’s look at one more variation that builds on this concept — the <strong>d-left Counting Bloom Filter</strong>.</p> <h2 id="d-left-counting-bloom-filter"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#d-left-counting-bloom-filter">#</a>d-left Counting Bloom Filter</h2> <p>This data structure is quite different from classic Bloom and Counting Bloom Filters, but it gives us useful ideas that eventually lead to Cuckoo Filters — especially I love the point when it comes to handling collisions.</p> <h3 id="core-idea"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#core-idea">#</a>Core Idea</h3> <p>The <a href="https://people.eecs.berkeley.edu/~sylvia/cs268-2014/papers/countingbloom.pdf" rel="nofollow">d-left Counting Bloom Filter (dlCBF)</a> replaces the flat array of counters with a multi-part structure — or simply, <code>d</code> separate hash tables (subtables).</p> <p>Each subtable contains <code>B</code> buckets. Every bucket holds a small, fixed number of cells (e.g., 8). Each cell has:</p> <ul><li>a <strong>fingerprint</strong> (a short hash of the original element)</li> <li>a <strong>counter</strong> (how many times it’s been added)</li></ul> <p>So instead of one giant table, we split it into <code>d</code> isolated parts.</p> <!> <h3 id="why-d-left"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#why-d-left">#</a>Why d-left?</h3> <p>This structure is more complex than a flat CBF, but it packs data more tightly and handles collisions better. Each subtable manages its own space, and load balancing improves thanks to the “pick the least loaded” rule.</p> <div class="callout" data-callout="tip" data-collapsible="false"><div class="callout-title"><div class="callout-title-icon" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z"></path></svg></div><div class="callout-title-text">Tip</div></div><div class="callout-content"><p>Think of it like driving on a busy 6-lane road approaching an intersection. Three lanes can turn left, and the other three can turn right. In a regular CBF, it’s as if there’s only one lane for your direction — everyone turning left has to squeeze into the same lane, creating a traffic jam. But with d-left CBF, you have multiple lanes (subtables) going in your direction. When you need to turn (insert an element), you look at all the lanes that can make your turn and choose the one with the least traffic (fewest occupied cells). This way, cars turning in the same direction spread out across multiple lanes, reducing congestion.</p></div></div> <h3 id="insertion"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#insertion">#</a>Insertion</h3> <ol><li>First, hash the element once to get the <strong>true fingerprint</strong>.</li> <li>Each subtable applies its own <strong>deterministic permutation</strong> to the fingerprint. This maps the fingerprint to a bucket in that subtable and modifies the fingerprint slightly to avoid clashes. I explain it later.</li> <li>Now we have <code>d</code> candidate buckets — one per subtable.</li> <li>From those, pick the bucket with the fewest used cells.</li> <li>If a cell with the modified fingerprint already exists there, increment its counter.</li> <li>Otherwise, insert a new cell with the fingerprint and counter set to 1.</li></ol> <p>Here’s how dlCBF insertion works:</p> <!> <h3 id="deletion"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#deletion">#</a>Deletion</h3> <p>To remove an element:</p> <ul><li>Use the same process to find candidate buckets and fingerprints.</li> <li>Locate the matching cell and decrement its counter.</li></ul> <h3 id="membership-check"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#membership-check">#</a>Membership Check</h3> <p>Same logic: use the original fingerprint, permute it per subtable, and check each candidate bucket. If any bucket contains a matching fingerprint with a positive counter, the element is <strong>possibly present</strong>.</p> <h3 id="about-permutations-two-phase-hashing"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#about-permutations-two-phase-hashing">#</a>About Permutations (Two-Phase Hashing)</h3> <p>One subtle but powerful part of dlCBF is <strong>how it avoids ambiguous deletions and collisions</strong>.</p> <ul><li><strong>Phase 1</strong>: Generate a fingerprint from the element.</li> <li><strong>Phase 2</strong>: Each subtable applies its own deterministic permutation to the fingerprint. This affects both the bucket index and the fingerprint value inside that subtable.</li></ul> <p>So instead of computing <code>d</code> separate hashes, we just compute one hash and shuffle it differently in each subtable. This helps avoid situations where two elements look the same across all subtables and buckets — a common cause of incorrect deletions.</p> <p>By doing this simple fingerprint transformation per subtable, dlCBF lowers the chance of “hot buckets” and overlapping fingerprints, making the structure more reliable.</p> <h2 id="moving-forward"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#moving-forward">#</a>Moving Forward</h2> <p>Counting Bloom Filters are a natural extension of the classic Bloom Filter — they add support for deletions with minimal structural changes. On paper, it’s a neat solution. But in practice, CBFs are not always the most efficient choice, especially today.</p> <p>It’s a bit sad, honestly. There’s no simple way to preserve the elegance of the original Bloom Filter and still get reliable deletions. Every attempt to fix that tends to compromise either performance or memory efficiency.</p> <p>That said, the alternatives — like <a href="https://maltsev.space/blog/010-cuckoo-filters" rel="nofollow">Cuckoo Filters</a> and the newer Ribbon Filters — are surprisingly elegant in their own right. They’re more complex under the hood, but if you’re working with modern libraries, that complexity is abstracted away. For most real-world use cases where deletions matter, these filters are excellent, first-class replacements for classic Bloom Filters.</p>`,1);function fe(i){var a=ge(),n=s(ss(a),30);e(n,()=>`<pre class="mermaid">graph TD
    A["Insert Element A<br/>Hash positions: 0, 5, 8"] --> A1["Set bits:<br/>bit[0] = 1<br/>bit[5] = 1<br/>bit[8] = 1"]
    
    B["Insert Element B<br/>Hash positions: 5, 7, 9"] --> B1["Set bits:<br/>bit[5] = 1 (already set)<br/>bit[7] = 1<br/>bit[9] = 1"]
    
    A1 --> C["Positions set: 0, 5, 7, 8, 9"]
    B1 --> C
    
    style A fill:#22d3ee,color:#212529
    style B fill:#22d3ee,color:#212529
    style C fill:#22c55e,color:#212529</pre>`);var p=s(n,8);e(p,()=>`<pre class="mermaid">graph TD
    A["Current state:<br/>[1,0,0,0,0,1,0,1,1,1]<br/>Both A and B inserted"] --> B["❌ Attempt to delete Element A<br/>Reset positions: 0, 5, 8"]
    
    B --> C["Naive deletion:<br/>bit[0] = 0<br/>bit[5] = 0 ⚠️ (shared with B!)<br/>bit[8] = 0"]
    
    C --> D["Corrupted bit array:<br/>[0,0,0,0,0,0,0,1,0,1]<br/>Only positions 7, 9 remain set"]
    
    style A fill:#495057,color:#f8f9fa
    style B fill:#dc2626,color:#f8f9fa
    style C fill:#f59e0b,color:#212529
    style D fill:#dc2626,color:#f8f9fa</pre>`);var l=s(p,4);e(l,()=>`<pre class="mermaid">graph TD
    A["Corrupted state:<br/>[0,0,0,0,0,0,0,1,0,1]<br/>Element A 'deleted'"] --> B["💥 Check Element B<br/>Hash positions: 5, 7, 9"]
    
    B --> C["Check each position:<br/>bit[5] = 0 ❌<br/>bit[7] = 1 ✓<br/>bit[9] = 1 ✓"]
    
    C --> D{"All bits set?"}
    
    D -->|"No, bit[5] = 0"| E["FALSE NEGATIVE!<br/>Element B appears absent<br/>but was never deleted"]
    
    style A fill:#dc2626,color:#f8f9fa
    style B fill:#f59e0b,color:#212529
    style D fill:#f59e0b,color:#212529
    style E fill:#dc2626,color:#f8f9fa</pre>`);var d=s(l,38);rs(d,{children:(y,E)=>{var g=Ee();f(y,g)}});var c=s(d,14);e(c,()=>`<pre class="mermaid">graph TD
    A["Insert Element A<br/>Hash positions: 1, 4, 7"] --> A1["Increment counters:<br/>counter[1] = 0+1 = 1<br/>counter[4] = 0+1 = 1<br/>counter[7] = 0+1 = 1"]
    
    A1 --> A2["Counter array after A:<br/>[0,1,0,0,1,0,0,1,0,0]"]
    
    B["Insert Element B<br/>Hash positions: 4, 6, 9"] --> B1["Increment counters:<br/>counter[4] = 1+1 = 2 (shared!)<br/>counter[6] = 0+1 = 1<br/>counter[9] = 0+1 = 1"]
    
    A2 --> C["Final counter array:<br/>[0,1,0,0,2,0,1,1,0,1]<br/>Position 4 shared by both elements"]
    B1 --> C
    
    style A fill:#3b82f6,color:#f8f9fa
    style B fill:#3b82f6,color:#f8f9fa
    style C fill:#22c55e,color:#212529</pre>`);var k=s(c,18);e(k,()=>`<pre class="mermaid">graph TD
    A["Current state:<br/>[0,1,0,0,2,0,1,1,0,1]<br/>Both A and B inserted"] --> B["Delete Element A<br/>Hash positions: 1, 4, 7"]
    
    B --> C["Decrement counters:<br/>counter[1] = 1-1 = 0<br/>counter[4] = 2-1 = 1 (B still contributes!)<br/>counter[7] = 1-1 = 0"]
    
    C --> D["✅ Updated counter array:<br/>[0,0,0,0,1,0,1,0,0,1]<br/>Element B's data preserved"]
    
    style A fill:#495057,color:#f8f9fa
    style B fill:#3b82f6,color:#f8f9fa
    style D fill:#495057,color:#f8f9fa</pre>`);var m=s(k,66);rs(m,{children:(y,E)=>{var g=ue();f(y,g)}});var h=s(m,14);e(h,()=>`<pre class="mermaid">graph TD
    A["Element: 'apple'<br/>Generate fingerprint: 0x4A2C"] --> B["Subtable 1<br/>Permute: 0x4A2C → 0x7B1D<br/>Bucket: hash(0x7B1D) % B = 3<br/>Load: 2 cells"]
    
    A --> C["Subtable 2<br/>Permute: 0x4A2C → 0x9E8F<br/>Bucket: hash(0x9E8F) % B = 7<br/>Load: 1 cell"]
    
    B --> D["Candidate buckets:<br/>Subtable 1 bucket 3: 2 cells<br/>Subtable 2 bucket 7: 1 cell ⭐"]
    C --> D
    
    D --> E["Choose least loaded<br/>Subtable 2, bucket 7"]
    
    E --> F["Check if fingerprint 0x9E8F<br/>already exists in bucket 7"]
    
    F --> G{"Fingerprint<br/>exists?"}
    
    G -->|Yes| H["Increment existing<br/>counter"]
    G -->|No| I["Insert new cell with<br/>fingerprint: 0x9E8F<br/> and counter: 1"]
    
    H --> J["✅ Insertion complete"]
    I --> J
    
    style A fill:#5d5fef,color:#f8f9fa
    style J fill:#22c55e,color:#212529
    style G fill:#f59e0b,color:#212529</pre>`),z(28),f(i,a)}const be=Object.freeze(Object.defineProperty({__proto__:null,default:fe,metadata:pa},Symbol.toStringTag,{value:"Module"})),ca={date:"2025-07-02",tags:["Algorithms"],keywords:["Cuckoo filters","Probabilistic data structures"],title:"Cuckoo Filters: Better Than Bloom Filters?",preview:"Meet the data structure that refuses trade-offs: identical footprint to Bloom, fewer false positives, and deletion that works without overhead. Grab all three!",series:"Grokking Bloom Filters",draft:!1,hero:"/images/blog/010-cuckoo-filters/hero.jpg",links:["https://maltsev.space/blog/009-counting-bloom-filters","#what-are-cuckoo-filters","#cuckoo-hashing-and-cuckoo-tables","#fingerprints-and-partial-key-cuckoo-hashing","#basic-operations","#lookup","#insertion","#deletion","#load-factor-in-cuckoo-filter","#what-are-the-benefits","#what-are-the-drawbacks","#insertions-can-fail-when-the-table-is-too-full","#eviction-loops-at-high-load","#more-implementation-work","#table-size-must-be-a-power-of-two","#fingerprint-size-and-error-rate","#final-thoughts","#academic-researches","https://www.cs.cmu.edu/~dga/papers/cuckoo-conext2014.pdf","https://maltsev.space/blog/008-bloom-filters-pt1","https://maltsev.space/blog/009-counting-bloom-filters#d-left-counting-bloom-filter","https://www.cs.cmu.edu/~dga/papers/silt-sosp2011.pdf","https://people.bu.edu/staro/cuckoo_filter_workshop_paper.pdf","https://www.cs.cmu.edu/~dga/papers/cuckoo-conext2014.pdf","https://www.cs.cmu.edu/~dga/papers/silt-sosp2011.pdf","https://people.bu.edu/staro/cuckoo_filter_workshop_paper.pdf"],readingTime:{text:"15 min read",minutes:14.295,time:857700,words:2859}},{date:Cn,tags:Bn,keywords:An,title:Dn,preview:_n,series:Tn,draft:In,hero:Sn,links:zn,readingTime:Mn}=ca;var Fe=Vs(`<svg xmlns="http://www.w3.org/2000/svg" width="528" height="272" class="svgbob"><style>.svgbob line, .svgbob path, .svgbob circle, .svgbob rect, .svgbob polygon {
  stroke: black;
  stroke-width: 2;
  stroke-opacity: 1;
  fill-opacity: 1;
  stroke-linecap: round;
  stroke-linejoin: miter;
}

.svgbob text {
  white-space: pre;
  fill: black;
  font-family: Iosevka Fixed, monospace;
  font-size: 14px;
}

.svgbob rect.backdrop {
  stroke: none;
  fill: transparent;
}

.svgbob .broken {
  stroke-dasharray: 8;
}

.svgbob .filled {
  fill: black;
}

.svgbob .bg_filled {
  fill: transparent;
  stroke-width: 1;
}

.svgbob .nofill {
  fill: transparent;
}

.svgbob .end_marked_arrow {
  marker-end: url(#arrow);
}

.svgbob .start_marked_arrow {
  marker-start: url(#arrow);
}

.svgbob .end_marked_diamond {
  marker-end: url(#diamond);
}

.svgbob .start_marked_diamond {
  marker-start: url(#diamond);
}

.svgbob .end_marked_circle {
  marker-end: url(#circle);
}

.svgbob .start_marked_circle {
  marker-start: url(#circle);
}

.svgbob .end_marked_open_circle {
  marker-end: url(#open_circle);
}

.svgbob .start_marked_open_circle {
  marker-start: url(#open_circle);
}

.svgbob .end_marked_big_open_circle {
  marker-end: url(#big_open_circle);
}

.svgbob .start_marked_big_open_circle {
  marker-start: url(#big_open_circle);
}</style><defs><marker id="arrow" viewBox="-2 -2 8 8" refX="4" refY="2" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><polygon points="0,0 0,4 4,2 0,0"></polygon></marker><marker id="diamond" viewBox="-2 -2 8 8" refX="4" refY="2" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><polygon points="0,2 2,0 4,2 2,4 0,2"></polygon></marker><marker id="circle" viewBox="0 0 8 8" refX="4" refY="4" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><circle cx="4" cy="4" r="2" class="filled"></circle></marker><marker id="open_circle" viewBox="0 0 8 8" refX="4" refY="4" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><circle cx="4" cy="4" r="2" class="bg_filled"></circle></marker><marker id="big_open_circle" viewBox="0 0 8 8" refX="4" refY="4" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><circle cx="4" cy="4" r="3" class="bg_filled"></circle></marker></defs><rect class="backdrop" x="0" y="0" width="528" height="272"></rect><text x="178" y="12">Classic</text><text x="242" y="12">Bloom</text><text x="290" y="12">Filter</text><path d="M 184,32 A 16,16 0,0,0 184,48" class="nofill"></path><text x="186" y="44">each</text><text x="226" y="44">cell</text><line x1="264" y1="38" x2="272" y2="38" class="solid"></line><line x1="264" y1="42" x2="272" y2="42" class="solid"></line><text x="282" y="44">1</text><text x="298" y="44">bit</text><path d="M 320,32 A 16,16 0,0,1 320,48" class="nofill"></path><text x="34" y="76">1</text><text x="98" y="76">0</text><text x="162" y="76">1</text><text x="226" y="76">0</text><text x="290" y="76">1</text><text x="354" y="76">0</text><text x="418" y="76">1</text><text x="482" y="76">1</text><text x="34" y="108">0</text><text x="98" y="108">1</text><text x="162" y="108">2</text><text x="226" y="108">3</text><text x="290" y="108">4</text><text x="354" y="108">5</text><text x="418" y="108">6</text><text x="482" y="108">7</text><text x="194" y="140">Cuckoo</text><text x="250" y="140">Filter</text><path d="M 56,160 A 16,16 0,0,0 56,176" class="nofill"></path><text x="58" y="172">4</text><text x="74" y="172">buckets</text><text x="138" y="172">×2</text><text x="170" y="172">slots,</text><text x="226" y="172">each</text><text x="266" y="172">slot</text><line x1="304" y1="166" x2="312" y2="166" class="solid"></line><line x1="304" y1="170" x2="312" y2="170" class="solid"></line><text x="322" y="172">8</text><line x1="328" y1="168" x2="336" y2="168" class="solid"></line><text x="338" y="172">bit</text><text x="370" y="172">fingerprint</text><path d="M 456,160 A 16,16 0,0,1 456,176" class="nofill"></path><text x="18" y="204">[slot</text><text x="66" y="204">0]</text><text x="90" y="204">0xA7</text><text x="146" y="204">[slot</text><text x="194" y="204">0]</text><text x="218" y="204">0x1C</text><text x="274" y="204">[slot</text><text x="322" y="204">0]</text><text x="346" y="204">0xFF</text><text x="402" y="204">[slot</text><text x="450" y="204">0]</text><text x="474" y="204">null</text><text x="18" y="220">[slot</text><text x="66" y="220">1]</text><text x="90" y="220">0x2B</text><text x="146" y="220">[slot</text><text x="194" y="220">1]</text><text x="218" y="220">null</text><text x="274" y="220">[slot</text><text x="322" y="220">1]</text><text x="346" y="220">0x3D</text><text x="402" y="220">[slot</text><text x="450" y="220">1]</text><text x="474" y="220">0xA7</text><text x="34" y="252">Bucket</text><text x="90" y="252">0</text><text x="162" y="252">Bucket</text><text x="218" y="252">1</text><text x="290" y="252">Bucket</text><text x="346" y="252">2</text><text x="418" y="252">Bucket</text><text x="474" y="252">3</text><g><line x1="4" y1="56" x2="516" y2="56" class="solid"></line><line x1="4" y1="56" x2="4" y2="88" class="solid"></line><line x1="68" y1="56" x2="68" y2="88" class="solid"></line><line x1="132" y1="56" x2="132" y2="88" class="solid"></line><line x1="196" y1="56" x2="196" y2="88" class="solid"></line><line x1="260" y1="56" x2="260" y2="88" class="solid"></line><line x1="324" y1="56" x2="324" y2="88" class="solid"></line><line x1="388" y1="56" x2="388" y2="88" class="solid"></line><line x1="452" y1="56" x2="452" y2="88" class="solid"></line><line x1="516" y1="56" x2="516" y2="88" class="solid"></line><line x1="4" y1="88" x2="516" y2="88" class="solid"></line></g><g><line x1="4" y1="184" x2="516" y2="184" class="solid"></line><line x1="4" y1="184" x2="4" y2="232" class="solid"></line><line x1="132" y1="184" x2="132" y2="232" class="solid"></line><line x1="260" y1="184" x2="260" y2="232" class="solid"></line><line x1="388" y1="184" x2="388" y2="232" class="solid"></line><line x1="516" y1="184" x2="516" y2="232" class="solid"></line><line x1="4" y1="232" x2="516" y2="232" class="solid"></line></g></svg>`),xe=C(`<table><thead><tr><th>Step</th><th>Expression</th><th>Decimal</th><th>Binary</th><th>Comment</th></tr></thead><tbody><tr><td>1</td><td><code>i1 = hash("apple") % 16</code></td><td>6</td><td>0110</td><td>First bucket</td></tr><tr><td>2</td><td><code>f  = hash(fp("apple"))</code></td><td>9</td><td>1001</td><td>Fingerprint hash</td></tr><tr><td>3</td><td><code>xor1 = i1 ^ f</code></td><td>15</td><td>1111</td><td>XOR before modulo</td></tr><tr><td>4</td><td><code>i2 = xor1 % 16</code></td><td>15</td><td>1111</td><td>Second bucket used at insert</td></tr><tr><td>5</td><td><code>xor2 = i2 ^ f</code></td><td>6</td><td>0110</td><td>Recompute <em>i1</em> before modulo</td></tr><tr><td>6</td><td><code>i1' = xor2 % 16</code></td><td>6</td><td>0110</td><td>Returns to the original bucket, great success</td></tr></tbody></table>`),ve=C(`<table><thead><tr><th>Step</th><th>Expression</th><th>Decimal</th><th>Binary</th><th>Comment</th></tr></thead><tbody><tr><td>1</td><td><code>i1 = hash("apple") % m</code></td><td>6</td><td>0110</td><td>First bucket</td></tr><tr><td>2</td><td><code>f = hash(fp("apple"))</code></td><td>9</td><td>1001</td><td>Fingerprint hash</td></tr><tr><td>3</td><td><code>xor1 = i1 ^ f</code></td><td>15</td><td>1111</td><td>XOR before modulo</td></tr><tr><td>4</td><td><code>i2 = xor1 % 12</code></td><td>3</td><td>0011</td><td>The second bucket used at insert</td></tr><tr><td>5</td><td><code>xor2 = i2 ^ f</code></td><td>10</td><td>1010</td><td>Recompute i1 before modulo</td></tr><tr><td>6</td><td><code>i1' = xor2 % 12</code></td><td><strong>10</strong></td><td>1010</td><td>Should return to 6, but does not</td></tr></tbody></table>`),we=C(`<p>Bloom Filters are brilliant, they use minimal memory to support approximate membership query operations, i.e., answering what elements may be represented in a set, or what absolutely not. Their simplicity is both their strength and weakness. As I’ve described in a <a href="https://maltsev.space/blog/009-counting-bloom-filters" rel="nofollow">previous article about Counting Bloom Filter</a>, it’s not trivial to support deletion and preserve their guarantees of absence of false-negative results, i.e., telling what elements are not in a set.</p> <p>Counting Bloom Filters (CBF) and d-left Counting Bloom Filters are supposed to solve this issue, but they come at a cost of greater memory overhead, <strong>1.5</strong> to <strong>4</strong> times more than classic Bloom Filters do.</p> <p>In this article, I’ll describe a memory-efficient and deletion-friendly solution. Meet the Cuckoo Filters!</p> <h2 id="contents"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#contents">#</a>Contents</h2> <ul><li><a href="#what-are-cuckoo-filters">What are Cuckoo Filters?</a></li> <li><a href="#cuckoo-hashing-and-cuckoo-tables">Cuckoo Hashing and Cuckoo Tables</a></li> <li><a href="#fingerprints-and-partial-key-cuckoo-hashing">Fingerprints and Partial Key Cuckoo Hashing</a></li> <li><a href="#basic-operations">Basic Operations</a> <ul><li><a href="#lookup">Lookup</a></li> <li><a href="#insertion">Insertion</a></li> <li><a href="#deletion">Deletion</a></li></ul></li> <li><a href="#load-factor-in-cuckoo-filter">Load Factor in Cuckoo Filter</a></li> <li><a href="#what-are-the-benefits">What Are the Benefits?</a></li> <li><a href="#what-are-the-drawbacks">What Are the Drawbacks?</a> <ul><li><a href="#insertions-can-fail-when-the-table-is-too-full">Insertions can fail when the table is too full</a></li> <li><a href="#eviction-loops-at-high-load">Eviction loops at high load</a></li> <li><a href="#more-implementation-work">More implementation work</a></li> <li><a href="#table-size-must-be-a-power-of-two">Table size must be a power of two</a></li></ul></li> <li><a href="#fingerprint-size-and-error-rate">Fingerprint Size and Error Rate</a></li> <li><a href="#final-thoughts">Final Thoughts</a></li> <li><a href="#academic-researches">Academic Researches</a></li></ul> <h2 id="what-are-cuckoo-filters"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#what-are-cuckoo-filters">#</a>What are Cuckoo Filters?</h2> <p>Cuckoo Filters are a clever step forward in the world of probabilistic data structures. <a href="https://www.cs.cmu.edu/~dga/papers/cuckoo-conext2014.pdf" rel="nofollow">Introduced by Fan et al. in 2014</a>, they were designed to overcome some of the major limitations of <a href="https://maltsev.space/blog/008-bloom-filters-pt1" rel="nofollow">classic Bloom Filters</a>, especially around memory efficiency and the lack of support for deletions.</p> <p>What sets them apart is the internal structure. While Bloom Filters use a flat bit array, Cuckoo Filters adopt a more flexible <strong>hash-table</strong> layout with buckets and slots, and that subtle shift unlocks new capabilities. At first glance, they might remind you of the <a href="https://maltsev.space/blog/009-counting-bloom-filters#d-left-counting-bloom-filter" rel="nofollow">d-left Counting Bloom Filters</a> we discussed earlier, since both use a hash-table-like structure, but with quite impressive mechanics.</p> <div class="callout" data-callout="note" data-collapsible="false"><div class="callout-title"><div class="callout-title-icon" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="2" x2="22" y2="6"></line><path d="M7.5 20.5 19 9l-4-4L3.5 16.5 2 22z"></path></svg></div><div class="callout-title-text">Note</div></div><div class="callout-content"><p>If you’re unfamiliar with hash tables, here’s the short version: a hash table is a data structure that lets you store values and look them up efficiently using a key. Under the hood, it works like an array of <strong>buckets</strong>. A bucket can contain one or more key-value pairs in its <strong>slots</strong>. When you insert a key-value pair, the key is hashed — turned into a number — to figure out which bucket to use. A good hash function ensures that even similar keys produce very different hash values, which helps spread data evenly across buckets.</p></div></div> <p>To help visualize the difference, let’s compare their memory layouts:</p> <!> <ul><li>In a Bloom Filter, every bit position is shared by multiple elements. Once a bit is set to <code>1</code>, there’s no way to know who set it.</li> <li>In a Cuckoo Filter, we store compact hashes of the original item, which are called <strong>fingerprints</strong>.</li></ul> <p>Let’s see how Cuckoo Filters work under the hood and the main concepts used in their design.</p> <h2 id="cuckoo-hashing-and-cuckoo-tables"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#cuckoo-hashing-and-cuckoo-tables">#</a>Cuckoo Hashing and Cuckoo Tables</h2> <p>The “Cuckoo” in <strong>Cuckoo Filter</strong> comes from a collision-handling technique called <strong>Cuckoo Hashing</strong>. It’s a clever and slightly mischievous way of dealing with a common problem in hash tables — what happens when two different elements want to land in the same bucket?</p> <p>Classic hash tables handle this with techniques like:</p> <ul><li><strong>Chaining</strong>: placing all colliding elements in a list inside the bucket, usually into a linked list.</li> <li><strong>Linear probing</strong>: scanning for the next available bucket if the first is fully occupied.</li></ul> <p>Cuckoo Hashing, however, takes a very different approach.</p> <p>In Cuckoo Hashing, each element has <strong>two possible buckets</strong> where it can be stored. Two different hash functions determine these.</p> <p>When inserting a new element:</p> <ol><li>You first try placing it in one of its two candidate buckets.</li> <li>If both are full, the algorithm <strong>evicts</strong> a randomly selected existing element from one of them.</li> <li>The evicted element is reinserted into its alternate bucket, possibly kicking out another element.</li> <li>This process repeats recursively until everyone finds a home, or the table expands if the chain doesn’t resolve.</li></ol> <p>This behavior is inspired by the cuckoo bird, which famously lays its eggs in other birds’ nests, displacing the existing ones — hence the name.</p> <!> <p>Here’s how the bucket choices are calculated:</p> <!> <p>Insertion picks either <code>h1</code> or <code>h2</code>, depending on which one has space. If both are full, one is chosen (often randomly), and the current occupant is kicked out and reinserted into its alternate bucket.</p> <p>This chain of evictions continues until a vacant slot is found — or until the process loops back on itself. In some rare cases, the eviction chain can become <strong>cyclic</strong>, meaning the same buckets get checked repeatedly with no progress. This indicates that the table is too full, and the only fix is to <strong>resize and rehash</strong> everything into a larger table.</p> <h2 id="fingerprints-and-partial-key-cuckoo-hashing"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#fingerprints-and-partial-key-cuckoo-hashing">#</a>Fingerprints and Partial Key Cuckoo Hashing</h2> <p>Hash tables work differently from Bloom Filters, Cuckoo Filters, and other approximate membership structures. <strong>They store the actual keys</strong>, which means they can answer lookups with zero false positives.</p> <p>But Cuckoo Filter aims to beat Bloom Filter at its own game—fast, compact membership checks with low memory use. Storing full keys would waste space and defeat that purpose. So what’s the alternative?</p> <p>In the article about <strong>Counting Bloom Filters</strong>, I mentioned a variant called the <strong>d-left Counting Bloom Filter</strong>. TL;DR: it’s a hash-table-like structure that doesn’t store full keys either. Instead, it stores <strong>fingerprints</strong> — small, fixed-size pieces of a hashed key, like 1 byte (8 bits). Fingerprints are compact and help keep the structure lightweight, so they are an excellent choice for the Cuckoo Filter.</p> <p>Now here’s the challenge: the classic Cuckoo Hashing algorithm relies on knowing the <strong>entire key</strong> when moving elements around. But in a Cuckoo Filter, we <strong>don’t store the key at all</strong>, only the fingerprint. That means the original eviction logic won’t work out of the box.</p> <p>To solve this, Fan et al. used a <a href="https://www.cs.cmu.edu/~dga/papers/silt-sosp2011.pdf" rel="nofollow">clever modification of Cuckoo Hashing</a>, called <strong>partial-key Cuckoo Hashing</strong>.</p> <div class="math math-display"><!></div> <p>Where:</p> <ul><li><span class="math math-inline"><!></span> is the key</li> <li><span class="math math-inline"><!></span> is a hash function</li> <li><span class="math math-inline"><!></span> is the bucket count</li> <li><span class="math math-inline"><!></span> denotes the XOR operation</li></ul> <p>The code usually is very straightforward:</p> <!> <p>The core idea remains the same: each element still has two possible buckets, just like in regular Cuckoo Hashing. But instead of computing both directly from the key, the second bucket is derived from the first bucket and the fingerprint, using a simple bitwise <strong>XOR</strong> operation.</p> <div class="callout" data-callout="note" data-collapsible="false"><div class="callout-title"><div class="callout-title-icon" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="2" x2="22" y2="6"></line><path d="M7.5 20.5 19 9l-4-4L3.5 16.5 2 22z"></path></svg></div><div class="callout-title-text">Note</div></div><div class="callout-content"><p><strong>XOR</strong>, short for “exclusive OR”, is a simple binary operation: it compares two bits and returns <code>1</code> if they’re different, <code>0</code> if they’re the same. So:</p><ul><li><code>0 ^ 0 = 0</code></li> <li><code>1 ^ 0 = 1</code></li> <li><code>1 ^ 1 = 0</code></li></ul></div></div> <p>What makes XOR perfect for this use case is its <strong>reversible property</strong>:</p> <!> <p>That means if you know one bucket and the fingerprint, you can always calculate the other bucket, in either direction.
That’s what makes it awesome: the Cuckoo Filter doesn’t need to store or look up the original key at all. Everything it needs to manage insertions, lookups, and evictions is right there in the table.</p> <h2 id="basic-operations"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#basic-operations">#</a>Basic Operations</h2> <p>Now that we understand the internal structure of a Cuckoo Filter, let’s walk through how the main operations work — lookup, insertion, and deletion.</p> <h3 id="lookup"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#lookup">#</a>Lookup</h3> <p>To check if an element <em>might</em> be in the filter, you just need to check two buckets for the presence of the computed fingerprint:</p> <ol><li>Hash the element to get its <strong>fingerprint</strong>.</li> <li>Compute the <strong>first bucket</strong> from the element.</li> <li>Compute the <strong>second bucket</strong> using XOR with the fingerprint.</li> <li>Check both buckets. If either contains the fingerprint, return <code>true</code>.</li></ol> <p><strong>Time complexity:</strong> <code>O(1)</code> — just two hash calculations and two bucket scans.</p> <!> <div class="callout" data-callout="tip" data-collapsible="false"><div class="callout-title"><div class="callout-title-icon" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z"></path></svg></div><div class="callout-title-text">Tip</div></div><div class="callout-content"><p>Don’t forget that, just like a Bloom filter, this is a <strong>probabilistic check</strong>. You may get a false positive, but never a false negative.</p></div></div> <h3 id="insertion"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#insertion">#</a>Insertion</h3> <p>Insertion is trickier, as it involves chained eviction of conflicted elements to alternative buckets, which I’ve described above.</p> <p>To insert a new element:</p> <ol><li>Compute its <strong>fingerprint</strong>.</li> <li>Calculate its <strong>two candidate buckets</strong> (same as in lookup).</li> <li>Try placing the fingerprint into either bucket.</li> <li>If both are full, randomly pick one, <strong>evict</strong> an existing fingerprint, and try to reinsert the evicted one in its alternate bucket.</li> <li>Repeat for a fixed number of steps (e.g., 500). If all fail, report insertion failure or grow the table.</li></ol> <p><strong>Time complexity:</strong></p> <ul><li>Best case: <code>O(1)</code> (when fingerprint fits right away)</li> <li>Worst case: <code>O(k)</code> where <code>k = MAX_KICKS</code></li></ul> <!> <div class="callout" data-callout="warning" data-collapsible="false"><div class="callout-title"><div class="callout-title-icon" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path><line x1="12" y1="9" x2="12" y2="13"></line><line x1="12" y1="17" x2="12.01" y2="17"></line></svg></div><div class="callout-title-text">Warning</div></div><div class="callout-content"><p>This is the main downside of Cuckoo Filters: <strong>insertions can fail</strong>. That usually means the table is too full, a common challenge with hash-based structures, which you can handle by resizing.</p></div></div> <h3 id="deletion"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#deletion">#</a>Deletion</h3> <p>Here’s where Cuckoo Filters shine compared to Bloom Filters — <strong>deletion doesn’t add more memory overhead and is safe</strong> (as long as the item was actually inserted):</p> <ol><li>Hash it to get its <strong>fingerprint</strong>.</li> <li>Compute its two possible buckets.</li> <li>If the fingerprint is found in either, remove it.</li></ol> <p><strong>Time complexity:</strong> <code>O(1)</code> —  same as for lookup, just two hash calculations and two bucket scans</p> <!> <div class="callout" data-callout="warning" data-collapsible="false"><div class="callout-title"><div class="callout-title-icon" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path><line x1="12" y1="9" x2="12" y2="13"></line><line x1="12" y1="17" x2="12.01" y2="17"></line></svg></div><div class="callout-title-text">Warning</div></div><div class="callout-content"><p>While deletions are supported, deleting an element that was <strong>never inserted</strong> may still remove a matching fingerprint from another item, just like in Counting Bloom Filters.</p></div></div> <h2 id="load-factor-in-cuckoo-filter"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#load-factor-in-cuckoo-filter">#</a>Load Factor in Cuckoo Filter</h2> <p>In any open-addressing hash table, you keep an eye on a simple but important ratio:</p> <div class="math math-display"><!></div> <p>The <strong>load factor (α)</strong> is the fraction of storage slots that are already in use. It first appeared in ordinary hash tables, where you measure how many key/value pairs are sitting in the array of buckets. A low α means plenty of free space, so lookups and inserts are cheap. As α creeps toward 1.0, collisions pile up, probes get longer, and you eventually have to resize the table.</p> <p>Cuckoo Filters inherit the same idea, but each <em>bucket</em> holds several short fingerprints. You count <em>all</em> occupied fingerprint slots and divide by the total number of slots across every bucket:</p> <div class="math math-display"><!></div> <p>With 4-slot buckets, you can usually push α as high as ≈0.95 before inserts start to fail.</p> <h2 id="what-are-the-benefits"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#what-are-the-benefits">#</a>What Are the Benefits?</h2> <p>Cuckoo Filters come with several practical advantages, especially when you’re aiming for <strong>low false positive rates</strong>.</p> <p>According to the original research by Fan et al., Cuckoo Filters outperform Bloom Filters in terms of space efficiency when the false positive rate is below <strong>3%</strong>. In other words, if you care about accuracy, they pack more data into less space.</p> <p>For example, this empirical analysis is provided by the authors <em>(all filters sized to 192 MiB)</em>:</p> <ul><li><strong>Cuckoo Filter</strong>: 12.60 bits per item, <strong>0.19%</strong> false positive rate</li> <li><strong>Bloom Filter</strong>: 13.00 bits per item, <strong>0.19%</strong> false positive rate</li> <li><strong>Cuckoo Filter with semi-sorting</strong>: 12.58 bits per item, <strong>0.09%</strong> false positive rate</li></ul> <p>So, not only do Cuckoo Filters match the false positive rate of Bloom Filters, but they often beat them by <strong>using less memory</strong>.</p> <div class="callout" data-callout="note" data-collapsible="false"><div class="callout-title"><div class="callout-title-icon" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="2" x2="22" y2="6"></line><path d="M7.5 20.5 19 9l-4-4L3.5 16.5 2 22z"></path></svg></div><div class="callout-title-text"><strong>Wait — what’s “semi-sorting”?</strong></div></div><div class="callout-content"><p>In the standard Cuckoo-Filter setup, a bucket holds <strong>4 fingerprints of 4 bits each</strong> — 16 bits total. But look-ups only check “does this fingerprint exist?”, so the <em>order</em> of those four values doesn’t matter.</p><p>The authors sorted each bucket’s fingerprints and listed every possible sorted pattern — just <strong>3876 unique combinations</strong>, far fewer than the 65536 raw bit-patterns. A bucket now stores a <strong>12-bit index</strong> into that pre-computed table instead of the full 16 bits.</p><p>Savings are *<strong>*roughly</strong>1 bit per element** with zero hit to query speed and only a tiny extra cost when inserting or deleting due to encoding/decoding gymnastics.</p></div></div> <p>One of the biggest wins is that Cuckoo Filters support <strong>native deletions:</strong> no workarounds, no tombstones or full rebuilds. To delete an element, you just locate its fingerprint in one of the two candidate buckets and remove it. Simple as that.</p> <p>This makes them a clean replacement for <strong>Counting Bloom Filters</strong>, which simulate deletion by using small counters, but at the cost of 3–4× more memory.</p> <p>Cuckoo Filters also offer <strong>predictable lookup performance</strong>, regardless of how full they get. Every query checks exactly <strong>2 buckets</strong>. With Bloom Filters, you need to access <strong>k</strong> random positions in the bit array, and <strong>k</strong> grows as you try to lower the false positive rate.</p> <p>Finally, in practice, Cuckoo Filters tend to have <strong>higher insertion and lookup throughput</strong> than Bloom Filters, especially when implemented with CPU cache behavior in mind. However, insertion will eventually degrade.</p> <h2 id="what-are-the-drawbacks"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#what-are-the-drawbacks">#</a>What Are the Drawbacks?</h2> <p>The previous section showed why Cuckoo Filters often beat Bloom Filters in terms of memory and accuracy. Those gains, however, are traded for extra complexity and stricter operating limits. Keep the following in mind before you drop Cuckoo Filters into production.</p> <h3 id="insertions-can-fail-when-the-table-is-too-full"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#insertions-can-fail-when-the-table-is-too-full">#</a>Insertions can fail when the table is too full</h3> <p>At roughly <strong>95 % load,</strong> an insertion may trigger hundreds of evictions (libraries usually cap this at ≈ 500). If no empty slot appears before the cap is reached, the operation returns “insert failed,” and the only remedy is to grow or rebuild the filter.</p> <h3 id="eviction-loops-at-high-load"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#eviction-loops-at-high-load">#</a>Eviction loops at high load</h3> <p>Near the same threshold, the eviction chain can bounce the identical fingerprints between two buckets <strong>FOREVER</strong>. Implementations abort after the kick limit, but the outcome remains an insertion failure.</p> <h3 id="more-implementation-work"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#more-implementation-work">#</a>More implementation work</h3> <ul><li>Partial-key Cuckoo hashing (two candidate buckets per fingerprint)</li> <li>Eviction logic with a bounded kick count</li> <li>Load-factor monitoring and timely resizing</li> <li>Bucket-width tuning (four fingerprints per bucket is a common sweet spot)</li></ul> <h3 id="table-size-must-be-a-power-of-two"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#table-size-must-be-a-power-of-two">#</a>Table size must be a power of two</h3> <p>The second bucket index is computed with a bitwise XOR trick:</p> <div class="math math-display"><!></div> <p>The paper <a href="https://people.bu.edu/staro/cuckoo_filter_workshop_paper.pdf" rel="nofollow"><em>Birdwatching: False Negatives in Cuckoo Filters</em></a> shows that this rule is <strong>provably safe only when the bucket count m equals 2ᵏ</strong>. If m is not a power of two, the final <code>mod m</code> strips high-order bits from the XOR result, breaking the reversible link between <code>i1</code> and <code>i2</code>. During long eviction chains, a fingerprint can slide into a third, illegal bucket and later disappear from both legal locations, so we can get a false negative result. The authors measured up to a <strong>10 % false-negative rate at 95 % load</strong> in such filters.</p> <p>Let’s see it in action. First, I’ll go through a good example when <code>m</code> is 16 (a power of two):</p> <!> <p>Now let’s see a bad example when <code>m</code> is 12 (not a power of two):</p> <!> <h2 id="fingerprint-size-and-error-rate"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#fingerprint-size-and-error-rate">#</a>Fingerprint Size and Error Rate</h2> <p>Unlike a Bloom filter, a Cuckoo Filter’s fingerprint length is chosen almost solely from the error budget you can tolerate; the total number of stored elements hardly matters.</p> <p>During a negative lookup, we compare the query fingerprint with the at most <code>2b</code> fingerprints that live in the two candidate buckets (<code>b</code> slots each).</p> <p>Each comparison matches by pure chance with probability <span class="math math-inline"><!></span>, so after <code>2b</code> comparisons, as derived by Fan et al., the <strong>upper bound</strong> on the false-positive probability ε is</p> <div class="math math-display"><!></div> <p>Where:</p> <ul><li><strong><code>f</code></strong> is a fingerprint size in bits</li> <li><strong><code>ε</code></strong> is the desired false positive rate</li> <li><strong><code>b</code></strong> is bucket size (typically 4)</li></ul> <p>Rearranging (1) gives the <strong>fingerprint size lower bound</strong></p> <div class="math math-display"><!></div> <p>And because <em>f</em> must be an <strong>integer number of bits</strong>, we round up</p> <div class="math math-display"><!></div> <p>In practice, you can choose between <strong>8 bits</strong>, which are nicely aligned to 1 byte, or <strong>12 bits,</strong> as in the original paper. I also saw that some libraries are using <strong>16 bits</strong> per fingerprint. Those are sufficient when <strong><code>b = 4</code>.</strong></p> <table><thead><tr><th>fingerprint length (f)</th><th><span class="math math-inline"><!></span></th></tr></thead><tbody><tr><td><strong>8 bits</strong></td><td><span class="math math-inline"><!></span></td></tr><tr><td><strong>12 bits</strong></td><td><span class="math math-inline"><!></span></td></tr><tr><td><strong>16 bits</strong></td><td><span class="math math-inline"><!></span></td></tr></tbody></table> <h2 id="final-thoughts"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#final-thoughts">#</a>Final Thoughts</h2> <p>I still remember how excited I was when I learned that a Cuckoo Filter could delete elements without blowing up the data structure like other Bloom filter variants. What also surprised me was how those bucket-hopping insertions seemed unreliable on paper, but they work remarkably well in practice.
And that clever XOR trick! I’ve always had a soft spot for the bit-flip operator. Back when I studied Boolean algebra, XOR felt confusing and weirdly unnecessary. But once I understood that it could reverse itself to undo an operation, it felt like magic.</p> <p>So here’s the short takeaway: Cuckoo Filters offer Bloom-level space efficiency, support real deletions, and need only two bucket checks per lookup. In return, inserts can get a bit tricky—once the filter reaches around 95% load, they might fail unless you resize. But if you keep an eye on the load factor, it’s a trade-off worth making.</p> <p>And if you’re into XOR like I am—good news! Cuckoo Filters aren’t the only ones using it. There’s a whole family of “invertible Bloom filters” that takes this idea even further. I’m really looking forward to exploring those next.</p> <h2 id="academic-researches"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#academic-researches">#</a>Academic Researches</h2> <ul><li><a href="https://www.cs.cmu.edu/~dga/papers/cuckoo-conext2014.pdf" rel="nofollow">Cuckoo Filter: Practically Better Than Bloom</a></li> <li><a href="https://www.cs.cmu.edu/~dga/papers/silt-sosp2011.pdf" rel="nofollow">SILT: A Memory-Efficient, High-Performance Key-Value Store</a></li> <li><a href="https://people.bu.edu/staro/cuckoo_filter_workshop_paper.pdf" rel="nofollow">Birdwatching: False Negatives In Cuckoo Filters</a></li></ul>`,1);function Ce(i){var a=we(),n=s(ss(a),20);rs(n,{children:(As,Gs)=>{var Ds=Fe();f(As,Ds)}});var p=s(n,24);e(p,()=>`<pre class="mermaid">graph TD
    A["New Element: 'orange'"] --> B["Calculate h1('orange') = Bucket 2<br/>Calculate h2('orange') = Bucket 5"]
    
    B --> C{"Check Bucket 2<br/>and Bucket 5"}
    C -->|"Both full"| D["Pick random bucket: Bucket 2<br/>Evict existing element: 'apple'"]
    C -->|"Space available"| E["Insert 'orange'<br/>✓ Success"]
    
    D --> F["Insert 'orange' into Bucket 2<br/>Now need to relocate 'apple'"]
    F --> G["Calculate alternate for 'apple'<br/>h2('apple') = Bucket 7"]
    
    G --> H{"Check Bucket 7"}
    H -->|"Space available"| I["Insert 'apple' into Bucket 7<br/>✓ Chain resolved"]
    H -->|"Full"| J["Evict element from Bucket 7<br/>Continue eviction chain..."]
    
    J --> K["Repeat process until:<br/>• Empty slot found<br/>• Max kicks reached<br/>• Cycle detected"]
    
    K --> L["Success: All elements placed"]
    K --> M["Failure: Table too full<br/>Need to resize"]
    
    style A fill:#5d5fef,color:#f8f9fa
    style E fill:#22d3ee,color:#212529
    style I fill:#22d3ee,color:#212529
    style L fill:#22d3ee,color:#212529
    style M fill:#dc2626,color:#f8f9fa
    style C fill:#f59e0b,color:#212529
    style H fill:#f59e0b,color:#212529</pre>`);var l=s(p,4);e(l,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> h1</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> hash1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(key) </span><span style="color:#D73A49;--shiki-dark:#F97583">%</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> bucketCount; </span><span style="color:#6A737D;--shiki-dark:#6A737D">// Primary bucket</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> h2</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> hash2</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(key) </span><span style="color:#D73A49;--shiki-dark:#F97583">%</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> bucketCount; </span><span style="color:#6A737D;--shiki-dark:#6A737D">// Alternate bucket</span></span></code></pre>`);var d=s(l,18),c=r(d);e(c,()=>`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi mathvariant="normal">fp</mi><mo>⁡</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi mathvariant="normal">fingerprint</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>b</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>m</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>b</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mrow><mo fence="true">(</mo><msub><mi>b</mi><mn>1</mn></msub><mo>⊕</mo><mi>H</mi><mo stretchy="false">(</mo><mi mathvariant="normal">fp</mi><mo>⁡</mo><mo stretchy="false">)</mo><mo fence="true">)</mo></mrow><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>m</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\\begin{aligned}
\\operatorname{fp} &amp;= \\operatorname{fingerprint}(x) \\\\
b_1 &amp;= H(x) \\bmod m \\\\
b_2 &amp;= \\left( b_1 \\oplus H(\\operatorname{fp}) \\right) \\bmod m
\\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.5em;vertical-align:-2em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mord mathrm">fp</span></span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop"><span class="mord mathrm">fingerprint</span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">m</span></span></span><span style="top:-1.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mop"><span class="mord mathrm">fp</span></span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2em;"><span></span></span></span></span></span></span></span></span></span></span></span>`),o(d);var k=s(d,4),m=r(k),h=r(m),y=r(h);e(y,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>'),o(h),z(),o(m);var E=s(m,2),g=r(E),B=r(g);e(B,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi></mrow><annotation encoding="application/x-tex">H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span>'),o(g),z(),o(E);var F=s(E,2),_=r(F),T=r(_);e(T,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>'),o(_),z(),o(F);var x=s(F,2),w=r(x),H=r(w);e(H,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊕</mo></mrow><annotation encoding="application/x-tex">\\oplus</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">⊕</span></span></span></span>'),o(w),z(),o(x),o(k);var W=s(k,4);e(W,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> fp</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> fingerprint</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(key)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> b1</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> hash</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(key) </span><span style="color:#D73A49;--shiki-dark:#F97583">%</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> bucketCount</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> b2</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (b1 </span><span style="color:#D73A49;--shiki-dark:#F97583">^</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> hash</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(fp)) </span><span style="color:#D73A49;--shiki-dark:#F97583">%</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> bucketCount</span></span></code></pre>`);var X=s(W,8);e(X,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">b1 </span><span style="color:#D73A49;--shiki-dark:#F97583">^</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> hash</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(fp) </span><span style="color:#D73A49;--shiki-dark:#F97583">==</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> b2</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">b2 </span><span style="color:#D73A49;--shiki-dark:#F97583">^</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> hash</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(fp) </span><span style="color:#D73A49;--shiki-dark:#F97583">==</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> b1</span></span></code></pre>`);var N=s(X,16);e(N,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> fp</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> fingerprint</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">'apple'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> i1</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> hash</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">'apple'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">%</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> bucketCount;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> i2</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (i1 </span><span style="color:#D73A49;--shiki-dark:#F97583">^</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> hash</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(fp)) </span><span style="color:#D73A49;--shiki-dark:#F97583">%</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> bucketCount;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> buckets[i1].</span><span style="color:#6F42C1;--shiki-dark:#B392F0">contains</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(fp) </span><span style="color:#D73A49;--shiki-dark:#F97583">||</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> buckets[i2].</span><span style="color:#6F42C1;--shiki-dark:#B392F0">contains</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(fp);</span></span></code></pre>`);var Y=s(N,16);e(Y,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> fp</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> fingerprint</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">'apple'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> i1 </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> hash</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">'apple'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">%</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> bucketCount;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> i2 </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (i1 </span><span style="color:#D73A49;--shiki-dark:#F97583">^</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> hash</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(fp)) </span><span style="color:#D73A49;--shiki-dark:#F97583">%</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> bucketCount;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (buckets[i1].</span><span style="color:#6F42C1;--shiki-dark:#B392F0">insert</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(fp) </span><span style="color:#D73A49;--shiki-dark:#F97583">||</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> buckets[i2].</span><span style="color:#6F42C1;--shiki-dark:#B392F0">insert</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(fp)) </span><span style="color:#D73A49;--shiki-dark:#F97583">return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// Eviction loop</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> currentFp </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> fp;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">random</span><span style="color:#24292E;--shiki-dark:#E1E4E8">() </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0.5</span><span style="color:#D73A49;--shiki-dark:#F97583"> ?</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> i1 </span><span style="color:#D73A49;--shiki-dark:#F97583">:</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> i2;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">for</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#D73A49;--shiki-dark:#F97583">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> n </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; n </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> MAX_KICKS</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; n</span><span style="color:#D73A49;--shiki-dark:#F97583">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> evictedFp</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> buckets[i].</span><span style="color:#6F42C1;--shiki-dark:#B392F0">swapRandom</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(currentFp);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    currentFp </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> evictedFp;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    i </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583">^</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> hash</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(evictedFp)) </span><span style="color:#D73A49;--shiki-dark:#F97583">%</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> bucketCount;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (buckets[i].</span><span style="color:#6F42C1;--shiki-dark:#B392F0">insert</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(evictedFp)) </span><span style="color:#D73A49;--shiki-dark:#F97583">return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// Table is too full</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> false</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></code></pre>`);var G=s(Y,12);e(G,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> fp</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> fingerprint</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">'apple'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> i1</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> hash</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">'apple'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">%</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> bucketCount;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> i2</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (i1 </span><span style="color:#D73A49;--shiki-dark:#F97583">^</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> hash</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(fp)) </span><span style="color:#D73A49;--shiki-dark:#F97583">%</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> bucketCount;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> buckets[i1].</span><span style="color:#6F42C1;--shiki-dark:#B392F0">delete</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(fp) </span><span style="color:#D73A49;--shiki-dark:#F97583">||</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> buckets[i2].</span><span style="color:#6F42C1;--shiki-dark:#B392F0">delete</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(fp);</span></span></code></pre>`);var K=s(G,8),j=r(K);e(j,()=>`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>load factor </mtext><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo><mtext>  </mtext><mo>=</mo><mtext>  </mtext><mfrac><mrow><mtext>number of stored items </mtext><mtext> </mtext><mi>n</mi></mrow><mrow><mtext>number of available slots </mtext><mtext> </mtext><mi>m</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\\text{load factor } (\\alpha) \\;=\\; 
\\frac{\\text{number of stored items }\\,n}
     {\\text{number of available slots }\\,m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">load factor </span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">number of available slots </span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">number of stored items </span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>`),o(K);var Z=s(K,6),V=r(Z);e(V,()=>`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>α</mi><mtext>CF</mtext></msub><mtext>  </mtext><mo>=</mo><mtext>  </mtext><mfrac><mtext>occupied slots</mtext><mrow><mtext>buckets</mtext><mo>×</mo><mtext>slots per bucket</mtext></mrow></mfrac></mrow><annotation encoding="application/x-tex">\\alpha_{\\text{CF}} \\;=\\;
\\frac{\\text{occupied slots}}{\\text{buckets} \\times \\text{slots per bucket}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">CF</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2519em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">buckets</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord text"><span class="mord">slots per bucket</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">occupied slots</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>`),o(Z);var Q=s(Z,46),P=r(Q);e(P,()=>`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>i</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>m</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>i</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mrow><mo fence="true">(</mo><msub><mi>i</mi><mn>1</mn></msub><mo>⊕</mo><mi>H</mi><mtext> ⁣</mtext><mrow><mo fence="true">(</mo><mi mathvariant="normal">fp</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>m</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\\begin{aligned}
i_1 &amp;= H(x) \\bmod m \\\\
i_2 &amp;= \\left( i_1 \\oplus H\\!\\left(\\operatorname{fp}(x)\\right) \\right) \\bmod m
\\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">m</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:-0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mop"><span class="mord mathrm">fp</span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span></span></span></span></span>`),o(Q);var U=s(Q,6);rs(U,{children:(As,Gs)=>{var Ds=xe();f(As,Ds)}});var M=s(U,4);rs(M,{children:(As,Gs)=>{var Ds=ve();f(As,Ds)}});var es=s(M,8),as=s(r(es)),ls=r(as);e(ls,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mo>−</mo><mi>f</mi></mrow></msup></mrow><annotation encoding="application/x-tex">2^{-f}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span></span></span></span></span></span></span></span>'),o(as),z(5),o(es);var ts=s(es,2),cs=r(ts);e(cs,()=>'<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mi>ϵ</mi><mo>≤</mo><mn>1</mn><mo>−</mo><msup><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>f</mi></mrow></msup><mo fence="true">)</mo></mrow><mrow><mn>2</mn><mi>b</mi></mrow></msup><mtext>  </mtext><mo>≈</mo><mtext>  </mtext><mfrac><mrow><mn>2</mn><mi>b</mi></mrow><msup><mn>2</mn><mi>f</mi></msup></mfrac></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(1)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">\\epsilon \\le 1 - \\left(1 - 2^{-f}\\right)^{2b} \\;\\approx\\; \\frac{2b}{2^{f}} \\tag{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">ϵ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.4881em;vertical-align:-0.35em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.1381em;"><span style="top:-3.352em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7751em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="tag"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">1</span></span><span class="mord">)</span></span></span></span></span></span>'),o(ts);var hs=s(ts,8),xs=r(hs);e(xs,()=>'<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mi>ε</mi><mo>≤</mo><mfrac><mrow><mn>2</mn><mi>b</mi></mrow><msup><mn>2</mn><mi>f</mi></msup></mfrac><mtext>  </mtext><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mtext>  </mtext><mi>f</mi><mo>≥</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mtext> ⁣</mtext><mfrac><mrow><mn>2</mn><mi>b</mi></mrow><mi>ε</mi></mfrac><mtext>  </mtext><mo>=</mo><mtext>  </mtext><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mtext> ⁣</mtext><mfrac><mn>1</mn><mi>ε</mi></mfrac><mo>+</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mo stretchy="false">(</mo><mn>2</mn><mi>b</mi><mo stretchy="false">)</mo></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(2)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">\\varepsilon \\le \\frac{2b}{2^{f}}\\;\\;\\Longrightarrow\\;\\;f \\ge \\log_{2}\\!\\frac{2b}{\\varepsilon} \\;=\\; \\log_{2}\\!\\frac{1}{\\varepsilon} + \\log_{2}(2b) \\tag{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">ε</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7751em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:-0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">ε</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:-0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">ε</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal">b</span><span class="mclose">)</span></span><span class="tag"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">2</span></span><span class="mord">)</span></span></span></span></span></span>'),o(hs);var ds=s(hs,4),vs=r(ds);e(vs,()=>'<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mi>f</mi><mo>≥</mo><mrow><mo fence="true">⌈</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mtext> ⁣</mtext><mfrac><mn>1</mn><mi>ϵ</mi></mfrac><mo>+</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mo stretchy="false">(</mo><mn>2</mn><mi>b</mi><mo stretchy="false">)</mo><mo fence="true">⌉</mo></mrow></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(3)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">f \\ge \\left\\lceil \\log_{2}\\!\\frac{1}{\\epsilon} + \\log_{2}(2b) \\right\\rceil \\tag{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">⌈</span></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:-0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">ϵ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">⌉</span></span></span></span><span class="tag"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">3</span></span><span class="mord">)</span></span></span></span></span></span>'),o(ds);var ys=s(ds,4),ms=r(ys),Es=r(ms),us=s(r(Es)),gs=r(us),v=r(gs);e(v,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ε</mi><mtext>bound</mtext></msub><mo>=</mo><mn>8</mn><mi mathvariant="normal">/</mi><msup><mn>2</mn><mi>f</mi></msup></mrow><annotation encoding="application/x-tex">\\varepsilon_{\\text{bound}} = 8/2^{f}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">bound</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0991em;vertical-align:-0.25em;"></span><span class="mord">8/</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span></span></span></span></span></span></span></span>'),o(gs),o(us),o(Es),o(ms);var D=s(ms),S=r(D),A=s(r(S)),O=r(A),ks=r(O);e(ks,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>8</mn><mi mathvariant="normal">/</mi><mn>256</mn><mo>=</mo><mn>0.03125</mn><mtext>  </mtext><mo stretchy="false">(</mo><mtext>  </mtext><mn>3.13</mn><mi mathvariant="normal">%</mi><mtext>  </mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">8/256 = 0.03125 \\;(\\;3.13\\%\\;)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">8/256</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.03125</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">3.13%</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mclose">)</span></span></span></span>'),o(O),o(A),o(S);var u=s(S),L=s(r(u)),R=r(L),J=r(R);e(J,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>8</mn><mi mathvariant="normal">/</mi><mn>4096</mn><mo>=</mo><mn>0.001953</mn><mtext>  </mtext><mo stretchy="false">(</mo><mtext>  </mtext><mn>0.195</mn><mi mathvariant="normal">%</mi><mtext>  </mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">8/4096 = 0.001953\\;(\\;0.195\\%\\;)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">8/4096</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.001953</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0.195%</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mclose">)</span></span></span></span>'),o(R),o(L),o(u);var fs=s(u),ns=s(r(fs)),ws=r(ns),ma=r(ws);e(ma,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>8</mn><mi mathvariant="normal">/</mi><mn>65536</mn><mo>=</mo><mn>0.00012207</mn><mtext>  </mtext><mo stretchy="false">(</mo><mtext>  </mtext><mn>0.0122</mn><mi mathvariant="normal">%</mi><mtext>  </mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">8/65 536 = 0.00012207\\;(\\;0.0122\\%\\;)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">8/65536</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.00012207</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0.0122%</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mclose">)</span></span></span></span>'),o(ws),o(ns),o(fs),o(D),o(ys),z(12),f(i,a)}const Be=Object.freeze(Object.defineProperty({__proto__:null,default:Ce,metadata:ca},Symbol.toStringTag,{value:"Module"})),ha={date:"2025-07-07",tags:["Bitwise"],keywords:["Bitwise tricks","Bitwise operations"],title:"Practical Bitwise Tricks in Everyday Code",preview:"An opinionated and short collection of bitwise tricks that make sense at an average 1x engineer's code.",draft:!1,links:["https://maltsev.space/blog/010-cuckoo-filters#fingerprints-and-partial-key-cuckoo-hashing","https://en.wikipedia.org/wiki/XOR_swap_algorithm#Reasons_for_avoidance_in_practice","#case-1-multiplying-and-dividing-by-two","#case-2-extracting-parts-of-a-big-value","#case-3-modulo-operation-for-power-of-two-integers","#case-4-working-with-binary-flags","#stay-hungry-reasonable","https://tech.michaelaltfield.net/2009/12/02/gcc-optimizations-for-arithmetic-operations-using-bit-shifts/","https://maltsev.space/blog/008-bloom-filters-pt1#wide-hash-split","https://github.com/seiflotfy/cuckoofilter/blob/master/util.go#L38","https://maltsev.space/blog/001-binary-shifts-for-flags"],readingTime:{text:"6 min read",minutes:5.67,time:340200,words:1134}},{date:Hn,tags:Pn,keywords:Ln,title:Wn,preview:Vn,draft:jn,links:On,readingTime:Rn}=ha;var Ae=C('<p>I’m not exactly a big fan of writing bitwise operations everywhere. Don’t get me wrong, I still enjoy this kind of “brain gymnastics”, but sometimes it gets out of hand.</p> <p>Let me show you a classic example. Can you guess what this code does?</p> <!> <p>Three XOR operations look neat, right? XOR tricks can be pretty cool when <a href="https://maltsev.space/blog/010-cuckoo-filters#fingerprints-and-partial-key-cuckoo-hashing" rel="nofollow">used properly</a>. But in this case, all it does is something very common in everyday code:</p> <!> <p>Yep, just a plain old swap of two variables.</p> <p>I’ve used the XOR version maybe twice in my life: once during a university assignment and once in early job interviews (which I’d rather not relive, lol). So, which version do you think is easier to read?</p> <p>If you’re unsure, here’s the funnier part: the XOR version <a href="https://en.wikipedia.org/wiki/XOR_swap_algorithm#Reasons_for_avoidance_in_practice" rel="nofollow">isn’t even faster</a> thanks to how modern CPUs handle operations.</p> <p>Still, you’ll run into this kind of code, especially in tight loops in libraries or low-level systems. In this short article, I’ll walk you through some real-world bitwise operations I’ve seen in the wild, the ones that make sense, and the ones I occasionally write myself.</p> <h2 id="contents"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#contents">#</a>Contents</h2> <ul><li><a href="#case-1-multiplying-and-dividing-by-two">Case 1: Multiplying and Dividing by Two</a></li> <li><a href="#case-2-extracting-parts-of-a-big-value">Case 2: Extracting Parts of a Big Value</a></li> <li><a href="#case-3-modulo-operation-for-power-of-two-integers">Case 3: Modulo Operation for Power-of-Two Integers</a></li> <li><a href="#case-4-working-with-binary-flags">Case 4: Working with Binary Flags</a></li> <li><a href="#stay-hungry-reasonable">Stay <del>Hungry</del> Reasonable</a></li></ul> <h2 id="case-1-multiplying-and-dividing-by-two"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#case-1-multiplying-and-dividing-by-two">#</a>Case 1: Multiplying and Dividing by Two</h2> <p>Let’s start with a simple micro-optimization—replacing multiplication and division by powers of two with bitwise shifts.</p> <p>If you’re not yet comfortable with binary math, here’s the basic idea: binary numbers are built on powers of two. Each bit represents a multiplier of 2 raised to some power.</p> <p>For example, the binary number <code>1011</code> is interpreted like this:</p> <div class="math math-display"><!></div> <p>You can think of each left shift (<code>&lt;&lt;</code>) as multiplying by 2, and each right shift (<code>&gt;&gt;</code>) as dividing by 2 — just like moving the decimal point in base-10 multiplies or divides by 10.</p> <!> <p>For example, if <code>var x = 6</code>, then:</p> <ul><li><code>x &lt;&lt; 1</code> becomes <code>12</code></li> <li><code>x &gt;&gt; 1</code> becomes <code>3</code></li></ul> <p>This works because shifting left fills in zeros on the right (doubling the value), while shifting right drops the least significant bit, i.e., halving it.</p> <div class="callout" data-callout="warning" data-collapsible="false"><div class="callout-title"><div class="callout-title-icon" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path><line x1="12" y1="9" x2="12" y2="13"></line><line x1="12" y1="17" x2="12.01" y2="17"></line></svg></div><div class="callout-title-text">Warning</div></div><div class="callout-content"><p>This is a very specific case. In most real-world code, you should stick with the <code>*</code> and <code>/</code> operators instead—they’re clearer and modern <a href="https://tech.michaelaltfield.net/2009/12/02/gcc-optimizations-for-arithmetic-operations-using-bit-shifts/" rel="nofollow">compilers optimize them just fine</a>. But this example shows how bitwise shifts directly affect the decimal representation of a value. So better to know this.</p></div></div> <h2 id="case-2-extracting-parts-of-a-big-value"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#case-2-extracting-parts-of-a-big-value">#</a>Case 2: Extracting Parts of a Big Value</h2> <p>Go on with another widespread use case. Imagine you’re working with a hashing function that gives you a 64-bit unsigned integer. But in your code, you actually need two 32-bit values instead. Maybe you want to use one for bucketing and the other for a cache key — whatever the case, you’d prefer to <a href="https://maltsev.space/blog/008-bloom-filters-pt1#wide-hash-split" rel="nofollow">avoid hashing twice</a> if you can just reuse the result.</p> <p>So, how do we split that big 64-bit value into smaller chunks?</p> <p>Again, the answer is <strong>bitwise shifts and binary masks:</strong></p> <!> <p>Now <code>hi</code> contains <code>0x11223344</code> and <code>lo</code> contains <code>0x55667788</code>.</p> <p>So what exactly happens:</p> <ul><li><code>hash &gt;&gt; 32</code> shifts the 64-bit value 32 bits to the right, dropping the lower half, leaving just the upper 32 bits.</li> <li><code>hash & 0xFFFFFFFF</code> masks the upper bits, keeping only the lower 32. The result of the bitwise AND will leave only those bits that are set both in the value and the mask. The upper bits will be reset in this example because they are all zero in the mask.</li></ul> <h2 id="case-3-modulo-operation-for-power-of-two-integers"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#case-3-modulo-operation-for-power-of-two-integers">#</a>Case 3: Modulo Operation for Power-of-Two Integers</h2> <p>This little trick always appears in real-world systems, often in <a href="https://github.com/seiflotfy/cuckoofilter/blob/master/util.go#L38" rel="nofollow">hash tables</a> and circular buffers.</p> <p>Let’s say you want to map a hashed value to an index in an array:</p> <!> <p>Here, <code>x</code> is a large hashed integer (often 64 bits), and you want to map it into an array of 8 buckets. The modulo operation (<code>%</code>) is the obvious choice, but it’s not the fastest one.</p> <p>When the array size is a <strong>power of two</strong> — like 2, 4, 8, 16, and so on — you can use bitwise masking instead:</p> <!> <p>Because when the divisor is a power of two, the result of <code>x % N</code> is just the last few bits of <code>x</code>. In this example:</p> <ul><li><code>8</code> in binary is <code>1000</code>, so <code>8 - 1 = 7</code> is <code>0111</code> (<code>0b111</code>)</li> <li>Doing <code>x & 0b111</code> keeps only the last 3 bits of <code>x</code>, which gives the same result as <code>x % 8</code></li></ul> <p>This is faster than the modulo operation, which usually requires a division under the hood.</p> <h2 id="case-4-working-with-binary-flags"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#case-4-working-with-binary-flags">#</a>Case 4: Working with Binary Flags</h2> <p>Bitwise flags are one of the oldest tricks and are still incredibly useful. They let you store and manipulate multiple boolean values in a single number. For example, if you change file permissions in Linux, you use binary flags.</p> <p>Instead of using a bunch of <code>bool</code> variables, you can just use bits to represent flags:</p> <!> <p>Each flag is a single bit turned on in a different position. Then, you can combine them using bitwise OR:</p> <!> <p>Now <code>permissions</code> hold both the “read” and “write” flags.</p> <p>To see if a specific flag is set, use bitwise AND:</p> <!> <p>If the flag bit is on, the result of the <code>&</code> will be non-zero.</p> <p>To turn off a specific flag, use bitwise AND with the negated flag:</p> <!> <p>Here, <code>~FlagWrite</code> flips the bits of <code>FlagWrite</code>, ones become zeros and vice-versa, so the AND clears set bits in <code>FlagWrite</code>.</p> <p>You can also flip a flag on/off using XOR:</p> <!> <p>If the flag is off, it turns on; if it is on, it turns off.</p> <p>Using bit flags is super compact; for example, one 64-bit integer can store 64 flags. This is especially handy when packing lots of booleans into memory-efficient structures and implementing a general approach to <a href="https://maltsev.space/blog/001-binary-shifts-for-flags" rel="nofollow">C-flavored enums, e.g., in C#</a>.</p> <h2 id="stay-hungry-reasonable"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#stay-hungry-reasonable">#</a>Stay <del>Hungry</del> Reasonable</h2> <p>I hope this article gave you a useful peek into some real-world bitwise operations and shared some of my experience using them in practice.</p> <p>Bitwise tricks can be powerful, fun, and sometimes even elegant — but like many low-level optimizations, they come with a trade-off in <strong>readability</strong>.</p> <p>In most cases, writing code that’s easy to understand is far more valuable than squeezing out a few extra CPU cycles. Your future self or teammate will thank you when debugging that code six months later.</p> <p>So, use bitwise operations wisely. When things start looking too clever or cryptic, take a step back. A small, well-named function or abstraction helps distinguish between a clever trick and an unreadable mess.</p>',1);function De(i){var a=Ae(),n=s(ss(a),4);e(n,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">a </span><span style="color:#D73A49;--shiki-dark:#F97583">^=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> b;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">b </span><span style="color:#D73A49;--shiki-dark:#F97583">^=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> a;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">a </span><span style="color:#D73A49;--shiki-dark:#F97583">^=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> b;</span></span></code></pre>`);var p=s(n,4);e(p,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> temp</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> a;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">a </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> b;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">b </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> temp;</span></span></code></pre>`);var l=s(p,22),d=r(l);e(d,()=>'<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1</mn><mo>⋅</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><mn>0</mn><mo>⋅</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>1</mn><mo>⋅</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><mn>1</mn><mo>⋅</mo><msup><mn>2</mn><mn>0</mn></msup><mo>=</mo><mn>8</mn><mo>+</mo><mn>0</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>11</mn></mrow><annotation encoding="application/x-tex">1⋅2^3+0⋅2^2+1⋅2^1+1⋅2^0=8+0+2+1=11</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">11</span></span></span></span></span>'),o(l);var c=s(l,4);e(c,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> doubled</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x3C;&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; </span><span style="color:#6A737D;--shiki-dark:#6A737D">// x * 2</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> half</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="color:#D73A49;--shiki-dark:#F97583">>></span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;    </span><span style="color:#6A737D;--shiki-dark:#6A737D">// x / 2</span></span></code></pre>`);var k=s(c,18);e(k,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">ulong</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> hash</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0x1122334455667788</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">uint</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> hi</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#D73A49;--shiki-dark:#F97583">uint</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)(hash </span><span style="color:#D73A49;--shiki-dark:#F97583">>></span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 32</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);        </span><span style="color:#6A737D;--shiki-dark:#6A737D">// extract the upper 32 bits</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">uint</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> lo</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#D73A49;--shiki-dark:#F97583">uint</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)(hash </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0xFFFFFFFF</span><span style="color:#24292E;--shiki-dark:#E1E4E8">); </span><span style="color:#6A737D;--shiki-dark:#6A737D">// extract the lower 32 bits</span></span></code></pre>`);var m=s(k,14);e(m,()=>'<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> index</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="color:#D73A49;--shiki-dark:#F97583">%</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 8</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></code></pre>');var h=s(m,6);e(h,()=>'<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> index</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> x </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 7</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; </span><span style="color:#6A737D;--shiki-dark:#6A737D">// same as x % 8, but faster</span></span></code></pre>');var y=s(h,14);e(y,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#D73A49;--shiki-dark:#F97583"> int</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> FlagRead</span><span style="color:#D73A49;--shiki-dark:#F97583">   =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583"> &#x3C;&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; </span><span style="color:#6A737D;--shiki-dark:#6A737D">// 0001</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#D73A49;--shiki-dark:#F97583"> int</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> FlagWrite</span><span style="color:#D73A49;--shiki-dark:#F97583">  =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583"> &#x3C;&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; </span><span style="color:#6A737D;--shiki-dark:#6A737D">// 0010</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#D73A49;--shiki-dark:#F97583"> int</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> FlagDelete</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583"> &#x3C;&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; </span><span style="color:#6A737D;--shiki-dark:#6A737D">// 0100</span></span></code></pre>`);var E=s(y,4);e(E,()=>'<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> permissions</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> FlagRead </span><span style="color:#D73A49;--shiki-dark:#F97583">|</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> FlagWrite; </span><span style="color:#6A737D;--shiki-dark:#6A737D">// 0001 | 0010 = 0011</span></span></code></pre>');var g=s(E,6);e(g,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ((permissions </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> FlagRead) </span><span style="color:#D73A49;--shiki-dark:#F97583">!=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    Console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">WriteLine</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"Can read!"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var B=s(g,6);e(B,()=>'<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">permissions </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x26;=</span><span style="color:#D73A49;--shiki-dark:#F97583"> ~</span><span style="color:#24292E;--shiki-dark:#E1E4E8">FlagWrite; </span><span style="color:#6A737D;--shiki-dark:#6A737D">// remove write access</span></span></code></pre>');var F=s(B,6);e(F,()=>'<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">permissions </span><span style="color:#D73A49;--shiki-dark:#F97583">^=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> FlagDelete; </span><span style="color:#6A737D;--shiki-dark:#6A737D">// toggles delete permission</span></span></code></pre>'),z(14),f(i,a)}const _e=Object.freeze(Object.defineProperty({__proto__:null,default:De,metadata:ha},Symbol.toStringTag,{value:"Module"})),da={date:"2025-07-15",tags:["Bitwise","C#"],keywords:["C#","Bitwise tricks","Hash table","Performance"],title:"SIMD Within a Register: How I Doubled Hash Table Lookup Performance",preview:"It started with a simple thought: four bytes in a hash table bucket look just like an integer. Luckily, this one idea led to a deep dive into bit-twiddling and a 2x performance boost.",draft:!1,links:["https://maltsev.space/blog/010-cuckoo-filters","#a-flexible-and-simple-implementation","#migrating-to-a-uint-table","#finding-a-byte-with-masking","#xor-to-the-rescue","#what-about-existing-zeros","#putting-it-all-together","#final-thoughts","https://en.wikipedia.org/wiki/Compare-and-swap","https://graphics.stanford.edu/%7Eseander/bithacks.html","https://maltsev.space/blog/011-practical-bitwise-tricks-in-everyday-code"],readingTime:{text:"7 min read",minutes:6.27,time:376200,words:1254}},{date:$n,tags:qn,keywords:Nn,title:Gn,preview:Un,draft:Yn,links:Xn,readingTime:Kn}=da;var Te=Vs(`<svg xmlns="http://www.w3.org/2000/svg" width="648" height="80" class="svgbob"><style>.svgbob line, .svgbob path, .svgbob circle, .svgbob rect, .svgbob polygon {
  stroke: black;
  stroke-width: 2;
  stroke-opacity: 1;
  fill-opacity: 1;
  stroke-linecap: round;
  stroke-linejoin: miter;
}

.svgbob text {
  white-space: pre;
  fill: black;
  font-family: Iosevka Fixed, monospace;
  font-size: 14px;
}

.svgbob rect.backdrop {
  stroke: none;
  fill: transparent;
}

.svgbob .broken {
  stroke-dasharray: 8;
}

.svgbob .filled {
  fill: black;
}

.svgbob .bg_filled {
  fill: transparent;
  stroke-width: 1;
}

.svgbob .nofill {
  fill: transparent;
}

.svgbob .end_marked_arrow {
  marker-end: url(#arrow);
}

.svgbob .start_marked_arrow {
  marker-start: url(#arrow);
}

.svgbob .end_marked_diamond {
  marker-end: url(#diamond);
}

.svgbob .start_marked_diamond {
  marker-start: url(#diamond);
}

.svgbob .end_marked_circle {
  marker-end: url(#circle);
}

.svgbob .start_marked_circle {
  marker-start: url(#circle);
}

.svgbob .end_marked_open_circle {
  marker-end: url(#open_circle);
}

.svgbob .start_marked_open_circle {
  marker-start: url(#open_circle);
}

.svgbob .end_marked_big_open_circle {
  marker-end: url(#big_open_circle);
}

.svgbob .start_marked_big_open_circle {
  marker-start: url(#big_open_circle);
}</style><defs><marker id="arrow" viewBox="-2 -2 8 8" refX="4" refY="2" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><polygon points="0,0 0,4 4,2 0,0"></polygon></marker><marker id="diamond" viewBox="-2 -2 8 8" refX="4" refY="2" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><polygon points="0,2 2,0 4,2 2,4 0,2"></polygon></marker><marker id="circle" viewBox="0 0 8 8" refX="4" refY="4" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><circle cx="4" cy="4" r="2" class="filled"></circle></marker><marker id="open_circle" viewBox="0 0 8 8" refX="4" refY="4" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><circle cx="4" cy="4" r="2" class="bg_filled"></circle></marker><marker id="big_open_circle" viewBox="0 0 8 8" refX="4" refY="4" markerWidth="7" markerHeight="7" orient="auto-start-reverse"><circle cx="4" cy="4" r="3" class="bg_filled"></circle></marker></defs><rect class="backdrop" x="0" y="0" width="648" height="80"></rect><text x="114" y="12">Bucket</text><text x="170" y="12">0</text><text x="74" y="44">3A</text><text x="114" y="44">00</text><text x="154" y="44">B7</text><text x="194" y="44">F2</text><text x="290" y="12">Bucket</text><text x="346" y="12">1</text><text x="250" y="44">4C</text><text x="290" y="44">91</text><text x="330" y="44">00</text><text x="370" y="44">DE</text><text x="530" y="12">Bucket</text><text x="586" y="12">n</text><text x="490" y="44">AA</text><text x="530" y="44">00</text><text x="570" y="44">5F</text><text x="610" y="44">C8</text><text x="2" y="44">Table:</text><text x="426" y="44">...</text><g><line x1="60" y1="24" x2="220" y2="24" class="solid"></line><line x1="60" y1="24" x2="60" y2="56" class="solid"></line><line x1="100" y1="24" x2="100" y2="56" class="solid"></line><line x1="140" y1="24" x2="140" y2="56" class="solid"></line><line x1="180" y1="24" x2="180" y2="56" class="solid"></line><line x1="220" y1="24" x2="220" y2="56" class="solid"></line><line x1="60" y1="56" x2="220" y2="56" class="solid"></line></g><g><line x1="236" y1="24" x2="396" y2="24" class="solid"></line><line x1="236" y1="24" x2="236" y2="56" class="solid"></line><line x1="276" y1="24" x2="276" y2="56" class="solid"></line><line x1="316" y1="24" x2="316" y2="56" class="solid"></line><line x1="356" y1="24" x2="356" y2="56" class="solid"></line><line x1="396" y1="24" x2="396" y2="56" class="solid"></line><line x1="236" y1="56" x2="396" y2="56" class="solid"></line></g><g><line x1="476" y1="24" x2="636" y2="24" class="solid"></line><line x1="476" y1="24" x2="476" y2="56" class="solid"></line><line x1="516" y1="24" x2="516" y2="56" class="solid"></line><line x1="556" y1="24" x2="556" y2="56" class="solid"></line><line x1="596" y1="24" x2="596" y2="56" class="solid"></line><line x1="636" y1="24" x2="636" y2="56" class="solid"></line><line x1="476" y1="56" x2="636" y2="56" class="solid"></line></g></svg>`),Ie=C('<table><thead><tr><th>Method</th><th>Operations</th><th align="right">Mean</th><th align="right">Ratio</th></tr></thead><tbody><tr><td><strong>ByteTable_PositiveLookups</strong></td><td><strong>128</strong></td><td align="right"><strong>239.9 ns</strong></td><td align="right"><strong>1.00</strong></td></tr><tr><td>IntTable_PositiveLookups</td><td>128</td><td align="right">166.9 ns</td><td align="right">0.70</td></tr><tr><td>ByteTable_NegativeLookups</td><td>128</td><td align="right">321.9 ns</td><td align="right">1.34</td></tr><tr><td>IntTable_NegativeLookups</td><td>128</td><td align="right">203.9 ns</td><td align="right">0.85</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>ByteTable_PositiveLookups</strong></td><td><strong>1024</strong></td><td align="right"><strong>1,847.0 ns</strong></td><td align="right"><strong>1.00</strong></td></tr><tr><td>IntTable_PositiveLookups</td><td>1024</td><td align="right">1,300.9 ns</td><td align="right">0.70</td></tr><tr><td>ByteTable_NegativeLookups</td><td>1024</td><td align="right">2,523.7 ns</td><td align="right">1.37</td></tr><tr><td>IntTable_NegativeLookups</td><td>1024</td><td align="right">1,597.2 ns</td><td align="right">0.86</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>ByteTable_PositiveLookups</strong></td><td><strong>1048576</strong></td><td align="right"><strong>1,907,503.2 ns</strong></td><td align="right"><strong>1.00</strong></td></tr><tr><td>IntTable_PositiveLookups</td><td>1048576</td><td align="right">1,762,474.3 ns</td><td align="right">0.92</td></tr><tr><td>ByteTable_NegativeLookups</td><td>1048576</td><td align="right">2,575,301.5 ns</td><td align="right">1.35</td></tr><tr><td>IntTable_NegativeLookups</td><td>1048576</td><td align="right">1,637,653.6 ns</td><td align="right">0.86</td></tr></tbody></table>'),Se=C('<table><thead><tr><th>Method</th><th>Operations</th><th align="right">Mean</th><th align="right">Ratio</th></tr></thead><tbody><tr><td><strong>ByteTable_PositiveLookups</strong></td><td><strong>128</strong></td><td align="right"><strong>239.7 ns</strong></td><td align="right"><strong>1.00</strong></td></tr><tr><td>IntTable_PositiveLookups</td><td>128</td><td align="right">366.8 ns</td><td align="right">1.53</td></tr><tr><td>ByteTable_NegativeLookups</td><td>128</td><td align="right">322.6 ns</td><td align="right">1.35</td></tr><tr><td>IntTable_NegativeLookups</td><td>128</td><td align="right">429.2 ns</td><td align="right">1.79</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>ByteTable_PositiveLookups</strong></td><td><strong>1024</strong></td><td align="right"><strong>1,850.0 ns</strong></td><td align="right"><strong>1.00</strong></td></tr><tr><td>IntTable_PositiveLookups</td><td>1024</td><td align="right">2,877.2 ns</td><td align="right">1.56</td></tr><tr><td>ByteTable_NegativeLookups</td><td>1024</td><td align="right">2,512.9 ns</td><td align="right">1.36</td></tr><tr><td>IntTable_NegativeLookups</td><td>1024</td><td align="right">3,396.8 ns</td><td align="right">1.84</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>ByteTable_PositiveLookups</strong></td><td><strong>1048576</strong></td><td align="right"><strong>1,909,607.9 ns</strong></td><td align="right"><strong>1.00</strong></td></tr><tr><td>IntTable_PositiveLookups</td><td>1048576</td><td align="right">3,352,454.1 ns</td><td align="right">1.76</td></tr><tr><td>ByteTable_NegativeLookups</td><td>1048576</td><td align="right">2,566,696.5 ns</td><td align="right">1.34</td></tr><tr><td>IntTable_NegativeLookups</td><td>1048576</td><td align="right">3,536,050.6 ns</td><td align="right">1.85</td></tr></tbody></table>'),ze=C('<table><thead><tr><th>Method</th><th>Operations</th><th align="right">Mean</th><th align="right">Ratio</th></tr></thead><tbody><tr><td><strong>ByteTable_PositiveLookups</strong></td><td><strong>128</strong></td><td align="right"><strong>245.2 ns</strong></td><td align="right"><strong>1.00</strong></td></tr><tr><td>IntTable_PositiveLookups</td><td>128</td><td align="right">147.7 ns</td><td align="right">0.60</td></tr><tr><td>ByteTable_NegativeLookups</td><td>128</td><td align="right">324.1 ns</td><td align="right">1.32</td></tr><tr><td>IntTable_NegativeLookups</td><td>128</td><td align="right">147.1 ns</td><td align="right">0.60</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>ByteTable_PositiveLookups</strong></td><td><strong>1024</strong></td><td align="right"><strong>1,845.6 ns</strong></td><td align="right"><strong>1.00</strong></td></tr><tr><td>IntTable_PositiveLookups</td><td>1024</td><td align="right">1,139.4 ns</td><td align="right">0.62</td></tr><tr><td>ByteTable_NegativeLookups</td><td>1024</td><td align="right">2,561.2 ns</td><td align="right">1.39</td></tr><tr><td>IntTable_NegativeLookups</td><td>1024</td><td align="right">1,136.3 ns</td><td align="right">0.62</td></tr><tr><td></td><td></td><td align="right"></td><td align="right"></td></tr><tr><td><strong>ByteTable_PositiveLookups</strong></td><td><strong>1048576</strong></td><td align="right"><strong>1,908,031.9 ns</strong></td><td align="right"><strong>1.00</strong></td></tr><tr><td>IntTable_PositiveLookups</td><td>1048576</td><td align="right">1,170,627.6 ns</td><td align="right">0.61</td></tr><tr><td>ByteTable_NegativeLookups</td><td>1048576</td><td align="right">2,574,882.8 ns</td><td align="right">1.35</td></tr><tr><td>IntTable_NegativeLookups</td><td>1048576</td><td align="right">1,172,802.0 ns</td><td align="right">0.61</td></tr></tbody></table>'),Me=C('<p>While working on a <a href="https://maltsev.space/blog/010-cuckoo-filters" rel="nofollow">Cuckoo Filter</a> implementation in C#, I created an array-like structure for the underlying hash table. I chose an 8-bit fingerprint: it aligns nicely on a byte boundary and still keeps the false-positive rate around <strong>3 %</strong>.</p> <p>The layout looked straightforward—just a byte array where the start of each bucket is calculated as <code>bucketIdx * bucketSize</code>. The size of each bucket is 4 slots, which is a solid choice for Cuckoo Filter.</p> <!> <p>But those four bytes in a bucket reminded me of something. They <em>feel</em> like … an integer!</p> <p>I wasn’t chasing ultra-low latency—after all, this is C#—but I couldn’t resist experimenting. Could I speed up lookups in my Cuckoo Filter by replacing the 4-byte bucket with a plain old 32-bit integer?</p> <p>Time to find out. 💪</p> <h2 id="contents"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#contents">#</a>Contents</h2> <ul><li><a href="#a-flexible-and-simple-implementation">A Flexible and Simple Implementation</a></li> <li><a href="#migrating-to-a-uint-table">Migrating to a <code>uint</code> Table</a></li> <li><a href="#finding-a-byte-with-masking">Finding a Byte with Masking</a></li> <li><a href="#xor-to-the-rescue">XOR to the Rescue</a></li> <li><a href="#what-about-existing-zeros">What About Existing Zeros?</a></li> <li><a href="#putting-it-all-together">Putting It All Together</a></li> <li><a href="#final-thoughts">Final Thoughts</a></li></ul> <h2 id="a-flexible-and-simple-implementation"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#a-flexible-and-simple-implementation">#</a>A Flexible and Simple Implementation</h2> <p>Here’s the naïve storage I began with. To keep the rest of the code clean, all table logic lives in its own class, whose heart is a pre-allocated byte array:</p> <!> <p>Each bucket has 4 slots, so there was no need for a second dimension; mapping a key to its bucket is obvious:</p> <!> <p>Checking whether a particular fingerprint (a single byte) sits in a bucket is just as obvious:</p> <!> <p>(Please ignore the missing bounds checks—they’re not the point today.)</p> <p>I’m no bit-twiddling wizard—I live in a cosy, GC-collected world—but those 4 bytes kept itching. A bucket lines up <em>perfectly</em> with a 32-bit <code>uint</code>; that opens the door to a future lock-free <a href="https://en.wikipedia.org/wiki/Compare-and-swap" rel="nofollow">compare-and-swap</a>. So I decided to play.</p> <h2 id="migrating-to-a-uint-table"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#migrating-to-a-uint-table">#</a>Migrating to a <code>uint</code> Table</h2> <p>Switching the backing array is trivial because the hash table is still one-dimensional:</p> <!> <p>Now let’s refactor the lookup:</p> <!> <p>The bucket offset disappears because each <code>uint</code> is a bucket. But I’ve lost the luxury of direct indexing—unless I convert the integer to bytes first:</p> <!> <p>I ran a quick benchmark on both <code>uint</code>-based lookups, and the results were revealing. The shifting version gave a nice speed boost, about <strong>35%</strong> faster than the original byte-array loop. I’ve also tested the unrolled loop, but it showed no significant improvement because the compiler has already unrolled it.</p> <!> <p>The <code>BitConverter</code> approach, however, was a step backward. It was even slower than the original, likely due to the additional <code>Span</code> overhead. I’m not about to introduce complexity for negative gain, so the <code>BitConverter</code> version was a non-starter.</p> <!> <div class="callout" data-callout="question" data-collapsible="false"><div class="callout-title"><div class="callout-title-icon" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path><line x1="12" y1="17" x2="12.01" y2="17"></line></svg></div><div class="callout-title-text">So what’s next?</div></div><div class="callout-content"><p>Even the shifting version is quite performant, can we do better? Maybe just eliminate the loop entirely?</p></div></div> <h2 id="finding-a-byte-with-masking"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#finding-a-byte-with-masking">#</a>Finding a Byte with Masking</h2> <p>Long ago I bookmarked Sean Anderson’s great <em><a href="https://graphics.stanford.edu/%7Eseander/bithacks.html" rel="nofollow">Bit Twiddling Hacks</a></em>. One gem there—<em>Determine if a word has a zero byte</em>—is exactly what I need. The C# version is nearly identical:</p> <!> <p>Admittedly opaque, so let’s unpack it.</p> <p>The core of the trick is <code>(v - 0x01010101U) & ~v</code>. This expression has a special property:</p> <ul><li><strong>For any non-zero byte b</strong>, the most significant bit of <code>(b - 1) & ~b</code> will always be <code>0</code>.</li> <li><strong>For a zero-byte b = 0x00</strong>, the expression becomes <code>(0x00 - 1) & ~0x00</code>, which is <code>0xFF & 0xFF = 0xFF</code>. The most significant bit is <code>1</code>.</li></ul> <p>So, this operation creates a “marker” bit (it sets the most significant bit to <code>1</code>) in any byte position that was originally <code>0x00</code>.</p> <p>Let’s apply it to our <code>v</code>, e.g., <code>0x4462002E</code>:</p> <p>First, we subtract <code>0x01010101U</code>.</p> <div class="math math-display"><!></div> <div class="callout" data-callout="note" data-collapsible="false"><div class="callout-title"><div class="callout-title-icon" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="2" x2="22" y2="6"></line><path d="M7.5 20.5 19 9l-4-4L3.5 16.5 2 22z"></path></svg></div><div class="callout-title-text">Note</div></div><div class="callout-content"><p>Note that this is a single 32-bit subtraction, so borrows can cross byte boundaries. The <code>0x00</code> byte borrows from <code>0x62</code>, resulting in <code>0x...60FF...</code>.</p></div></div> <p>Second, we apply a bitwise NOT to the original value:</p> <div class="math math-display"><!></div> <p>Now, <code>&</code> them together:</p> <div class="math math-display"><!></div> <p>Notice that the third byte from the left is <code>0xFF</code>. Its most significant bit is <code>1</code>, indicating that this was our zero-byte position.</p> <p>The final <code>& 0x80808080U</code> is a mask that removes all other bits, leaving only the most significant bit of each byte.</p> <div class="math math-display"><!></div> <p>The method returns the result of <code>0x00008000 != 0</code>. Since <code>0x8000</code> is not zero, the expression is <code>true</code>, and the method correctly reports that the zero byte was found.</p> <p>Great, now I can detect a zero byte without branches. All that remains is to <em>turn the byte I’m searching for into zero</em>.</p> <h2 id="xor-to-the-rescue"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#xor-to-the-rescue">#</a>XOR to the Rescue</h2> <p>Let’s assume our integer, aka bucket, is <code>0x12345678</code> and I’m looking for byte <code>0x56</code>. Without shifts, this seems tough. Luckily, all we need to do is transform the <code>0x56</code> byte to <code>0x00</code>.</p> <div class="callout" data-callout="note" data-collapsible="false"><div class="callout-title"><div class="callout-title-icon" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="2" x2="22" y2="6"></line><path d="M7.5 20.5 19 9l-4-4L3.5 16.5 2 22z"></path></svg></div><div class="callout-title-text">Note</div></div><div class="callout-content"><p>What happens to the other bytes is irrelevant, because our <code>HasZero</code> trick only cares if <em>any</em> byte is zero.</p></div></div> <p>The XOR (<code>^</code>) operator has a useful property: <code>A ^ B = 0</code> if and only if <code>A == B</code>. So, if we XOR the entire bucket with a repeating mask of our target byte, only the matching byte will become zero.</p> <div class="math math-display"><!></div> <p>So the remaining part of this puzzle is to make a repetitive mask, which is pretty arithmetic: I should multiply target byte by <code>0x01010101U</code>:</p> <div class="math math-display"><!></div> <h2 id="what-about-existing-zeros"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#what-about-existing-zeros">#</a>What About Existing Zeros?</h2> <p>A careful reader might ask: what happens if the bucket <em>already</em> has a zero byte in it? Does that mess up the logic?</p> <p>Let’s say our bucket is <code>0xAA00CCDD</code> and we’re searching for a non-zero fingerprint like <code>0xBB</code>. The XOR operation transforms the original zero into a non-zero value, so <code>HasZero</code> correctly returns <code>false</code>.</p> <div class="math math-display"><!></div> <p>Now, what if we search for <code>0x00</code> itself (an empty slot in my case)? The mask is <code>0x00000000</code>, so the XOR leaves the bucket unchanged. <code>HasZero</code> is then applied to the result, which correctly finds the pre-existing zero and returns <code>true</code>.</p> <div class="math math-display"><!></div> <p>So no, nothing breaks, the algorithm is still robust: <code>HasZero</code> only gives a positive result if a zero byte exists after the XOR, which only happens if our target fingerprint was in the bucket to begin with.</p> <h2 id="putting-it-all-together"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#putting-it-all-together">#</a>Putting It All Together</h2> <p>Here’s the final, branch-free lookup:</p> <!> <p>We XOR to zero-out matching bytes, then use the bit-twiddling trick to see if any byte is zero.</p> <p>The benchmarks confirmed this bit-twiddling exercise was well worth the effort. Positive lookups became over <strong>60% faster</strong>, while negative lookups became <strong>more than twice as fast</strong> compared to the original byte-array implementation. It’s a significant leap over the shifting version, too. While readability certainly took a hit, the raw performance gain is a trade-off I’m ok with.</p> <!> <h2 id="final-thoughts"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#final-thoughts">#</a>Final Thoughts</h2> <p>I’m still not a huge fan of stuffing dense <a href="https://maltsev.space/blog/011-practical-bitwise-tricks-in-everyday-code" rel="nofollow">bit tricks</a> into production C#—they can be hard to read and even harder to maintain if something goes wrong. But I think this little adventure has been worth it: the lookup path is now twice as fast, and the codebase is still compact enough to keep the trick well-commented. I hope these notes save someone else a detour—or at the very least that you enjoyed this little optimization trip with me.</p>',1);function He(i){var a=Me(),n=s(ss(a),4);rs(n,{children:(P,U)=>{var M=Te();f(P,M)}});var p=s(n,16);e(p,()=>'<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">private</span><span style="color:#D73A49;--shiki-dark:#F97583"> readonly</span><span style="color:#D73A49;--shiki-dark:#F97583"> byte</span><span style="color:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="color:#6F42C1;--shiki-dark:#B392F0">_table</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></code></pre>');var l=s(p,4);e(l,()=>'<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> offset</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> bucketIdx </span><span style="color:#D73A49;--shiki-dark:#F97583">*</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 4</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></code></pre>');var d=s(l,4);e(d,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> bool</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Contains</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">byte</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> fingerprint</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">uint</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> bucketIdx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> s</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> bucketIdx </span><span style="color:#D73A49;--shiki-dark:#F97583">*</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 4</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> i</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> s; i </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> s </span><span style="color:#D73A49;--shiki-dark:#F97583">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> BucketSize; i</span><span style="color:#D73A49;--shiki-dark:#F97583">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (_table[i] </span><span style="color:#D73A49;--shiki-dark:#F97583">==</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> fingerprint) </span><span style="color:#D73A49;--shiki-dark:#F97583">return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> false</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var c=s(d,10);e(c,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#B31D28;--shiki-dark:#FDAEB7">- private readonly byte[] _table;</span></span>
<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">+ private readonly uint[] _table;</span></span></code></pre>`);var k=s(c,4);e(k,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">public bool Contains(byte fingerprint, uint bucketIdx)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#B31D28;--shiki-dark:#FDAEB7">-   var s = bucketIdx * 4;</span></span>
<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">+   var bucket = _table[bucketIdx];</span></span>
<span class="line"><span style="color:#B31D28;--shiki-dark:#FDAEB7">-   for (var i = s; i &#x3C; s + BucketSize; i++)</span></span>
<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">+   for (var i = 0; i &#x3C; BucketSize; i++)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#B31D28;--shiki-dark:#FDAEB7">-       if (_table[i] == fingerprint) return true;</span></span>
<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">+       var shift = i * 8;</span></span>
<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">+       var fp = (byte)(bucket >> shift);</span></span>
<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">+       if (fp == fingerprint) return true;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    return false;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var m=s(k,4);e(m,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  Span</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#D73A49;--shiki-dark:#F97583">byte</span><span style="color:#24292E;--shiki-dark:#E1E4E8">> </span><span style="color:#6F42C1;--shiki-dark:#B392F0">bucketBytes</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> stackalloc</span><span style="color:#D73A49;--shiki-dark:#F97583"> byte</span><span style="color:#24292E;--shiki-dark:#E1E4E8">[</span><span style="color:#D73A49;--shiki-dark:#F97583">sizeof</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">uint</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)];</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  BitConverter.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">TryWriteBytes</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(bucketBytes, _table[bucketIdx]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> i</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; i </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> BucketSize; i</span><span style="color:#D73A49;--shiki-dark:#F97583">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">      var</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> fp</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> bucketBytes[i];</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (fp </span><span style="color:#D73A49;--shiki-dark:#F97583">==</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> fingerprint) </span><span style="color:#D73A49;--shiki-dark:#F97583">return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  &#125;</span></span></code></pre>`);var h=s(m,4);rs(h,{children:(P,U)=>{var M=Ie();f(P,M)}});var y=s(h,4);rs(y,{children:(P,U)=>{var M=Se();f(P,M)}});var E=s(y,8);e(E,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">private</span><span style="color:#D73A49;--shiki-dark:#F97583"> static</span><span style="color:#D73A49;--shiki-dark:#F97583"> bool</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> HasZero</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">uint</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> v</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ((v </span><span style="color:#D73A49;--shiki-dark:#F97583">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0x01010101U</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="color:#D73A49;--shiki-dark:#F97583"> ~</span><span style="color:#24292E;--shiki-dark:#E1E4E8">v </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0x80808080U</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">!=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var g=s(E,14),B=r(g);e(B,()=>`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="right" columnspacing="1em" rowlines="none solid"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mtext mathvariant="monospace">01000100</mtext><mtext>  </mtext><mtext mathvariant="monospace">01100010</mtext><mtext>  </mtext><mtext mathvariant="monospace">00000000</mtext><mtext>  </mtext><mtext mathvariant="monospace">00101110</mtext></mrow><mtext>  </mtext><mo stretchy="false">(</mo><mtext mathvariant="monospace">0x4462002E</mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mtext>  </mtext><mrow><mtext mathvariant="monospace">00000001</mtext><mtext>  </mtext><mtext mathvariant="monospace">00000001</mtext><mtext>  </mtext><mtext mathvariant="monospace">00000001</mtext><mtext>  </mtext><mtext mathvariant="monospace">00000001</mtext></mrow><mtext>  </mtext><mo stretchy="false">(</mo><mtext mathvariant="monospace">0x01010101</mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mtext mathvariant="monospace">01000011</mtext><mtext>  </mtext><mtext mathvariant="monospace">01100000</mtext><mtext>  </mtext><mtext mathvariant="monospace">11111111</mtext><mtext>  </mtext><mtext mathvariant="monospace">00101101</mtext></mrow><mtext>  </mtext><mo stretchy="false">(</mo><mtext mathvariant="monospace">0x4360FF2D</mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\\begin{array}{r}
\\texttt{01000100\\;01100010\\;00000000\\;00101110}\\;(\\texttt{0x4462002E}) \\\\[-2pt]
-\\;
\\texttt{00000001\\;00000001\\;00000001\\;00000001}\\;(\\texttt{0x01010101}) \\\\ \\hline
\\texttt{01000011\\;01100000\\;11111111\\;00101101}\\;(\\texttt{0x4360FF2D})
\\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.4em;vertical-align:-1.45em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.95em;"><span style="top:-3.95em;"><span class="pstrut" style="height:3.95em;"></span><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.95em;"><span style="top:-4.11em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord texttt">01000100</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">01100010</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00000000</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00101110</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">0x4462002E</span></span><span class="mclose">)</span></span></span><span style="top:-3.11em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord text"><span class="mord texttt">00000001</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00000001</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00000001</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00000001</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">0x01010101</span></span><span class="mclose">)</span></span></span><span style="top:-1.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord texttt">01000011</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">01100000</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">11111111</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00101101</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">0x4360FF2D</span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span style="top:-3.7em;"><span class="pstrut" style="height:3.95em;"></span><span class="hline" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span></span></span></span></span></span></span></span></span></span>`),o(g);var F=s(g,6),_=r(F);e(_,()=>`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="right" columnspacing="1em" rowlines="solid"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">¬</mi><mtext>  </mtext><mrow><mtext mathvariant="monospace">01000100</mtext><mtext>  </mtext><mtext mathvariant="monospace">01100010</mtext><mtext>  </mtext><mtext mathvariant="monospace">00000000</mtext><mtext>  </mtext><mtext mathvariant="monospace">00101110</mtext></mrow><mtext>  </mtext><mo stretchy="false">(</mo><mtext mathvariant="monospace">0x4462002E</mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mtext mathvariant="monospace">10111011</mtext><mtext>  </mtext><mtext mathvariant="monospace">10011101</mtext><mtext>  </mtext><mtext mathvariant="monospace">11111111</mtext><mtext>  </mtext><mtext mathvariant="monospace">11010001</mtext></mrow><mtext>  </mtext><mo stretchy="false">(</mo><mtext mathvariant="monospace">0xBB9DFFD1</mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\\begin{array}{r}
\\neg\\;
\\texttt{01000100\\;01100010\\;00000000\\;00101110}\\;(\\texttt{0x4462002E}) \\\\ \\hline
\\texttt{10111011\\;10011101\\;11111111\\;11010001}\\;(\\texttt{0xBB9DFFD1})
\\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.45em;"><span class="pstrut" style="height:3.45em;"></span><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">¬</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord text"><span class="mord texttt">01000100</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">01100010</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00000000</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00101110</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">0x4462002E</span></span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord texttt">10111011</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">10011101</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">11111111</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">11010001</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">0xBB9DFFD1</span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span style="top:-3.7em;"><span class="pstrut" style="height:3.45em;"></span><span class="hline" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span></span></span>`),o(F);var T=s(F,4),x=r(T);e(x,()=>`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="right" columnspacing="1em" rowlines="none solid"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mtext mathvariant="monospace">01000011</mtext><mtext>  </mtext><mtext mathvariant="monospace">01100000</mtext><mtext>  </mtext><mtext mathvariant="monospace">11111111</mtext><mtext>  </mtext><mtext mathvariant="monospace">00101101</mtext></mrow><mtext>  </mtext><mo stretchy="false">(</mo><mtext mathvariant="monospace">0x4360FF2D</mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo mathvariant="normal" lspace="0.22em" rspace="0.22em">&amp;</mo><mtext>  </mtext><mrow><mtext mathvariant="monospace">10111011</mtext><mtext>  </mtext><mtext mathvariant="monospace">10011101</mtext><mtext>  </mtext><mtext mathvariant="monospace">11111111</mtext><mtext>  </mtext><mtext mathvariant="monospace">11010001</mtext></mrow><mtext>  </mtext><mo stretchy="false">(</mo><mtext mathvariant="monospace">0xBB9DFFD1</mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mtext mathvariant="monospace">00000011</mtext><mtext>  </mtext><mtext mathvariant="monospace">00000000</mtext><mtext>  </mtext><mtext mathvariant="monospace">11111111</mtext><mtext>  </mtext><mtext mathvariant="monospace">00000001</mtext></mrow><mtext>  </mtext><mo stretchy="false">(</mo><mtext mathvariant="monospace">0x0300FF01</mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\\begin{array}{r}
\\texttt{01000011\\;01100000\\;11111111\\;00101101}\\;(\\texttt{0x4360FF2D}) \\\\[-2pt]
\\mathbin{\\&amp;}\\;
\\texttt{10111011\\;10011101\\;11111111\\;11010001}\\;(\\texttt{0xBB9DFFD1}) \\\\ \\hline
\\texttt{00000011\\;00000000\\;11111111\\;00000001}\\;(\\texttt{0x0300FF01})
\\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.4em;vertical-align:-1.45em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.95em;"><span style="top:-3.95em;"><span class="pstrut" style="height:3.95em;"></span><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.95em;"><span style="top:-4.11em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord texttt">01000011</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">01100000</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">11111111</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00101101</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">0x4360FF2D</span></span><span class="mclose">)</span></span></span><span style="top:-3.11em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">&amp;</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord text"><span class="mord texttt">10111011</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">10011101</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">11111111</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">11010001</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">0xBB9DFFD1</span></span><span class="mclose">)</span></span></span><span style="top:-1.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord texttt">00000011</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00000000</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">11111111</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00000001</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">0x0300FF01</span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span style="top:-3.7em;"><span class="pstrut" style="height:3.95em;"></span><span class="hline" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span></span></span></span></span></span></span></span></span></span>`),o(T);var w=s(T,6),H=r(w);e(H,()=>`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="right" columnspacing="1em" rowlines="none solid"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mtext mathvariant="monospace">00000011</mtext><mtext>  </mtext><mtext mathvariant="monospace">00000000</mtext><mtext>  </mtext><mtext mathvariant="monospace">11111111</mtext><mtext>  </mtext><mtext mathvariant="monospace">00000001</mtext></mrow><mtext>  </mtext><mo stretchy="false">(</mo><mtext mathvariant="monospace">0x0300FF01</mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo mathvariant="normal" lspace="0.22em" rspace="0.22em">&amp;</mo><mtext>  </mtext><mrow><mtext mathvariant="monospace">10000000</mtext><mtext>  </mtext><mtext mathvariant="monospace">10000000</mtext><mtext>  </mtext><mtext mathvariant="monospace">10000000</mtext><mtext>  </mtext><mtext mathvariant="monospace">10000000</mtext></mrow><mtext>  </mtext><mo stretchy="false">(</mo><mtext mathvariant="monospace">0x80808080</mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mtext mathvariant="monospace">00000000</mtext><mtext>  </mtext><mtext mathvariant="monospace">00000000</mtext><mtext>  </mtext><mtext mathvariant="monospace">10000000</mtext><mtext>  </mtext><mtext mathvariant="monospace">00000000</mtext></mrow><mtext>  </mtext><mo stretchy="false">(</mo><mtext mathvariant="monospace">0x00008000</mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\\begin{array}{r}
\\texttt{00000011\\;00000000\\;11111111\\;00000001}\\;(\\texttt{0x0300FF01}) \\\\[-2pt]
\\mathbin{\\&amp;}\\;
\\texttt{10000000\\;10000000\\;10000000\\;10000000}\\;(\\texttt{0x80808080}) \\\\ \\hline
\\texttt{00000000\\;00000000\\;10000000\\;00000000}\\;(\\texttt{0x00008000})
\\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.4em;vertical-align:-1.45em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.95em;"><span style="top:-3.95em;"><span class="pstrut" style="height:3.95em;"></span><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.95em;"><span style="top:-4.11em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord texttt">00000011</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00000000</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">11111111</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00000001</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">0x0300FF01</span></span><span class="mclose">)</span></span></span><span style="top:-3.11em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">&amp;</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord text"><span class="mord texttt">10000000</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">10000000</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">10000000</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">10000000</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">0x80808080</span></span><span class="mclose">)</span></span></span><span style="top:-1.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord texttt">00000000</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00000000</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">10000000</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00000000</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">0x00008000</span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span style="top:-3.7em;"><span class="pstrut" style="height:3.95em;"></span><span class="hline" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span></span></span></span></span></span></span></span></span></span>`),o(w);var W=s(w,14),X=r(W);e(X,()=>`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="right" columnspacing="1em" rowlines="none solid"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mtext mathvariant="monospace">00010010</mtext><mtext>  </mtext><mtext mathvariant="monospace">00110100</mtext><mtext>  </mtext><mtext mathvariant="monospace">01010110</mtext><mtext>  </mtext><mtext mathvariant="monospace">01111000</mtext></mrow><mtext>  </mtext><mo stretchy="false">(</mo><mtext mathvariant="monospace">0x12345678</mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>⊕</mo><mtext>  </mtext><mrow><mtext mathvariant="monospace">01010110</mtext><mtext>  </mtext><mtext mathvariant="monospace">01010110</mtext><mtext>  </mtext><mtext mathvariant="monospace">01010110</mtext><mtext>  </mtext><mtext mathvariant="monospace">01010110</mtext></mrow><mtext>  </mtext><mo stretchy="false">(</mo><mtext mathvariant="monospace">0x56565656</mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mtext mathvariant="monospace">01000100</mtext><mtext>  </mtext><mtext mathvariant="monospace">01100010</mtext><mtext>  </mtext><mtext mathvariant="monospace">00000000</mtext><mtext>  </mtext><mtext mathvariant="monospace">00101110</mtext></mrow><mtext>  </mtext><mo stretchy="false">(</mo><mtext mathvariant="monospace">0x4462002E</mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\\begin{array}{r}
\\texttt{00010010\\;00110100\\;01010110\\;01111000}\\;(\\texttt{0x12345678}) \\\\[-2pt]
\\oplus\\;
\\texttt{01010110\\;01010110\\;01010110\\;01010110}\\;(\\texttt{0x56565656}) \\\\ \\hline
\\texttt{01000100\\;01100010\\;00000000\\;00101110}\\;(\\texttt{0x4462002E})
\\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.4em;vertical-align:-1.45em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.95em;"><span style="top:-3.95em;"><span class="pstrut" style="height:3.95em;"></span><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.95em;"><span style="top:-4.11em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord texttt">00010010</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00110100</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">01010110</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">01111000</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">0x12345678</span></span><span class="mclose">)</span></span></span><span style="top:-3.11em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">⊕</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord text"><span class="mord texttt">01010110</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">01010110</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">01010110</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">01010110</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">0x56565656</span></span><span class="mclose">)</span></span></span><span style="top:-1.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord texttt">01000100</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">01100010</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00000000</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00101110</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">0x4462002E</span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span style="top:-3.7em;"><span class="pstrut" style="height:3.95em;"></span><span class="hline" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span></span></span></span></span></span></span></span></span></span>`),o(W);var N=s(W,4),Y=r(N);e(Y,()=>`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>mask</mtext><mtext>  </mtext><mo>=</mo><mtext>  </mtext><mtext>0x56</mtext><mo>×</mo><mtext>0x01010101</mtext><mtext>  </mtext><mo>=</mo><mtext>  </mtext><mtext>0x56565656</mtext></mrow><annotation encoding="application/x-tex">\\text{mask} \\;=\\; \\text{0x56} \\times \\text{0x01010101} \\;=\\; \\text{0x56565656}

</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord text"><span class="mord">mask</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord text"><span class="mord">0x56</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord text"><span class="mord">0x01010101</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord text"><span class="mord">0x56565656</span></span></span></span></span></span>`),o(N);var G=s(N,8),K=r(G);e(K,()=>`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="right" columnspacing="1em" rowlines="none solid"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mtext mathvariant="monospace">10101010</mtext><mtext>  </mtext><mtext mathvariant="monospace">00000000</mtext><mtext>  </mtext><mtext mathvariant="monospace">11001100</mtext><mtext>  </mtext><mtext mathvariant="monospace">11011101</mtext></mrow><mtext>  </mtext><mo stretchy="false">(</mo><mtext mathvariant="monospace">0xAA00CCDD</mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>⊕</mo><mtext>  </mtext><mrow><mtext mathvariant="monospace">10111011</mtext><mtext>  </mtext><mtext mathvariant="monospace">10111011</mtext><mtext>  </mtext><mtext mathvariant="monospace">10111011</mtext><mtext>  </mtext><mtext mathvariant="monospace">10111011</mtext></mrow><mtext>  </mtext><mo stretchy="false">(</mo><mtext mathvariant="monospace">0xBBBBBBBB</mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mtext mathvariant="monospace">00010001</mtext><mtext>  </mtext><mtext mathvariant="monospace">10111011</mtext><mtext>  </mtext><mtext mathvariant="monospace">01110111</mtext><mtext>  </mtext><mtext mathvariant="monospace">01100110</mtext></mrow><mtext>  </mtext><mo stretchy="false">(</mo><mtext mathvariant="monospace">0x11BB7766</mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\\begin{array}{r}
\\texttt{10101010\\;00000000\\;11001100\\;11011101}\\;(\\texttt{0xAA00CCDD}) \\\\[-2pt]
\\oplus\\;
\\texttt{10111011\\;10111011\\;10111011\\;10111011}\\;(\\texttt{0xBBBBBBBB}) \\\\ \\hline
\\texttt{00010001\\;10111011\\;01110111\\;01100110}\\;(\\texttt{0x11BB7766})
\\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.4em;vertical-align:-1.45em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.95em;"><span style="top:-3.95em;"><span class="pstrut" style="height:3.95em;"></span><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.95em;"><span style="top:-4.11em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord texttt">10101010</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00000000</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">11001100</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">11011101</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">0xAA00CCDD</span></span><span class="mclose">)</span></span></span><span style="top:-3.11em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">⊕</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord text"><span class="mord texttt">10111011</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">10111011</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">10111011</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">10111011</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">0xBBBBBBBB</span></span><span class="mclose">)</span></span></span><span style="top:-1.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord texttt">00010001</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">10111011</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">01110111</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">01100110</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">0x11BB7766</span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span style="top:-3.7em;"><span class="pstrut" style="height:3.95em;"></span><span class="hline" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span></span></span></span></span></span></span></span></span></span>`),o(G);var j=s(G,4),Z=r(j);e(Z,()=>`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="right" columnspacing="1em" rowlines="none solid"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mtext mathvariant="monospace">10101010</mtext><mtext>  </mtext><mtext mathvariant="monospace">00000000</mtext><mtext>  </mtext><mtext mathvariant="monospace">11001100</mtext><mtext>  </mtext><mtext mathvariant="monospace">11011101</mtext></mrow><mtext>  </mtext><mo stretchy="false">(</mo><mtext mathvariant="monospace">0xAA00CCDD</mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>⊕</mo><mtext>  </mtext><mrow><mtext mathvariant="monospace">00000000</mtext><mtext>  </mtext><mtext mathvariant="monospace">00000000</mtext><mtext>  </mtext><mtext mathvariant="monospace">00000000</mtext><mtext>  </mtext><mtext mathvariant="monospace">00000000</mtext></mrow><mtext>  </mtext><mo stretchy="false">(</mo><mtext mathvariant="monospace">0x00000000</mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mtext mathvariant="monospace">10101010</mtext><mtext>  </mtext><mtext mathvariant="monospace">00000000</mtext><mtext>  </mtext><mtext mathvariant="monospace">11001100</mtext><mtext>  </mtext><mtext mathvariant="monospace">11011101</mtext></mrow><mtext>  </mtext><mo stretchy="false">(</mo><mtext mathvariant="monospace">0xAA00CCDD</mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\\begin{array}{r}
\\texttt{10101010\\;00000000\\;11001100\\;11011101}\\;(\\texttt{0xAA00CCDD}) \\\\[-2pt]
\\oplus\\;
\\texttt{00000000\\;00000000\\;00000000\\;00000000}\\;(\\texttt{0x00000000}) \\\\ \\hline
\\texttt{10101010\\;00000000\\;11001100\\;11011101}\\;(\\texttt{0xAA00CCDD})
\\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.4em;vertical-align:-1.45em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.95em;"><span style="top:-3.95em;"><span class="pstrut" style="height:3.95em;"></span><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.95em;"><span style="top:-4.11em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord texttt">10101010</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00000000</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">11001100</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">11011101</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">0xAA00CCDD</span></span><span class="mclose">)</span></span></span><span style="top:-3.11em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">⊕</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord text"><span class="mord texttt">00000000</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00000000</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00000000</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00000000</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">0x00000000</span></span><span class="mclose">)</span></span></span><span style="top:-1.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord texttt">10101010</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">00000000</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">11001100</span><span class="mspace" style="margin-right:0.2777em;"></span><span class="mord texttt">11011101</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">0xAA00CCDD</span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span style="top:-3.7em;"><span class="pstrut" style="height:3.95em;"></span><span class="hline" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span></span></span></span></span></span></span></span></span></span>`),o(j);var V=s(j,8);e(V,()=>`<pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> bool</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Contains</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">byte</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> fingerprint</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">uint</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> bucketIdx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    uint</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> bucket</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> _table[bucketIdx];</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    uint</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> mask</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> fingerprint </span><span style="color:#D73A49;--shiki-dark:#F97583">*</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0x01010101U</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    uint</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> xored</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> bucket </span><span style="color:#D73A49;--shiki-dark:#F97583">^</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> mask;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ((xored </span><span style="color:#D73A49;--shiki-dark:#F97583">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0x01010101U</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="color:#D73A49;--shiki-dark:#F97583"> ~</span><span style="color:#24292E;--shiki-dark:#E1E4E8">xored </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0x80808080U</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">!=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var Q=s(V,6);rs(Q,{children:(P,U)=>{var M=ze();f(P,M)}}),z(4),f(i,a)}const Pe=Object.freeze(Object.defineProperty({__proto__:null,default:He,metadata:da},Symbol.toStringTag,{value:"Module"}));function Le(i=null,a="published",n=null){const d=Object.entries(Object.assign({"/src/posts/001-binary-shifts-for-flags/index.md":Ba,"/src/posts/002-callermembername-attribute-for-logging/index.md":_a,"/src/posts/003-internals-visible-for-testing/index.md":Sa,"/src/posts/004-deconstructors/index.md":Ha,"/src/posts/005-dictionary-on-generics/index.md":Wa,"/src/posts/006-how-to-get-status-of-mongodb-operation/index.md":Oa,"/src/posts/007-fixing-csharp-type-pattern-matching/index.md":qa,"/src/posts/008-bloom-filters-pt1/index.md":ye,"/src/posts/009-counting-bloom-filters/index.md":be,"/src/posts/010-cuckoo-filters/index.md":Be,"/src/posts/011-practical-bitwise-tricks-in-everyday-code/index.md":_e,"/src/posts/012-simd-within-a-register-how-i-doubled-hash-table-lookup-performance/index.md":Pe})).map(([c,k])=>{const m=c.replace("/index.md","").split("/").pop(),h=k.metadata;return{slug:m,date:h.date??Ps(`Date is missing in post ${m}`),title:h.title??Ps(`Title is missing in post ${m}`),preview:h.preview??Ps(`Preview is missing in post ${m}`),tags:h.tags??Ps(`Tags are missing in post ${m}`),draft:h.draft??!1,series:h.series}}).filter(c=>a==="all"?!0:c.draft===(a==="draft")).filter(c=>n===null?!0:n.includes(c.slug)).sort((c,k)=>{const m=new Date(c.date);return new Date(k.date).getTime()-m.getTime()});return i?d.slice(0,i):d}function Jn(i){return i?Le().filter(n=>n.series&&n.series===i).sort((n,p)=>{const l=new Date(n.date),d=new Date(p.date);return l.getTime()-d.getTime()}):[]}export{Ba as _,Jn as a,_a as b,Sa as c,Ha as d,Wa as e,Oa as f,Le as g,qa as h,ye as i,be as j,Be as k,_e as l,Pe as m};
