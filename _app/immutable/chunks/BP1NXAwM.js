import{t as u,a as C}from"./Bd1eUZv1.js";import"./BXHWvYr9.js";import{s,f as g,n as m}from"./DMdOKcQ-.js";import{h as a}from"./kEZwfia0.js";const y={date:"2024-02-18",tags:["C#"],keywords:["C#","Visitors Pattern","Type pattern matching","switch keyword"],title:"Fixing C# type pattern-matching",preview:"Craving Kotlin's secure pattern matching on sealed classes for your C# code? Discover how the Visitor Pattern can satisfy your longing!",draft:!1,hero:"/images/blog/007-fixing-csharp-type-pattern-matching/hero.jpg"},{date:x,tags:T,keywords:I,title:_,preview:S,draft:P,hero:W}=y;var b=u('<p>Hello there! Are you looking for ways to make your code more robust, maintainable, and less prone to runtime errors? Well, buckle up because today we’re going to explore how to substitute type pattern matching in C# with the Visitors pattern. Yes, I know it sounds a bit strange, but stick with me, and you’ll see how this can help you write better code.</p> <h2 id="task-example-validation-of-property-values"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#task-example-validation-of-property-values">#</a>Task example: Validation of property values</h2> <p>So let’s start with an example. Imagine we have a marker interface for some property value - <code>IValue</code>. It has two implementations - <code>StringValue</code> and <code>NumericValue</code>, holding <code>string</code> and <code>long</code> values respectively.</p> <!> <p>As an example, let’s implement validation of those values. We write a static helper function <code>IsValid</code>, which accepts <code>IValue</code> and returns a boolean value: <code>true</code> if the value is valid, <code>false</code> otherwise. We do it in a straightforward way - just make a <code>switch</code> expression with branches for <code>StringValue</code> and <code>NumericValue</code> types. But for our <code>switch</code> to be exhaustive, we’re forced to make a default branch with throwing <code>UnreachableException</code>.</p> <!> <p>So a simple console application that spins the gears of our code will look like that:</p> <!> <p>Let’s test it:</p> <!> <h2 id="the-issue"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#the-issue">#</a>The issue</h2> <p>At first glance everything looks fine! But what if we have dozens of such type pattern matching across the project, and some other developer introduces a new type for a value, for example, <code>DateTimeValue</code>?</p> <p>In that case, he or she needs to find all usages of pattern matching for <code>IValue</code> and add a branch for the new type. And also write tests to check that we won’t have an <code>UnreachableException</code> thrown at runtime:</p> <!> <p>As our case is very simple, still, let’s imaging that our imaginary developer implemented only parsing of the new type, but forgot to handle it in our helper function.</p> <!> <p>So, you may already guess what will happen if we pass <code>2024-02-18T19:38:37Z</code> to our CLI input.</p> <!> <p>We found a bug! (how surprisingly, ha-ha)</p> <p>Imaging that this will happen in production during the midnight while you’re on-call. <strong>Not so funny now, huh?</strong></p> <h2 id="solution-visitor-pattern"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#solution-visitor-pattern">#</a>Solution: Visitor Pattern</h2> <p>I’m sure that this bug can be found with tests or during code-review. But can we have a compilation error, indicating what places to fix? Like in Kotlin or Java with sealed interfaces and classes that allow creating an exhaustive <code>when</code> expression without a default branch and receiving compilation errors when a new type is not handled.</p> <p>Unfortunately, in C# we don’t have language support for that yet. But surprisingly, an old-fashioned OOP pattern called <a href="https://refactoring.guru/design-patterns/visitor" rel="nofollow">Visitor</a> can help us achieve that. We can add a generic <code>Accept&lt;T&gt;</code> method for <code>IValue</code>, which accepts <code>IValueVisitor&lt;T&gt;</code> and returns a value of type <code>T</code>.</p> <!> <p>Interface <code>IValueVisitor&lt;T&gt;</code> has methods <code>Accept</code>, with overloads, each accepting an implementation of <code>IValue</code> interface as a parameter and returning a value of generic type <code>T</code>.</p> <!> <p>In all <code>IValue</code> implementations, we just call <code>visitor.Visit(this)</code> and return the value from this invocation:</p> <!> <p>We can rewrite a helper validation function to a class <code>ValueValidationVisitor</code>, that for each <code>Visit</code> overload performs the same check as it was done for the static function described above, generic type parameter in that case will be <code>bool</code>. Here’s how it looks like:</p> <!> <p>When a developer adds a new class implementing <code>IValue</code>, for example, <code>DateTimeValue</code>, we need to implement an <code>Accept</code> method, which should invoke the visitor’s <code>Visit</code> method:</p> <!> <p>But there’s no such overload at <code>IValueVisitor&lt;T&gt;</code> that accepts <code>DateTimeValue</code> value, so we’ve got to add it into <code>IValueVisitor&lt;T&gt;</code> and implement it all over visitor’s implementations:</p> <!> <p>So after all tons of code we’ve written, we can now change the console app and use <code>ValueValidationVisitor</code> instead of <code>ValidationHelper</code>. There’s also a singleton instance of <code>ValueValidationVisitor</code> that we can use in client code, so let’s do it.</p> <!> <p>Voilà, now not only the bug is fixed, but also the chance of missed type handling is reduced, so in overall we strengthen our type-safety guarantees.</p> <h2 id="final-thoughts"><a class="header-anchor" aria-hidden="true" tabindex="-1" href="#final-thoughts">#</a>Final thoughts</h2> <p>However Visitor pattern is a lot more verbose than simple switch statement or expression, we are now almost absolutely sure that the developer doesn’t miss to handle its new type. And as a reviewer, one will see all places that were changed in git diff without the need to double-check in the code of the project.</p> <p>So there you have it! By using Visitor pattern, you can make your C# code more maintainable and less prone to runtime errors, especially when adding new types or modifying existing ones. It may not be as elegant or concise, but it can save you a lot of headaches in the long run. If you want to see code - check it in <a href="https://github.com/AxelUser/TypePatternMatchingOnVisitors" rel="nofollow">this</a> repository.</p> <p>And remember, a little bit of extra verbosity is worth the peace of mind!</p>',1);function f(D){var i=b(),e=s(g(i),6);a(e,()=>`<pre class="shiki shiki-themes material-theme-palenight github-dark" style="background-color:#292D3E;--shiki-dark-bg:#24292e;color:#babed8;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#C792EA;--shiki-dark:#F97583">public</span><span style="color:#FFCB6B;--shiki-dark:#F97583"> interface</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> IValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8"> &#123;</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8"> &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;--shiki-dark:#F97583">public</span><span style="color:#FFCB6B;--shiki-dark:#F97583"> record</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> StringValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#89DDFF;--shiki-dark:#F97583">string</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">?</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> Value</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">)</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8"> :</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> IValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;--shiki-dark:#F97583">public</span><span style="color:#FFCB6B;--shiki-dark:#F97583"> record</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> NumericValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#89DDFF;--shiki-dark:#F97583">long</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> Value</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">)</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8"> :</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> IValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">;</span></span></code></pre>`);var n=s(e,4);a(n,()=>`<pre class="shiki shiki-themes material-theme-palenight github-dark" style="background-color:#292D3E;--shiki-dark-bg:#24292e;color:#babed8;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#C792EA;--shiki-dark:#F97583">public</span><span style="color:#C792EA;--shiki-dark:#F97583"> static</span><span style="color:#FFCB6B;--shiki-dark:#F97583"> class</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> ValidationHelper</span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#C792EA;--shiki-dark:#F97583">    public</span><span style="color:#C792EA;--shiki-dark:#F97583"> static</span><span style="color:#89DDFF;--shiki-dark:#F97583"> bool</span><span style="color:#82AAFF;--shiki-dark:#B392F0"> IsValid</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#FFCB6B;--shiki-dark:#B392F0">IValue</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> value</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">    &#123;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;--shiki-dark:#F97583;--shiki-dark-font-style:inherit">        return</span><span style="color:#BABED8;--shiki-dark:#E1E4E8"> value </span><span style="color:#89DDFF;font-style:italic;--shiki-dark:#F97583;--shiki-dark-font-style:inherit">switch</span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">        &#123;</span></span>
<span class="line"><span style="color:#FFCB6B;--shiki-dark:#B392F0">            StringValue</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> stringValue</span><span style="color:#89DDFF;--shiki-dark:#F97583"> =></span><span style="color:#89DDFF;--shiki-dark:#F97583"> !</span><span style="color:#89DDFF;--shiki-dark:#F97583">string</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">.</span><span style="color:#82AAFF;--shiki-dark:#B392F0">IsNullOrWhiteSpace</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">stringValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">.</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">Value</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">),</span></span>
<span class="line"><span style="color:#FFCB6B;--shiki-dark:#B392F0">            NumericValue</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> numericValue</span><span style="color:#89DDFF;--shiki-dark:#F97583"> =></span><span style="color:#BABED8;--shiki-dark:#E1E4E8"> numericValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">.</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">Value </span><span style="color:#89DDFF;--shiki-dark:#F97583">>=</span><span style="color:#F78C6C;--shiki-dark:#79B8FF"> 0</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="color:#BABED8;--shiki-dark:#79B8FF">            _</span><span style="color:#89DDFF;--shiki-dark:#F97583"> =></span><span style="color:#89DDFF;font-style:italic;--shiki-dark:#F97583;--shiki-dark-font-style:inherit"> throw</span><span style="color:#89DDFF;--shiki-dark:#F97583"> new</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> UnreachableException</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">        &#125;;</span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">    &#125;</span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var l=s(n,4);a(l,()=>`<pre class="shiki shiki-themes material-theme-palenight github-dark" style="background-color:#292D3E;--shiki-dark-bg:#24292e;color:#babed8;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;--shiki-dark:#F97583;--shiki-dark-font-style:inherit">while</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8"> (</span><span style="color:#FF9CAC;--shiki-dark:#79B8FF">true</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#BABED8;--shiki-dark:#E1E4E8">    Console</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">.</span><span style="color:#82AAFF;--shiki-dark:#B392F0">Write</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#89DDFF;--shiki-dark:#9ECBFF">"</span><span style="color:#C3E88D;--shiki-dark:#9ECBFF">Write a property value: </span><span style="color:#89DDFF;--shiki-dark:#9ECBFF">"</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#FFCB6B;--shiki-dark:#F97583">    var</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> input</span><span style="color:#89DDFF;--shiki-dark:#F97583"> =</span><span style="color:#BABED8;--shiki-dark:#E1E4E8"> Console</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">.</span><span style="color:#82AAFF;--shiki-dark:#B392F0">ReadLine</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="color:#FFCB6B;--shiki-dark:#F97583">    var</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> value</span><span style="color:#89DDFF;--shiki-dark:#F97583"> =</span><span style="color:#82AAFF;--shiki-dark:#B392F0"> Parse</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">input</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#BABED8;--shiki-dark:#E1E4E8">    Console</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">.</span><span style="color:#82AAFF;--shiki-dark:#B392F0">WriteLine</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#89DDFF;--shiki-dark:#9ECBFF">$"</span><span style="color:#C3E88D;--shiki-dark:#9ECBFF">Value '</span><span style="color:#89DDFF;--shiki-dark:#9ECBFF">&#123;</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">input</span><span style="color:#89DDFF;--shiki-dark:#9ECBFF">&#125;</span><span style="color:#C3E88D;--shiki-dark:#9ECBFF">' is valid: </span><span style="color:#89DDFF;--shiki-dark:#9ECBFF">"</span><span style="color:#89DDFF;--shiki-dark:#F97583"> +</span><span style="color:#BABED8;--shiki-dark:#E1E4E8"> ValidationHelper</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">.</span><span style="color:#82AAFF;--shiki-dark:#B392F0">IsValid</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">value</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">));</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">    </span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;--shiki-dark:#F97583">static</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> IValue</span><span style="color:#82AAFF;--shiki-dark:#B392F0"> Parse</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#89DDFF;--shiki-dark:#F97583">string</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">?</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> value</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;--shiki-dark:#F97583;--shiki-dark-font-style:inherit">    if</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8"> (</span><span style="color:#89DDFF;--shiki-dark:#F97583">long</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">.</span><span style="color:#82AAFF;--shiki-dark:#B392F0">TryParse</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">value</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">,</span><span style="color:#C792EA;--shiki-dark:#F97583"> out</span><span style="color:#FFCB6B;--shiki-dark:#F97583"> var</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> num</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">))</span><span style="color:#89DDFF;font-style:italic;--shiki-dark:#F97583;--shiki-dark-font-style:inherit"> return</span><span style="color:#89DDFF;--shiki-dark:#F97583"> new</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> NumericValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">num</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;--shiki-dark:#F97583;--shiki-dark-font-style:inherit">    return</span><span style="color:#89DDFF;--shiki-dark:#F97583"> new</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> StringValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">value</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var o=s(l,4);a(o,()=>`<pre class="shiki shiki-themes material-theme-palenight github-dark" style="background-color:#292D3E;--shiki-dark-bg:#24292e;color:#babed8;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span>Write a property value: foo</span></span>
<span class="line"><span>Value 'foo' is valid: True</span></span>
<span class="line"><span>Write a property value: 1 </span></span>
<span class="line"><span>Value '1' is valid: True</span></span>
<span class="line"><span>Write a property value: -42</span></span>
<span class="line"><span>Value '-42' is valid: False</span></span></code></pre>`);var r=s(o,8);a(r,()=>'<pre class="shiki shiki-themes material-theme-palenight github-dark" style="background-color:#292D3E;--shiki-dark-bg:#24292e;color:#babed8;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#C792EA;--shiki-dark:#F97583">public</span><span style="color:#FFCB6B;--shiki-dark:#F97583"> record</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> DateTimeValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#FFCB6B;--shiki-dark:#B392F0">DateTimeOffset</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> Value</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">)</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8"> :</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> IValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">;</span></span></code></pre>');var p=s(r,4);a(p,()=>`<pre class="shiki shiki-themes material-theme-palenight github-dark" style="background-color:#292D3E;--shiki-dark-bg:#24292e;color:#babed8;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#C792EA;--shiki-dark:#F97583">static</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> IValue</span><span style="color:#82AAFF;--shiki-dark:#B392F0"> Parse</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#89DDFF;--shiki-dark:#F97583">string</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">?</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> value</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;--shiki-dark:#F97583;--shiki-dark-font-style:inherit">    if</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8"> (</span><span style="color:#89DDFF;--shiki-dark:#F97583">long</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">.</span><span style="color:#82AAFF;--shiki-dark:#B392F0">TryParse</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">value</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">,</span><span style="color:#C792EA;--shiki-dark:#F97583"> out</span><span style="color:#FFCB6B;--shiki-dark:#F97583"> var</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> num</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">))</span><span style="color:#89DDFF;font-style:italic;--shiki-dark:#F97583;--shiki-dark-font-style:inherit"> return</span><span style="color:#89DDFF;--shiki-dark:#F97583"> new</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> NumericValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">num</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit">    // Parsing date, no other changes!</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;--shiki-dark:#F97583;--shiki-dark-font-style:inherit">    if</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8"> (</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">DateTimeOffset</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">.</span><span style="color:#82AAFF;--shiki-dark:#B392F0">TryParse</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">value</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">,</span><span style="color:#C792EA;--shiki-dark:#F97583"> out</span><span style="color:#FFCB6B;--shiki-dark:#F97583"> var</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> dateTime</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">))</span><span style="color:#89DDFF;font-style:italic;--shiki-dark:#F97583;--shiki-dark-font-style:inherit"> return</span><span style="color:#89DDFF;--shiki-dark:#F97583"> new</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> DateTimeValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">dateTime</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;--shiki-dark:#F97583;--shiki-dark-font-style:inherit">    return</span><span style="color:#89DDFF;--shiki-dark:#F97583"> new</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> StringValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">value</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var t=s(p,4);a(t,()=>`<pre class="shiki shiki-themes material-theme-palenight github-dark" style="background-color:#292D3E;--shiki-dark-bg:#24292e;color:#babed8;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span>Write a property value: 2024-02-18T19:38:37Z</span></span>
<span class="line"><span>Unhandled exception. System.Diagnostics.UnreachableException: The program executed an instruction that was thought to be unreachable.                                </span></span>
<span class="line"><span>   at TypePatternMatchingOnVisitors.ValidationHelper.IsValid(IValue value) in C:UsersAxelUprojectslearnTypePatternMatchingOnVisitorsValidationHelper.cs:line 13</span></span>
<span class="line"><span>   at Program.&#x3C;Main>$(String[] args) in C:UsersAxelUprojectslearnTypePatternMatchingOnVisitorsProgram.cs:line 8                                                </span></span>
<span class="line"><span></span></span>
<span class="line"><span>Process finished with exit code -532,462,766.</span></span></code></pre>`);var k=s(t,12);a(k,()=>`<pre class="shiki shiki-themes material-theme-palenight github-dark" style="background-color:#292D3E;--shiki-dark-bg:#24292e;color:#babed8;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#C792EA;--shiki-dark:#F97583">public</span><span style="color:#FFCB6B;--shiki-dark:#F97583"> interface</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> IValue</span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#FFCB6B;--shiki-dark:#B392F0">    T</span><span style="color:#82AAFF;--shiki-dark:#B392F0"> Accept</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#FFCB6B;--shiki-dark:#B392F0">T</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">>(</span><span style="color:#FFCB6B;--shiki-dark:#B392F0">IValueVisitor</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#FFCB6B;--shiki-dark:#B392F0">T</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">></span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> visitor</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var F=s(k,4);a(F,()=>`<pre class="shiki shiki-themes material-theme-palenight github-dark" style="background-color:#292D3E;--shiki-dark-bg:#24292e;color:#babed8;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#C792EA;--shiki-dark:#F97583">public</span><span style="color:#FFCB6B;--shiki-dark:#F97583"> interface</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> IValueVisitor</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#C792EA;--shiki-dark:#F97583">out</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> T</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#FFCB6B;--shiki-dark:#B392F0">    T</span><span style="color:#82AAFF;--shiki-dark:#B392F0"> Visit</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#FFCB6B;--shiki-dark:#B392F0">StringValue</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> stringValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#FFCB6B;--shiki-dark:#B392F0">    T</span><span style="color:#82AAFF;--shiki-dark:#B392F0"> Visit</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#FFCB6B;--shiki-dark:#B392F0">NumericValue</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> numericValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var c=s(F,4);a(c,()=>`<pre class="shiki shiki-themes material-theme-palenight github-dark" style="background-color:#292D3E;--shiki-dark-bg:#24292e;color:#babed8;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#C792EA;--shiki-dark:#F97583">public</span><span style="color:#FFCB6B;--shiki-dark:#F97583"> record</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> StringValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#89DDFF;--shiki-dark:#F97583">string</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">?</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> Value</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">):</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> IValue</span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#C792EA;--shiki-dark:#F97583">    public</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> T</span><span style="color:#82AAFF;--shiki-dark:#B392F0"> Accept</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#FFCB6B;--shiki-dark:#B392F0">T</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">>(</span><span style="color:#FFCB6B;--shiki-dark:#B392F0">IValueVisitor</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#FFCB6B;--shiki-dark:#B392F0">T</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">></span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> visitor</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">)</span><span style="color:#89DDFF;--shiki-dark:#F97583"> =></span><span style="color:#BABED8;--shiki-dark:#E1E4E8"> visitor</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">.</span><span style="color:#82AAFF;--shiki-dark:#B392F0">Visit</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#89DDFF;--shiki-dark:#79B8FF">this</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit">// ... same for other IValue implementations</span></span></code></pre>`);var d=s(c,4);a(d,()=>`<pre class="shiki shiki-themes material-theme-palenight github-dark" style="background-color:#292D3E;--shiki-dark-bg:#24292e;color:#babed8;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#C792EA;--shiki-dark:#F97583">public</span><span style="color:#FFCB6B;--shiki-dark:#F97583"> class</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> ValueValidationVisitor</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">:</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> IValueVisitor</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#89DDFF;--shiki-dark:#F97583">bool</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#C792EA;--shiki-dark:#F97583">    public</span><span style="color:#89DDFF;--shiki-dark:#F97583"> bool</span><span style="color:#82AAFF;--shiki-dark:#B392F0"> Visit</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#FFCB6B;--shiki-dark:#B392F0">StringValue</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> stringValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">)</span><span style="color:#89DDFF;--shiki-dark:#F97583"> =></span><span style="color:#89DDFF;--shiki-dark:#F97583"> !</span><span style="color:#89DDFF;--shiki-dark:#F97583">string</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">.</span><span style="color:#82AAFF;--shiki-dark:#B392F0">IsNullOrWhiteSpace</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">stringValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">.</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">Value</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;--shiki-dark:#F97583">    public</span><span style="color:#89DDFF;--shiki-dark:#F97583"> bool</span><span style="color:#82AAFF;--shiki-dark:#B392F0"> Visit</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#FFCB6B;--shiki-dark:#B392F0">NumericValue</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> numericValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">)</span><span style="color:#89DDFF;--shiki-dark:#F97583"> =></span><span style="color:#BABED8;--shiki-dark:#E1E4E8"> numericValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">.</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">Value </span><span style="color:#89DDFF;--shiki-dark:#F97583">>=</span><span style="color:#F78C6C;--shiki-dark:#79B8FF"> 0</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var h=s(d,4);a(h,()=>`<pre class="shiki shiki-themes material-theme-palenight github-dark" style="background-color:#292D3E;--shiki-dark-bg:#24292e;color:#babed8;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#C792EA;--shiki-dark:#F97583">public</span><span style="color:#FFCB6B;--shiki-dark:#F97583"> record</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> DateTimeValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#FFCB6B;--shiki-dark:#B392F0">DateTimeOffset</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> Value</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">)</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8"> :</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> IValue</span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit">    // Compilation error - we don't implement Visit for this value type yet!</span></span>
<span class="line"><span style="color:#C792EA;--shiki-dark:#F97583">    public</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> T</span><span style="color:#82AAFF;--shiki-dark:#B392F0"> Accept</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#FFCB6B;--shiki-dark:#B392F0">T</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">>(</span><span style="color:#FFCB6B;--shiki-dark:#B392F0">IValueVisitor</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#FFCB6B;--shiki-dark:#B392F0">T</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">></span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> visitor</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">)</span><span style="color:#89DDFF;--shiki-dark:#F97583"> =></span><span style="color:#BABED8;--shiki-dark:#E1E4E8"> visitor</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">.</span><span style="color:#82AAFF;--shiki-dark:#B392F0">Visit</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#89DDFF;--shiki-dark:#79B8FF">this</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`);var E=s(h,4);a(E,()=>`<pre class="shiki shiki-themes material-theme-palenight github-dark" style="background-color:#292D3E;--shiki-dark-bg:#24292e;color:#babed8;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#C792EA;--shiki-dark:#F97583">public</span><span style="color:#FFCB6B;--shiki-dark:#F97583"> interface</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> IValueVisitor</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#C792EA;--shiki-dark:#F97583">out</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> T</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit">    // ... other Visit overloads</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;--shiki-dark:#B392F0">    T</span><span style="color:#82AAFF;--shiki-dark:#B392F0"> Visit</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#FFCB6B;--shiki-dark:#B392F0">DateTimeValue</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> dateTimeValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;--shiki-dark:#F97583">public</span><span style="color:#FFCB6B;--shiki-dark:#F97583"> class</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> ValueValidationVisitor</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">:</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> IValueVisitor</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#89DDFF;--shiki-dark:#F97583">bool</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">></span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit">    // singleton for visitor cause it's stateless and safe to share between IValue instances</span></span>
<span class="line"><span style="color:#C792EA;--shiki-dark:#F97583">    public</span><span style="color:#C792EA;--shiki-dark:#F97583"> static</span><span style="color:#C792EA;--shiki-dark:#F97583"> readonly</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> ValueValidationVisitor</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> Instance</span><span style="color:#89DDFF;--shiki-dark:#F97583"> =</span><span style="color:#89DDFF;--shiki-dark:#F97583"> new</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit">    // ... other Visit overloads</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;--shiki-dark:#F97583">    public</span><span style="color:#89DDFF;--shiki-dark:#F97583"> bool</span><span style="color:#82AAFF;--shiki-dark:#B392F0"> Visit</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#FFCB6B;--shiki-dark:#B392F0">DateTimeValue</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> dateTimeValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">)</span><span style="color:#89DDFF;--shiki-dark:#F97583"> =></span><span style="color:#BABED8;--shiki-dark:#E1E4E8"> dateTimeValue</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">.</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">Value </span><span style="color:#89DDFF;--shiki-dark:#F97583">&#x3C;=</span><span style="color:#BABED8;--shiki-dark:#E1E4E8"> DateTimeOffset</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">.</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">UtcNow</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#125;</span></span>
<span class="line"></span></code></pre>`);var B=s(E,4);a(B,()=>`<pre class="shiki shiki-themes material-theme-palenight github-dark" style="background-color:#292D3E;--shiki-dark-bg:#24292e;color:#babed8;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;--shiki-dark:#F97583;--shiki-dark-font-style:inherit">while</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8"> (</span><span style="color:#FF9CAC;--shiki-dark:#79B8FF">true</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">)</span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#123;</span></span>
<span class="line"><span style="color:#BABED8;--shiki-dark:#E1E4E8">    Console</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">.</span><span style="color:#82AAFF;--shiki-dark:#B392F0">Write</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#89DDFF;--shiki-dark:#9ECBFF">"</span><span style="color:#C3E88D;--shiki-dark:#9ECBFF">Write a property value: </span><span style="color:#89DDFF;--shiki-dark:#9ECBFF">"</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#FFCB6B;--shiki-dark:#F97583">    var</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> input</span><span style="color:#89DDFF;--shiki-dark:#F97583"> =</span><span style="color:#BABED8;--shiki-dark:#E1E4E8"> Console</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">.</span><span style="color:#82AAFF;--shiki-dark:#B392F0">ReadLine</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="color:#FFCB6B;--shiki-dark:#F97583">    var</span><span style="color:#FFCB6B;--shiki-dark:#B392F0"> value</span><span style="color:#89DDFF;--shiki-dark:#F97583"> =</span><span style="color:#82AAFF;--shiki-dark:#B392F0"> Parse</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">input</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit">    //Console.WriteLine($"Value '&#123;input&#125;' is valid: " + ValidationHelper.IsValid(value));    </span></span>
<span class="line"><span style="color:#BABED8;--shiki-dark:#E1E4E8">    Console</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">.</span><span style="color:#82AAFF;--shiki-dark:#B392F0">WriteLine</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#89DDFF;--shiki-dark:#9ECBFF">$"</span><span style="color:#C3E88D;--shiki-dark:#9ECBFF">Value '</span><span style="color:#89DDFF;--shiki-dark:#9ECBFF">&#123;</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">input</span><span style="color:#89DDFF;--shiki-dark:#9ECBFF">&#125;</span><span style="color:#C3E88D;--shiki-dark:#9ECBFF">' is valid: </span><span style="color:#89DDFF;--shiki-dark:#9ECBFF">"</span><span style="color:#89DDFF;--shiki-dark:#F97583"> +</span><span style="color:#BABED8;--shiki-dark:#E1E4E8"> value</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">.</span><span style="color:#82AAFF;--shiki-dark:#B392F0">Accept</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">(</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">ValueValidationVisitor</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">.</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">Instance</span><span style="color:#89DDFF;--shiki-dark:#E1E4E8">));</span><span style="color:#BABED8;--shiki-dark:#E1E4E8">    </span></span>
<span class="line"><span style="color:#89DDFF;--shiki-dark:#E1E4E8">&#125;</span></span></code></pre>`),m(10),C(D,i)}const O=Object.freeze(Object.defineProperty({__proto__:null,default:f,metadata:y},Symbol.toStringTag,{value:"Module"}));export{O as _};
