{"type":"data","nodes":[null,{"type":"data","data":[{"posts":1},[2,10,18,24,30,37,44,50,56,62,68],{"slug":3,"date":4,"title":5,"preview":6,"tags":7,"draft":9,"series":-1,"placeholder":-1},"011-practical-bitwise-tricks","2025-07-07","Practical Bitwise Tricks in Everyday Code","An opinionated and short collection of bitwise tricks that make sense at an average 1x engineer's code.",[8],"Bitwise",false,{"slug":11,"date":12,"title":13,"preview":14,"tags":15,"draft":9,"series":17,"placeholder":-1},"010-cuckoo-filters","2025-07-02","Cuckoo Filters: Better Than Bloom Filters?","Meet the data structure that refuses trade-offs: identical footprint to Bloom, fewer false positives, and deletion that works without overhead. Grab all three!",[16],"Algorithms","Grokking Bloom Filters",{"slug":19,"date":20,"title":21,"preview":22,"tags":23,"draft":9,"series":17,"placeholder":-1},"009-counting-bloom-filters","2025-06-24","Grokking Bloom Filters: Counting Bloom Filter","Bloom filters can't remove elements — unless you let them count.",[16],{"slug":25,"date":26,"title":27,"preview":28,"tags":29,"draft":9,"series":17,"placeholder":-1},"008-bloom-filters-pt1","2025-06-09","Grokking Bloom Filters: The Classic Bloom Filter Demystified","How a tiny data structure cuts memory usage by 90% — while helping systems instantly check if data exists.",[16],{"slug":31,"date":32,"title":33,"preview":34,"tags":35,"draft":9,"series":-1,"placeholder":-1},"007-fixing-csharp-type-pattern-matching","2024-02-18","Fixing C# type pattern-matching","Craving Kotlin's secure pattern matching on sealed classes for your C# code? Discover how the Visitor Pattern can satisfy your longing!",[36],"C#",{"slug":38,"date":39,"title":40,"preview":41,"tags":42,"draft":9,"series":-1,"placeholder":-1},"006-how-to-get-status-of-mongodb-operation","2022-04-20","Checking MongoDB Operation Status: A Simple Guide","Learn how to easily check the status of your MongoDB operations with this step-by-step guide.",[43],"MongoDB",{"slug":45,"date":46,"title":47,"preview":48,"tags":49,"draft":9,"series":-1,"placeholder":-1},"005-dictionary-on-generics","2020-06-22","Unlocking the Power of Generics: Simulating Dictionary Behavior in C#","Do you want to improve performance of caching? Get rid of Dictionary and use just CLR for that!",[36],{"slug":51,"date":52,"title":53,"preview":54,"tags":55,"draft":9,"series":-1,"placeholder":-1},"004-deconstructors","2018-11-15","Benefits of deconstructors for custom types","How and when to use deconstruction syntax-sugar for your custom types in C#",[36],{"slug":57,"date":58,"title":59,"preview":60,"tags":61,"draft":9,"series":-1,"placeholder":-1},"003-internals-visible-for-testing","2018-11-12","Testing Private Code in C#: Breaking Encapsulation with InternalsVisibleTo Attribute","Learn about the different options available for testing private logic in C# and how the InternalsVisibleTo attribute can help you access internal members without compromising the encapsulation of your code.",[36],{"slug":63,"date":64,"title":65,"preview":66,"tags":67,"draft":9,"series":-1,"placeholder":-1},"002-callermembername-attribute-for-logging","2018-10-27","Using CallerMemberName for Improved Logging in C#","Learn how to use \"magic\" attributes in C#, such as CallerFilePath, CallerLineNumber, and CallerMemberName, to retrieve caller information and improve logging functionality.",[36],{"slug":69,"date":70,"title":71,"preview":72,"tags":73,"draft":9,"series":-1,"placeholder":-1},"001-binary-shifts-for-flags","2018-10-26","Shift Your C# Enums","Discover the simple yet powerful technique of using bitwise shift operator in C# Enums, and how it can improve the readability and maintainability of your code.",[36]],"uses":{}}]}
